
2nd_final_prj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000015b0  00001644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800106  00800106  0000164a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d00  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028a  00000000  00000000  0000245a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017e7  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00003ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000800  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f5  00000000  00000000  000048b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00004dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__vector_13>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	00 03       	mulsu	r16, r16
      8e:	10 03       	mulsu	r17, r16
      90:	14 03       	mulsu	r17, r20
      92:	18 03       	fmul	r17, r16
      94:	1c 03       	fmul	r17, r20
      96:	20 03       	mulsu	r18, r16
      98:	24 03       	mulsu	r18, r20
      9a:	34 03       	mulsu	r19, r20
      9c:	36 03       	mulsu	r19, r22
      9e:	39 03       	fmul	r19, r17
      a0:	3c 03       	fmul	r19, r20
      a2:	3f 03       	fmul	r19, r23
      a4:	42 03       	mulsu	r20, r18
      a6:	45 03       	mulsu	r20, r21
      a8:	53 03       	mulsu	r21, r19
      aa:	72 03       	mulsu	r23, r18
      ac:	91 03       	fmuls	r17, r17
      ae:	b0 03       	fmuls	r19, r16
      b0:	cf 03       	fmulsu	r20, r23
      b2:	ee 03       	fmulsu	r22, r22
      b4:	0d 04       	cpc	r0, r13
      b6:	29 04       	cpc	r2, r9
      b8:	30 04       	cpc	r3, r0
      ba:	37 04       	cpc	r3, r7
      bc:	3e 04       	cpc	r3, r14
      be:	45 04       	cpc	r4, r5
      c0:	4c 04       	cpc	r4, r12
      c2:	22 04       	cpc	r2, r2
      c4:	53 04       	cpc	r5, r3
      c6:	67 04       	cpc	r6, r7
      c8:	73 04       	cpc	r7, r3
      ca:	77 04       	cpc	r7, r7
      cc:	7b 04       	cpc	r7, r11
      ce:	7f 04       	cpc	r7, r15
      d0:	83 04       	cpc	r8, r3
      d2:	87 04       	cpc	r8, r7
      d4:	8b 04       	cpc	r8, r11
      d6:	8f 04       	cpc	r8, r15
      d8:	93 04       	cpc	r9, r3
      da:	9f 04       	cpc	r9, r15
      dc:	a1 04       	cpc	r10, r1
      de:	a4 04       	cpc	r10, r4
      e0:	a7 04       	cpc	r10, r7
      e2:	aa 04       	cpc	r10, r10
      e4:	ad 04       	cpc	r10, r13
      e6:	b0 04       	cpc	r11, r0
      e8:	b3 04       	cpc	r11, r3
      ea:	b6 04       	cpc	r11, r6
      ec:	b9 04       	cpc	r11, r9
      ee:	ca 04       	cpc	r12, r10
      f0:	e9 04       	cpc	r14, r9
      f2:	fa 04       	cpc	r15, r10
      f4:	0b 05       	cpc	r16, r11
      f6:	1c 05       	cpc	r17, r12
      f8:	2d 05       	cpc	r18, r13
      fa:	3e 05       	cpc	r19, r14
      fc:	4f 05       	cpc	r20, r15
      fe:	60 05       	cpc	r22, r0
     100:	71 05       	cpc	r23, r1
     102:	e1 04       	cpc	r14, r1
     104:	85 05       	cpc	r24, r5
     106:	88 05       	cpc	r24, r8
     108:	8b 05       	cpc	r24, r11
     10a:	8e 05       	cpc	r24, r14
     10c:	91 05       	cpc	r25, r1
     10e:	94 05       	cpc	r25, r4
     110:	97 05       	cpc	r25, r7
     112:	9a 05       	cpc	r25, r10
     114:	9d 05       	cpc	r25, r13
     116:	82 05       	cpc	r24, r2
     118:	a0 05       	cpc	r26, r0
     11a:	b1 05       	cpc	r27, r1
     11c:	be 05       	cpc	r27, r14
     11e:	c2 05       	cpc	r28, r2
     120:	c6 05       	cpc	r28, r6
     122:	ca 05       	cpc	r28, r10
     124:	ce 05       	cpc	r28, r14
     126:	d2 05       	cpc	r29, r2
     128:	d6 05       	cpc	r29, r6
     12a:	da 05       	cpc	r29, r10
     12c:	de 05       	cpc	r29, r14
     12e:	e2 05       	cpc	r30, r2
     130:	e6 05       	cpc	r30, r6
     132:	ea 05       	cpc	r30, r10
     134:	f6 05       	cpc	r31, r6
     136:	f8 05       	cpc	r31, r8
     138:	fb 05       	cpc	r31, r11
     13a:	fe 05       	cpc	r31, r14
     13c:	01 06       	cpc	r0, r17
     13e:	04 06       	cpc	r0, r20
     140:	07 06       	cpc	r0, r23
     142:	0a 06       	cpc	r0, r26
     144:	0d 06       	cpc	r0, r29
     146:	10 06       	cpc	r1, r16
     148:	13 06       	cpc	r1, r19
     14a:	16 06       	cpc	r1, r22
     14c:	19 06       	cpc	r1, r25
     14e:	2a 06       	cpc	r2, r26
     150:	41 06       	cpc	r4, r17
     152:	52 06       	cpc	r5, r18
     154:	63 06       	cpc	r6, r19
     156:	74 06       	cpc	r7, r20
     158:	85 06       	cpc	r8, r21
     15a:	96 06       	cpc	r9, r22
     15c:	a7 06       	cpc	r10, r23
     15e:	b8 06       	cpc	r11, r24
     160:	c9 06       	cpc	r12, r25
     162:	da 06       	cpc	r13, r26
     164:	eb 06       	cpc	r14, r27
     166:	fc 06       	cpc	r15, r28
     168:	02 07       	cpc	r16, r18
     16a:	18 07       	cpc	r17, r24
     16c:	1b 07       	cpc	r17, r27
     16e:	1e 07       	cpc	r17, r30
     170:	21 07       	cpc	r18, r17
     172:	24 07       	cpc	r18, r20
     174:	27 07       	cpc	r18, r23
     176:	2a 07       	cpc	r18, r26
     178:	2d 07       	cpc	r18, r29
     17a:	30 07       	cpc	r19, r16
     17c:	33 07       	cpc	r19, r19
     17e:	36 07       	cpc	r19, r22
     180:	39 07       	cpc	r19, r25
     182:	15 07       	cpc	r17, r21
     184:	3c 07       	cpc	r19, r28
     186:	4d 07       	cpc	r20, r29
     188:	5a 07       	cpc	r21, r26
     18a:	5e 07       	cpc	r21, r30
     18c:	62 07       	cpc	r22, r18
     18e:	66 07       	cpc	r22, r22
     190:	6a 07       	cpc	r22, r26
     192:	6e 07       	cpc	r22, r30
     194:	72 07       	cpc	r23, r18
     196:	76 07       	cpc	r23, r22
     198:	7a 07       	cpc	r23, r26
     19a:	7e 07       	cpc	r23, r30
     19c:	82 07       	cpc	r24, r18
     19e:	86 07       	cpc	r24, r22
     1a0:	8a 07       	cpc	r24, r26
     1a2:	8e 07       	cpc	r24, r30
     1a4:	92 07       	cpc	r25, r18
     1a6:	9e 07       	cpc	r25, r30
     1a8:	a0 07       	cpc	r26, r16
     1aa:	a3 07       	cpc	r26, r19
     1ac:	a6 07       	cpc	r26, r22
     1ae:	a9 07       	cpc	r26, r25
     1b0:	ac 07       	cpc	r26, r28
     1b2:	af 07       	cpc	r26, r31
     1b4:	b2 07       	cpc	r27, r18
     1b6:	b5 07       	cpc	r27, r21
     1b8:	b8 07       	cpc	r27, r24
     1ba:	bb 07       	cpc	r27, r27
     1bc:	be 07       	cpc	r27, r30
     1be:	c1 07       	cpc	r28, r17
     1c0:	c4 07       	cpc	r28, r20
     1c2:	c7 07       	cpc	r28, r23
     1c4:	ca 07       	cpc	r28, r26
     1c6:	db 07       	cpc	r29, r27
     1c8:	f2 07       	cpc	r31, r18
     1ca:	03 08       	sbc	r0, r3
     1cc:	14 08       	sbc	r1, r4
     1ce:	25 08       	sbc	r2, r5
     1d0:	36 08       	sbc	r3, r6
     1d2:	47 08       	sbc	r4, r7
     1d4:	58 08       	sbc	r5, r8
     1d6:	69 08       	sbc	r6, r9
     1d8:	7a 08       	sbc	r7, r10
     1da:	8b 08       	sbc	r8, r11
     1dc:	9c 08       	sbc	r9, r12
     1de:	ad 08       	sbc	r10, r13
     1e0:	be 08       	sbc	r11, r14
     1e2:	cf 08       	sbc	r12, r15
     1e4:	e0 08       	sbc	r14, r0
     1e6:	e6 08       	sbc	r14, r6
     1e8:	fc 08       	sbc	r15, r12
     1ea:	ff 08       	sbc	r15, r15
     1ec:	02 09       	sbc	r16, r2
     1ee:	05 09       	sbc	r16, r5
     1f0:	08 09       	sbc	r16, r8
     1f2:	0b 09       	sbc	r16, r11
     1f4:	0e 09       	sbc	r16, r14
     1f6:	11 09       	sbc	r17, r1
     1f8:	14 09       	sbc	r17, r4
     1fa:	17 09       	sbc	r17, r7
     1fc:	1a 09       	sbc	r17, r10
     1fe:	1d 09       	sbc	r17, r13
     200:	20 09       	sbc	r18, r0
     202:	23 09       	sbc	r18, r3
     204:	26 09       	sbc	r18, r6
     206:	f9 08       	sbc	r15, r9
     208:	29 09       	sbc	r18, r9

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	d0 e4       	ldi	r29, 0x40	; 64
     212:	de bf       	out	0x3e, r29	; 62
     214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	e0 eb       	ldi	r30, 0xB0	; 176
     21e:	f5 e1       	ldi	r31, 0x15	; 21
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0b bf       	out	0x3b, r16	; 59
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
     226:	07 90       	elpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	a6 30       	cpi	r26, 0x06	; 6
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>

00000230 <__do_clear_bss>:
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	a6 e0       	ldi	r26, 0x06	; 6
     234:	b1 e0       	ldi	r27, 0x01	; 1
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a8 31       	cpi	r26, 0x18	; 24
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 2b 09 	call	0x1256	; 0x1256 <main>
     244:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <TimerOn>:
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
     24a:	8b e0       	ldi	r24, 0x0B	; 11
     24c:	80 93 81 00 	sts	0x0081, r24
     250:	8d e7       	ldi	r24, 0x7D	; 125
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 89 00 	sts	0x0089, r25
     258:	80 93 88 00 	sts	0x0088, r24
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	80 93 6f 00 	sts	0x006F, r24
     262:	10 92 85 00 	sts	0x0085, r1
     266:	10 92 84 00 	sts	0x0084, r1
     26a:	80 91 01 01 	lds	r24, 0x0101
     26e:	90 91 02 01 	lds	r25, 0x0102
     272:	a0 91 03 01 	lds	r26, 0x0103
     276:	b0 91 04 01 	lds	r27, 0x0104
     27a:	80 93 07 01 	sts	0x0107, r24
     27e:	90 93 08 01 	sts	0x0108, r25
     282:	a0 93 09 01 	sts	0x0109, r26
     286:	b0 93 0a 01 	sts	0x010A, r27
     28a:	8f b7       	in	r24, 0x3f	; 63
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	8f bf       	out	0x3f, r24	; 63
     290:	08 95       	ret

00000292 <__vector_13>:
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	af 93       	push	r26
     2a2:	bf 93       	push	r27
     2a4:	80 91 07 01 	lds	r24, 0x0107
     2a8:	90 91 08 01 	lds	r25, 0x0108
     2ac:	a0 91 09 01 	lds	r26, 0x0109
     2b0:	b0 91 0a 01 	lds	r27, 0x010A
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	a1 09       	sbc	r26, r1
     2b8:	b1 09       	sbc	r27, r1
     2ba:	80 93 07 01 	sts	0x0107, r24
     2be:	90 93 08 01 	sts	0x0108, r25
     2c2:	a0 93 09 01 	sts	0x0109, r26
     2c6:	b0 93 0a 01 	sts	0x010A, r27
     2ca:	89 2b       	or	r24, r25
     2cc:	8a 2b       	or	r24, r26
     2ce:	8b 2b       	or	r24, r27
     2d0:	99 f4       	brne	.+38     	; 0x2f8 <__vector_13+0x66>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 0b 01 	sts	0x010B, r24
     2d8:	80 91 01 01 	lds	r24, 0x0101
     2dc:	90 91 02 01 	lds	r25, 0x0102
     2e0:	a0 91 03 01 	lds	r26, 0x0103
     2e4:	b0 91 04 01 	lds	r27, 0x0104
     2e8:	80 93 07 01 	sts	0x0107, r24
     2ec:	90 93 08 01 	sts	0x0108, r25
     2f0:	a0 93 09 01 	sts	0x0109, r26
     2f4:	b0 93 0a 01 	sts	0x010A, r27
     2f8:	bf 91       	pop	r27
     2fa:	af 91       	pop	r26
     2fc:	9f 91       	pop	r25
     2fe:	8f 91       	pop	r24
     300:	0f 90       	pop	r0
     302:	0f be       	out	0x3f, r0	; 63
     304:	0f 90       	pop	r0
     306:	1f 90       	pop	r1
     308:	18 95       	reti

0000030a <transmit_data>:
///////////////////////////////////////////////begin code/////////////////////////////////////////////////////////////////////////////

void transmit_data(unsigned char data) 
{
	int i;
	for (i = 0; i < 8 ; ++i) {
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		PORTD = (PORTD & 0xF0) | 0x08;
		// set SER = next bit of data to be sent.
		PORTD |= ((data >> i) & 0x01);
     30e:	90 e0       	ldi	r25, 0x00	; 0
{
	int i;
	for (i = 0; i < 8 ; ++i) {
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		PORTD = (PORTD & 0xF0) | 0x08;
     310:	4b b1       	in	r20, 0x0b	; 11
     312:	40 7f       	andi	r20, 0xF0	; 240
     314:	48 60       	ori	r20, 0x08	; 8
     316:	4b b9       	out	0x0b, r20	; 11
		// set SER = next bit of data to be sent.
		PORTD |= ((data >> i) & 0x01);
     318:	6b b1       	in	r22, 0x0b	; 11
     31a:	ac 01       	movw	r20, r24
     31c:	02 2e       	mov	r0, r18
     31e:	02 c0       	rjmp	.+4      	; 0x324 <transmit_data+0x1a>
     320:	55 95       	asr	r21
     322:	47 95       	ror	r20
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <transmit_data+0x16>
     328:	41 70       	andi	r20, 0x01	; 1
     32a:	46 2b       	or	r20, r22
     32c:	4b b9       	out	0x0b, r20	; 11
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTD |= 0x02;
     32e:	59 9a       	sbi	0x0b, 1	; 11
///////////////////////////////////////////////begin code/////////////////////////////////////////////////////////////////////////////

void transmit_data(unsigned char data) 
{
	int i;
	for (i = 0; i < 8 ; ++i) {
     330:	2f 5f       	subi	r18, 0xFF	; 255
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	28 30       	cpi	r18, 0x08	; 8
     336:	31 05       	cpc	r19, r1
     338:	59 f7       	brne	.-42     	; 0x310 <transmit_data+0x6>
		PORTD |= ((data >> i) & 0x01);
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTD |= 0x02;
	}
	// set RCLK = 1. Rising edge copies data from “Shift” register to “Storage” register
	PORTD |= 0x04;
     33a:	5a 9a       	sbi	0x0b, 2	; 11
	// clears all lines in preparation of a new transmission
	PORTD = PORTD & 0xF0;
     33c:	8b b1       	in	r24, 0x0b	; 11
     33e:	80 7f       	andi	r24, 0xF0	; 240
     340:	8b b9       	out	0x0b, r24	; 11
     342:	08 95       	ret

00000344 <simon_SevenSeg>:
}

unsigned char simon_SevenSeg(unsigned char score) 
{
	unsigned char controlSig = 0x00;
	if(score == 9) 
     344:	89 30       	cpi	r24, 0x09	; 9
     346:	a1 f0       	breq	.+40     	; 0x370 <simon_SevenSeg+0x2c>
	{
		controlSig = 0x19;//good
	}
	else if(score == 8) 
     348:	88 30       	cpi	r24, 0x08	; 8
     34a:	a1 f0       	breq	.+40     	; 0x374 <simon_SevenSeg+0x30>
	{
		controlSig = 0x00;//good
	}
	else if(score == 7) 
     34c:	87 30       	cpi	r24, 0x07	; 7
     34e:	a1 f0       	breq	.+40     	; 0x378 <simon_SevenSeg+0x34>
	{
		controlSig = 0x1F;//good
	}
	else if(score == 6) 
     350:	86 30       	cpi	r24, 0x06	; 6
     352:	a1 f0       	breq	.+40     	; 0x37c <simon_SevenSeg+0x38>
	{
		controlSig = 0x40;//good
	}
	else if(score == 5) 
     354:	85 30       	cpi	r24, 0x05	; 5
     356:	a1 f0       	breq	.+40     	; 0x380 <simon_SevenSeg+0x3c>
	{
		controlSig = 0x48;//good
	}
	else if(score == 4) 
     358:	84 30       	cpi	r24, 0x04	; 4
     35a:	a1 f0       	breq	.+40     	; 0x384 <simon_SevenSeg+0x40>
	{
		controlSig = 0x98;//good
	}
	else if(score == 3) 
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	a1 f0       	breq	.+40     	; 0x388 <simon_SevenSeg+0x44>
	{
		controlSig = 0x0C;//good
	}
	else if(score == 2) 
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	a1 f0       	breq	.+40     	; 0x38c <simon_SevenSeg+0x48>
	{
		controlSig = 0x24;//good
	}
	else if(score == 1) 
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	a1 f0       	breq	.+40     	; 0x390 <simon_SevenSeg+0x4c>
	{
		controlSig = 0x9E;//good
	}
	else if(score == 0) 
     368:	88 23       	and	r24, r24
     36a:	a1 f0       	breq	.+40     	; 0x394 <simon_SevenSeg+0x50>
	PORTD = PORTD & 0xF0;
}

unsigned char simon_SevenSeg(unsigned char score) 
{
	unsigned char controlSig = 0x00;
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	08 95       	ret
	if(score == 9) 
	{
		controlSig = 0x19;//good
     370:	89 e1       	ldi	r24, 0x19	; 25
     372:	08 95       	ret
	}
	else if(score == 8) 
	{
		controlSig = 0x00;//good
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret
	}
	else if(score == 7) 
	{
		controlSig = 0x1F;//good
     378:	8f e1       	ldi	r24, 0x1F	; 31
     37a:	08 95       	ret
	}
	else if(score == 6) 
	{
		controlSig = 0x40;//good
     37c:	80 e4       	ldi	r24, 0x40	; 64
     37e:	08 95       	ret
	}
	else if(score == 5) 
	{
		controlSig = 0x48;//good
     380:	88 e4       	ldi	r24, 0x48	; 72
     382:	08 95       	ret
	}
	else if(score == 4) 
	{
		controlSig = 0x98;//good
     384:	88 e9       	ldi	r24, 0x98	; 152
     386:	08 95       	ret
	}
	else if(score == 3) 
	{
		controlSig = 0x0C;//good
     388:	8c e0       	ldi	r24, 0x0C	; 12
     38a:	08 95       	ret
	}
	else if(score == 2) 
	{
		controlSig = 0x24;//good
     38c:	84 e2       	ldi	r24, 0x24	; 36
     38e:	08 95       	ret
	}
	else if(score == 1) 
	{
		controlSig = 0x9E;//good
     390:	8e e9       	ldi	r24, 0x9E	; 158
     392:	08 95       	ret
	}
	else if(score == 0) 
	{
		controlSig = 0x02;//good
     394:	82 e0       	ldi	r24, 0x02	; 2
	}
	return controlSig;
}
     396:	08 95       	ret

00000398 <TickFct_State_machine_1>:

//////////////////////////////////////////7 seg BCD////////////////////////////////////////////////////////////////////////////////////
enum SM1_States { SM1_off, SM1_on1, SM1_on2, SM1_on3, SM1_on4} SM1_State;
void TickFct_State_machine_1() 
{
	switch(SM1_State) 
     398:	80 91 12 01 	lds	r24, 0x0112
     39c:	82 30       	cpi	r24, 0x02	; 2
     39e:	c9 f0       	breq	.+50     	; 0x3d2 <TickFct_State_machine_1+0x3a>
     3a0:	28 f4       	brcc	.+10     	; 0x3ac <TickFct_State_machine_1+0x14>
     3a2:	88 23       	and	r24, r24
     3a4:	41 f0       	breq	.+16     	; 0x3b6 <TickFct_State_machine_1+0x1e>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	81 f0       	breq	.+32     	; 0x3ca <TickFct_State_machine_1+0x32>
     3aa:	20 c0       	rjmp	.+64     	; 0x3ec <TickFct_State_machine_1+0x54>
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	a9 f0       	breq	.+42     	; 0x3da <TickFct_State_machine_1+0x42>
     3b0:	84 30       	cpi	r24, 0x04	; 4
     3b2:	b9 f0       	breq	.+46     	; 0x3e2 <TickFct_State_machine_1+0x4a>
     3b4:	1b c0       	rjmp	.+54     	; 0x3ec <TickFct_State_machine_1+0x54>
	{

		case SM1_off:
		if(global_g == 0)
     3b6:	80 91 06 01 	lds	r24, 0x0106
     3ba:	81 11       	cpse	r24, r1
     3bc:	26 c0       	rjmp	.+76     	; 0x40a <TickFct_State_machine_1+0x72>
		{
			if(~PINB & 0x10)
     3be:	1c 99       	sbic	0x03, 4	; 3
     3c0:	24 c0       	rjmp	.+72     	; 0x40a <TickFct_State_machine_1+0x72>
			{
				SM1_State = SM1_on1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 12 01 	sts	0x0112, r24
     3c8:	26 c0       	rjmp	.+76     	; 0x416 <TickFct_State_machine_1+0x7e>
				SM1_State = SM1_off;
			}
		}
		break;
		case SM1_on1:
		SM1_State = SM1_on2;
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	80 93 12 01 	sts	0x0112, r24
     3d0:	25 c0       	rjmp	.+74     	; 0x41c <TickFct_State_machine_1+0x84>
		break;
		case SM1_on2:
		SM1_State = SM1_on3;
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	80 93 12 01 	sts	0x0112, r24
     3d8:	24 c0       	rjmp	.+72     	; 0x422 <TickFct_State_machine_1+0x8a>
		break;
		case SM1_on3:
		SM1_State = SM1_on4;
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	80 93 12 01 	sts	0x0112, r24
     3e0:	23 c0       	rjmp	.+70     	; 0x428 <TickFct_State_machine_1+0x90>
		break;
		case SM1_on4:
		SM1_State = SM1_off;
     3e2:	10 92 12 01 	sts	0x0112, r1
		global_g = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 06 01 	sts	0x0106, r24
	}

	switch(SM1_State) 
     3ec:	80 91 12 01 	lds	r24, 0x0112
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	a1 f0       	breq	.+40     	; 0x41c <TickFct_State_machine_1+0x84>
     3f4:	28 f4       	brcc	.+10     	; 0x400 <TickFct_State_machine_1+0x68>
     3f6:	88 23       	and	r24, r24
     3f8:	41 f0       	breq	.+16     	; 0x40a <TickFct_State_machine_1+0x72>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	61 f0       	breq	.+24     	; 0x416 <TickFct_State_machine_1+0x7e>
     3fe:	08 95       	ret
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	79 f0       	breq	.+30     	; 0x422 <TickFct_State_machine_1+0x8a>
     404:	84 30       	cpi	r24, 0x04	; 4
     406:	91 f4       	brne	.+36     	; 0x42c <TickFct_State_machine_1+0x94>
     408:	0f c0       	rjmp	.+30     	; 0x428 <TickFct_State_machine_1+0x90>
	{
		case SM1_off:
		PORTA = 0X00;
     40a:	12 b8       	out	0x02, r1	; 2
		transmit_data(simon_SevenSeg(lives));
     40c:	80 91 00 01 	lds	r24, 0x0100
     410:	99 df       	rcall	.-206    	; 0x344 <simon_SevenSeg>
     412:	7b cf       	rjmp	.-266    	; 0x30a <transmit_data>
		break;
     414:	08 95       	ret
		case SM1_on1:
		PORTA = 0x01;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	82 b9       	out	0x02, r24	; 2
		break;
     41a:	08 95       	ret
		case SM1_on2:
		PORTA = 0x02;
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	82 b9       	out	0x02, r24	; 2
		break;
     420:	08 95       	ret
		case SM1_on3:
		PORTA = 0x04;
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	82 b9       	out	0x02, r24	; 2
		break;
     426:	08 95       	ret
		case SM1_on4:
		PORTA = 0x08;
     428:	88 e0       	ldi	r24, 0x08	; 8
     42a:	82 b9       	out	0x02, r24	; 2
     42c:	08 95       	ret

0000042e <ButtonPress>:
}

enum Press_States {Init, Press1, Press2, Press3, Press4, Error, Off} Press_States;
void ButtonPress()
{
	switch(Press_States)
     42e:	80 91 17 01 	lds	r24, 0x0117
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	09 f4       	brne	.+2      	; 0x438 <ButtonPress+0xa>
     436:	52 c0       	rjmp	.+164    	; 0x4dc <ButtonPress+0xae>
     438:	28 f4       	brcc	.+10     	; 0x444 <ButtonPress+0x16>
     43a:	88 23       	and	r24, r24
     43c:	61 f0       	breq	.+24     	; 0x456 <ButtonPress+0x28>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	71 f1       	breq	.+92     	; 0x49e <ButtonPress+0x70>
     442:	98 c0       	rjmp	.+304    	; 0x574 <ButtonPress+0x146>
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	09 f4       	brne	.+2      	; 0x44a <ButtonPress+0x1c>
     448:	87 c0       	rjmp	.+270    	; 0x558 <ButtonPress+0x12a>
     44a:	08 f4       	brcc	.+2      	; 0x44e <ButtonPress+0x20>
     44c:	66 c0       	rjmp	.+204    	; 0x51a <ButtonPress+0xec>
     44e:	85 30       	cpi	r24, 0x05	; 5
     450:	09 f4       	brne	.+2      	; 0x454 <ButtonPress+0x26>
     452:	88 c0       	rjmp	.+272    	; 0x564 <ButtonPress+0x136>
     454:	8f c0       	rjmp	.+286    	; 0x574 <ButtonPress+0x146>
	{
		case Init:
		if(global_g == 1)
     456:	80 91 06 01 	lds	r24, 0x0106
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	09 f0       	breq	.+2      	; 0x460 <ButtonPress+0x32>
     45e:	c5 c0       	rjmp	.+394    	; 0x5ea <ButtonPress+0x1bc>
		{
			if(~PINB & 0x01)
     460:	18 99       	sbic	0x03, 0	; 3
     462:	05 c0       	rjmp	.+10     	; 0x46e <ButtonPress+0x40>
			{
				while(~PINB & 0x01){}
     464:	18 9b       	sbis	0x03, 0	; 3
     466:	fe cf       	rjmp	.-4      	; 0x464 <ButtonPress+0x36>
				Press_States = Press1;	
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 17 01 	sts	0x0117, r24
			}
			if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     46e:	19 9b       	sbis	0x03, 1	; 3
     470:	04 c0       	rjmp	.+8      	; 0x47a <ButtonPress+0x4c>
     472:	1a 9b       	sbis	0x03, 2	; 3
     474:	02 c0       	rjmp	.+4      	; 0x47a <ButtonPress+0x4c>
     476:	1b 99       	sbic	0x03, 3	; 3
     478:	7d c0       	rjmp	.+250    	; 0x574 <ButtonPress+0x146>
			{
				if(lives - 1 > -1)
     47a:	20 91 00 01 	lds	r18, 0x0100
     47e:	82 2f       	mov	r24, r18
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	99 23       	and	r25, r25
     486:	24 f0       	brlt	.+8      	; 0x490 <ButtonPress+0x62>
				{
					lives--;
     488:	21 50       	subi	r18, 0x01	; 1
     48a:	20 93 00 01 	sts	0x0100, r18
     48e:	03 c0       	rjmp	.+6      	; 0x496 <ButtonPress+0x68>
				}
				else
				{
					global_g = 20;
     490:	84 e1       	ldi	r24, 0x14	; 20
     492:	80 93 06 01 	sts	0x0106, r24
				}
				Press_States = Error;
     496:	85 e0       	ldi	r24, 0x05	; 5
     498:	80 93 17 01 	sts	0x0117, r24
     49c:	7b c0       	rjmp	.+246    	; 0x594 <ButtonPress+0x166>
			}
		}
		break;
		
		case Press1:
		if(~PINB & 0x02)
     49e:	19 99       	sbic	0x03, 1	; 3
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <ButtonPress+0x7e>
		{
			while(~PINB & 0x02){}
     4a2:	19 9b       	sbis	0x03, 1	; 3
     4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <ButtonPress+0x74>
			Press_States = Press2;
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	80 93 17 01 	sts	0x0117, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     4ac:	18 9b       	sbis	0x03, 0	; 3
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <ButtonPress+0x8a>
     4b0:	1a 9b       	sbis	0x03, 2	; 3
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <ButtonPress+0x8a>
     4b4:	1b 99       	sbic	0x03, 3	; 3
     4b6:	5e c0       	rjmp	.+188    	; 0x574 <ButtonPress+0x146>
		{
			if(lives - 1 > -1)
     4b8:	20 91 00 01 	lds	r18, 0x0100
     4bc:	82 2f       	mov	r24, r18
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	99 23       	and	r25, r25
     4c4:	24 f0       	brlt	.+8      	; 0x4ce <ButtonPress+0xa0>
			{
				lives--;
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	20 93 00 01 	sts	0x0100, r18
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <ButtonPress+0xa6>
			}
			else
			{
				global_g = 20;
     4ce:	84 e1       	ldi	r24, 0x14	; 20
     4d0:	80 93 06 01 	sts	0x0106, r24
			}
			Press_States = Error;
     4d4:	85 e0       	ldi	r24, 0x05	; 5
     4d6:	80 93 17 01 	sts	0x0117, r24
     4da:	5c c0       	rjmp	.+184    	; 0x594 <ButtonPress+0x166>
		}
		break;
		case Press2:
		if(~PINB & 0x04)
     4dc:	1a 99       	sbic	0x03, 2	; 3
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <ButtonPress+0xbc>
		{
			while(~PINB & 0x04){}
     4e0:	1a 9b       	sbis	0x03, 2	; 3
     4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <ButtonPress+0xb2>
			Press_States = Press3;
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 93 17 01 	sts	0x0117, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     4ea:	19 9b       	sbis	0x03, 1	; 3
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <ButtonPress+0xc8>
     4ee:	18 9b       	sbis	0x03, 0	; 3
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <ButtonPress+0xc8>
     4f2:	1b 99       	sbic	0x03, 3	; 3
     4f4:	3f c0       	rjmp	.+126    	; 0x574 <ButtonPress+0x146>
		{
			if(lives - 1 > -1)
     4f6:	20 91 00 01 	lds	r18, 0x0100
     4fa:	82 2f       	mov	r24, r18
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	99 23       	and	r25, r25
     502:	24 f0       	brlt	.+8      	; 0x50c <ButtonPress+0xde>
			{
				lives--;
     504:	21 50       	subi	r18, 0x01	; 1
     506:	20 93 00 01 	sts	0x0100, r18
     50a:	03 c0       	rjmp	.+6      	; 0x512 <ButtonPress+0xe4>
			}
			else
			{
				global_g = 20;
     50c:	84 e1       	ldi	r24, 0x14	; 20
     50e:	80 93 06 01 	sts	0x0106, r24
			}
			Press_States = Error;
     512:	85 e0       	ldi	r24, 0x05	; 5
     514:	80 93 17 01 	sts	0x0117, r24
     518:	3d c0       	rjmp	.+122    	; 0x594 <ButtonPress+0x166>
		}
		break;
		case Press3:
		if(~PINB & 0x08)
     51a:	1b 99       	sbic	0x03, 3	; 3
     51c:	05 c0       	rjmp	.+10     	; 0x528 <ButtonPress+0xfa>
		{
			while(~PINB & 0x08){}
     51e:	1b 9b       	sbis	0x03, 3	; 3
     520:	fe cf       	rjmp	.-4      	; 0x51e <ButtonPress+0xf0>
			Press_States = Press4;
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	80 93 17 01 	sts	0x0117, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     528:	19 9b       	sbis	0x03, 1	; 3
     52a:	04 c0       	rjmp	.+8      	; 0x534 <ButtonPress+0x106>
     52c:	1a 9b       	sbis	0x03, 2	; 3
     52e:	02 c0       	rjmp	.+4      	; 0x534 <ButtonPress+0x106>
     530:	18 99       	sbic	0x03, 0	; 3
     532:	20 c0       	rjmp	.+64     	; 0x574 <ButtonPress+0x146>
		{
			if(lives - 1 > -1)
     534:	20 91 00 01 	lds	r18, 0x0100
     538:	82 2f       	mov	r24, r18
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	99 23       	and	r25, r25
     540:	24 f0       	brlt	.+8      	; 0x54a <ButtonPress+0x11c>
			{
				lives--;
     542:	21 50       	subi	r18, 0x01	; 1
     544:	20 93 00 01 	sts	0x0100, r18
     548:	03 c0       	rjmp	.+6      	; 0x550 <ButtonPress+0x122>
			}
			else
			{
				global_g = 20;
     54a:	84 e1       	ldi	r24, 0x14	; 20
     54c:	80 93 06 01 	sts	0x0106, r24
			}
			Press_States = Error;
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	80 93 17 01 	sts	0x0117, r24
     556:	1e c0       	rjmp	.+60     	; 0x594 <ButtonPress+0x166>
		}
		break;
		case Press4:
		if(~PINB & 0x10)
     558:	1c 99       	sbic	0x03, 4	; 3
     55a:	38 c0       	rjmp	.+112    	; 0x5cc <ButtonPress+0x19e>
		{
			Press_States = Off;	
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	80 93 17 01 	sts	0x0117, r24
     562:	3b c0       	rjmp	.+118    	; 0x5da <ButtonPress+0x1ac>
		}
		break;
		case Error:
		if(~PINB & 0x01)
     564:	18 99       	sbic	0x03, 0	; 3
     566:	16 c0       	rjmp	.+44     	; 0x594 <ButtonPress+0x166>
		{
			while(~PINB & 0x01){}
     568:	18 9b       	sbis	0x03, 0	; 3
     56a:	fe cf       	rjmp	.-4      	; 0x568 <ButtonPress+0x13a>
			Press_States = Press1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 17 01 	sts	0x0117, r24
     572:	17 c0       	rjmp	.+46     	; 0x5a2 <ButtonPress+0x174>
		}
		break;
	}
	switch(Press_States)
     574:	80 91 17 01 	lds	r24, 0x0117
     578:	83 30       	cpi	r24, 0x03	; 3
     57a:	09 f1       	breq	.+66     	; 0x5be <ButtonPress+0x190>
     57c:	28 f4       	brcc	.+10     	; 0x588 <ButtonPress+0x15a>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	81 f0       	breq	.+32     	; 0x5a2 <ButtonPress+0x174>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	a9 f0       	breq	.+42     	; 0x5b0 <ButtonPress+0x182>
     586:	08 95       	ret
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	21 f0       	breq	.+8      	; 0x594 <ButtonPress+0x166>
     58c:	f8 f0       	brcs	.+62     	; 0x5cc <ButtonPress+0x19e>
     58e:	86 30       	cpi	r24, 0x06	; 6
     590:	21 f1       	breq	.+72     	; 0x5da <ButtonPress+0x1ac>
     592:	08 95       	ret
	{
		case Error:
		PORTA = 0x10;
     594:	80 e1       	ldi	r24, 0x10	; 16
     596:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     598:	80 91 00 01 	lds	r24, 0x0100
     59c:	d3 de       	rcall	.-602    	; 0x344 <simon_SevenSeg>
     59e:	b5 ce       	rjmp	.-662    	; 0x30a <transmit_data>
		break;
     5a0:	08 95       	ret
		
		case Press1:
		PORTA = 0x01;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5a6:	80 91 00 01 	lds	r24, 0x0100
     5aa:	cc de       	rcall	.-616    	; 0x344 <simon_SevenSeg>
     5ac:	ae ce       	rjmp	.-676    	; 0x30a <transmit_data>
		break;
     5ae:	08 95       	ret
		
		case Press2:
		PORTA = 0x02;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5b4:	80 91 00 01 	lds	r24, 0x0100
     5b8:	c5 de       	rcall	.-630    	; 0x344 <simon_SevenSeg>
     5ba:	a7 ce       	rjmp	.-690    	; 0x30a <transmit_data>
		break;
     5bc:	08 95       	ret
		
		case Press3:
		PORTA = 0x04;
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5c2:	80 91 00 01 	lds	r24, 0x0100
     5c6:	be de       	rcall	.-644    	; 0x344 <simon_SevenSeg>
     5c8:	a0 ce       	rjmp	.-704    	; 0x30a <transmit_data>
		break;
     5ca:	08 95       	ret
		
		case Press4:
		PORTA = 0x08;
     5cc:	88 e0       	ldi	r24, 0x08	; 8
     5ce:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5d0:	80 91 00 01 	lds	r24, 0x0100
     5d4:	b7 de       	rcall	.-658    	; 0x344 <simon_SevenSeg>
     5d6:	99 ce       	rjmp	.-718    	; 0x30a <transmit_data>
		break;
     5d8:	08 95       	ret
		case Off:
		PORTA = 0x00;
     5da:	12 b8       	out	0x02, r1	; 2
		transmit_data(simon_SevenSeg(lives));
     5dc:	80 91 00 01 	lds	r24, 0x0100
     5e0:	b1 de       	rcall	.-670    	; 0x344 <simon_SevenSeg>
     5e2:	93 de       	rcall	.-730    	; 0x30a <transmit_data>
		global_g = 2;
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	80 93 06 01 	sts	0x0106, r24
     5ea:	08 95       	ret

000005ec <TickFct_Machine2>:
}

enum SM2_State {SM2_off, SM2_on1, SM2_on2, SM2_on3, SM2_on4, SM2_on5, SM2_on6} SM2_States;
void TickFct_Machine2()
{
	switch(SM2_States)
     5ec:	80 91 11 01 	lds	r24, 0x0111
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	87 30       	cpi	r24, 0x07	; 7
     5f4:	91 05       	cpc	r25, r1
     5f6:	70 f5       	brcc	.+92     	; 0x654 <TickFct_Machine2+0x68>
     5f8:	fc 01       	movw	r30, r24
     5fa:	ea 5b       	subi	r30, 0xBA	; 186
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	d0 c7       	rjmp	.+4000   	; 0x15a0 <__tablejump2__>
	{
		case SM2_off:
		if(global_g == 2)
     600:	80 91 06 01 	lds	r24, 0x0106
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	81 f5       	brne	.+96     	; 0x668 <TickFct_Machine2+0x7c>
		{
			if(~PINB & 0x01)
     608:	18 99       	sbic	0x03, 0	; 3
     60a:	03 c0       	rjmp	.+6      	; 0x612 <TickFct_Machine2+0x26>
			{
				SM2_States = SM2_on1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 11 01 	sts	0x0111, r24
			}
			while(!(~PINB & 0x01))
     612:	18 9b       	sbis	0x03, 0	; 3
     614:	1f c0       	rjmp	.+62     	; 0x654 <TickFct_Machine2+0x68>
			{
				SM2_States = SM2_off;
     616:	10 92 11 01 	sts	0x0111, r1
		{
			if(~PINB & 0x01)
			{
				SM2_States = SM2_on1;
			}
			while(!(~PINB & 0x01))
     61a:	18 99       	sbic	0x03, 0	; 3
     61c:	fc cf       	rjmp	.-8      	; 0x616 <TickFct_Machine2+0x2a>
     61e:	24 c0       	rjmp	.+72     	; 0x668 <TickFct_Machine2+0x7c>
		{
			SM2_States = SM2_off;
		}
		break;
		case SM2_on1:
		SM2_States = SM2_on2;
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	80 93 11 01 	sts	0x0111, r24
     626:	25 c0       	rjmp	.+74     	; 0x672 <TickFct_Machine2+0x86>
		break;
		case SM2_on2:
		SM2_States = SM2_on3;
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	80 93 11 01 	sts	0x0111, r24
     62e:	24 c0       	rjmp	.+72     	; 0x678 <TickFct_Machine2+0x8c>
		break;
		case SM2_on3:
		SM2_States = SM2_on4;
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	80 93 11 01 	sts	0x0111, r24
     636:	23 c0       	rjmp	.+70     	; 0x67e <TickFct_Machine2+0x92>
		break;
		case SM2_on4:
		SM2_States = SM2_on5;
     638:	85 e0       	ldi	r24, 0x05	; 5
     63a:	80 93 11 01 	sts	0x0111, r24
     63e:	22 c0       	rjmp	.+68     	; 0x684 <TickFct_Machine2+0x98>
		break;
		case SM2_on5:
		SM2_States = SM2_on6;
     640:	86 e0       	ldi	r24, 0x06	; 6
     642:	80 93 11 01 	sts	0x0111, r24
     646:	21 c0       	rjmp	.+66     	; 0x68a <TickFct_Machine2+0x9e>
		break;
		case SM2_on6:
		global_g = 3;
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	80 93 06 01 	sts	0x0106, r24
		SM2_States = SM2_off;
     64e:	10 92 11 01 	sts	0x0111, r1
		break;
     652:	0a c0       	rjmp	.+20     	; 0x668 <TickFct_Machine2+0x7c>
	}

	switch(SM2_States)
     654:	80 91 11 01 	lds	r24, 0x0111
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	87 30       	cpi	r24, 0x07	; 7
     65c:	91 05       	cpc	r25, r1
     65e:	b8 f4       	brcc	.+46     	; 0x68e <TickFct_Machine2+0xa2>
     660:	fc 01       	movw	r30, r24
     662:	e3 5b       	subi	r30, 0xB3	; 179
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	9c c7       	rjmp	.+3896   	; 0x15a0 <__tablejump2__>
	{
		case SM2_off:
		PORTA = 0x00;
     668:	12 b8       	out	0x02, r1	; 2
		break;
     66a:	08 95       	ret
		case SM2_on1:
		PORTA = 0x01;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	82 b9       	out	0x02, r24	; 2
		break;
     670:	08 95       	ret
		case SM2_on2:
		PORTA = 0x04;
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	82 b9       	out	0x02, r24	; 2
		break;
     676:	08 95       	ret
		case SM2_on3:
		PORTA = 0x08;
     678:	88 e0       	ldi	r24, 0x08	; 8
     67a:	82 b9       	out	0x02, r24	; 2
		break;
     67c:	08 95       	ret
		case SM2_on4:
		PORTA = 0x01;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	82 b9       	out	0x02, r24	; 2
		break;
     682:	08 95       	ret
		case SM2_on5:
		PORTA = 0x02;
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	82 b9       	out	0x02, r24	; 2
		break;
     688:	08 95       	ret
		case SM2_on6:
		PORTA = 0x01;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	82 b9       	out	0x02, r24	; 2
     68e:	08 95       	ret

00000690 <ButtonPress2>:
}

enum Press_sec_level{Init2, Press_state1, Press_state2, Press_state3, Press_state4, Press_state5, Press_state6, Error2, Off2} Press_sec_level;
void ButtonPress2()
{
	switch(Press_sec_level)
     690:	80 91 0c 01 	lds	r24, 0x010C
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	87 30       	cpi	r24, 0x07	; 7
     698:	91 05       	cpc	r25, r1
     69a:	08 f0       	brcs	.+2      	; 0x69e <ButtonPress2+0xe>
     69c:	c4 c0       	rjmp	.+392    	; 0x826 <ButtonPress2+0x196>
     69e:	fc 01       	movw	r30, r24
     6a0:	ec 5a       	subi	r30, 0xAC	; 172
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	7d c7       	rjmp	.+3834   	; 0x15a0 <__tablejump2__>
	{
		case Init2:
		if(~PINB & 0x01)
     6a6:	18 99       	sbic	0x03, 0	; 3
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <ButtonPress2+0x24>
		{
			while(~PINB & 0x01){}
     6aa:	18 9b       	sbis	0x03, 0	; 3
     6ac:	fe cf       	rjmp	.-4      	; 0x6aa <ButtonPress2+0x1a>
			Press_sec_level = Press_state1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     6b4:	19 9b       	sbis	0x03, 1	; 3
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <ButtonPress2+0x30>
     6b8:	1a 9b       	sbis	0x03, 2	; 3
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <ButtonPress2+0x30>
     6bc:	1b 99       	sbic	0x03, 3	; 3
     6be:	b6 c0       	rjmp	.+364    	; 0x82c <ButtonPress2+0x19c>
		{
			if(lives - 1 > -1)
     6c0:	20 91 00 01 	lds	r18, 0x0100
     6c4:	82 2f       	mov	r24, r18
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	99 23       	and	r25, r25
     6cc:	24 f0       	brlt	.+8      	; 0x6d6 <ButtonPress2+0x46>
			{
				lives--;
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	20 93 00 01 	sts	0x0100, r18
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <ButtonPress2+0x4c>
			}
			else
			{
				global_g = 20;
     6d6:	84 e1       	ldi	r24, 0x14	; 20
     6d8:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     6dc:	87 e0       	ldi	r24, 0x07	; 7
     6de:	80 93 0c 01 	sts	0x010C, r24
     6e2:	b0 c0       	rjmp	.+352    	; 0x844 <ButtonPress2+0x1b4>
		}
		break;
		case Press_state1:
		if(~PINB & 0x04)
     6e4:	1a 99       	sbic	0x03, 2	; 3
     6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <ButtonPress2+0x62>
		{
			while(~PINB & 0x04){}
     6e8:	1a 9b       	sbis	0x03, 2	; 3
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <ButtonPress2+0x58>
			Press_sec_level = Press_state2;
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     6f2:	19 9b       	sbis	0x03, 1	; 3
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <ButtonPress2+0x6e>
     6f6:	18 9b       	sbis	0x03, 0	; 3
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <ButtonPress2+0x6e>
     6fa:	1b 99       	sbic	0x03, 3	; 3
     6fc:	97 c0       	rjmp	.+302    	; 0x82c <ButtonPress2+0x19c>
		{
			if(lives - 1 > -1)
     6fe:	20 91 00 01 	lds	r18, 0x0100
     702:	82 2f       	mov	r24, r18
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	99 23       	and	r25, r25
     70a:	24 f0       	brlt	.+8      	; 0x714 <ButtonPress2+0x84>
			{
				lives--;
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	20 93 00 01 	sts	0x0100, r18
     712:	03 c0       	rjmp	.+6      	; 0x71a <ButtonPress2+0x8a>
			}
			else
			{
				global_g = 20;
     714:	84 e1       	ldi	r24, 0x14	; 20
     716:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     71a:	87 e0       	ldi	r24, 0x07	; 7
     71c:	80 93 0c 01 	sts	0x010C, r24
     720:	91 c0       	rjmp	.+290    	; 0x844 <ButtonPress2+0x1b4>
		}
		break;

		case Press_state2:
		if(~PINB & 0x08)
     722:	1b 99       	sbic	0x03, 3	; 3
     724:	05 c0       	rjmp	.+10     	; 0x730 <ButtonPress2+0xa0>
		{
			while(~PINB & 0x08){}
     726:	1b 9b       	sbis	0x03, 3	; 3
     728:	fe cf       	rjmp	.-4      	; 0x726 <ButtonPress2+0x96>
			Press_sec_level = Press_state3;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     730:	19 9b       	sbis	0x03, 1	; 3
     732:	04 c0       	rjmp	.+8      	; 0x73c <ButtonPress2+0xac>
     734:	1a 9b       	sbis	0x03, 2	; 3
     736:	02 c0       	rjmp	.+4      	; 0x73c <ButtonPress2+0xac>
     738:	18 99       	sbic	0x03, 0	; 3
     73a:	78 c0       	rjmp	.+240    	; 0x82c <ButtonPress2+0x19c>
		{
			if(lives - 1 > -1)
     73c:	20 91 00 01 	lds	r18, 0x0100
     740:	82 2f       	mov	r24, r18
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	99 23       	and	r25, r25
     748:	24 f0       	brlt	.+8      	; 0x752 <ButtonPress2+0xc2>
			{
				lives--;
     74a:	21 50       	subi	r18, 0x01	; 1
     74c:	20 93 00 01 	sts	0x0100, r18
     750:	03 c0       	rjmp	.+6      	; 0x758 <ButtonPress2+0xc8>
			}
			else
			{
				global_g = 20;
     752:	84 e1       	ldi	r24, 0x14	; 20
     754:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 0c 01 	sts	0x010C, r24
     75e:	72 c0       	rjmp	.+228    	; 0x844 <ButtonPress2+0x1b4>
		}
		break;

		case Press_state3:
		if(~PINB & 0x01)
     760:	18 99       	sbic	0x03, 0	; 3
     762:	05 c0       	rjmp	.+10     	; 0x76e <ButtonPress2+0xde>
		{
			while(~PINB & 0x01){}
     764:	18 9b       	sbis	0x03, 0	; 3
     766:	fe cf       	rjmp	.-4      	; 0x764 <ButtonPress2+0xd4>
			Press_sec_level = Press_state4;
     768:	84 e0       	ldi	r24, 0x04	; 4
     76a:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     76e:	19 9b       	sbis	0x03, 1	; 3
     770:	04 c0       	rjmp	.+8      	; 0x77a <ButtonPress2+0xea>
     772:	1a 9b       	sbis	0x03, 2	; 3
     774:	02 c0       	rjmp	.+4      	; 0x77a <ButtonPress2+0xea>
     776:	1b 99       	sbic	0x03, 3	; 3
     778:	59 c0       	rjmp	.+178    	; 0x82c <ButtonPress2+0x19c>
		{
			if(lives - 1 > -1)
     77a:	20 91 00 01 	lds	r18, 0x0100
     77e:	82 2f       	mov	r24, r18
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	99 23       	and	r25, r25
     786:	24 f0       	brlt	.+8      	; 0x790 <ButtonPress2+0x100>
			{
				lives--;
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	20 93 00 01 	sts	0x0100, r18
     78e:	03 c0       	rjmp	.+6      	; 0x796 <ButtonPress2+0x106>
			}
			else
			{
				global_g = 20;
     790:	84 e1       	ldi	r24, 0x14	; 20
     792:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     796:	87 e0       	ldi	r24, 0x07	; 7
     798:	80 93 0c 01 	sts	0x010C, r24
     79c:	53 c0       	rjmp	.+166    	; 0x844 <ButtonPress2+0x1b4>
		}
		break;

		case Press_state4:
		if(~PINB & 0x02)
     79e:	19 99       	sbic	0x03, 1	; 3
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <ButtonPress2+0x11c>
		{
			while(~PINB & 0x02){}
     7a2:	19 9b       	sbis	0x03, 1	; 3
     7a4:	fe cf       	rjmp	.-4      	; 0x7a2 <ButtonPress2+0x112>
			Press_sec_level = Press_state5;
     7a6:	85 e0       	ldi	r24, 0x05	; 5
     7a8:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     7ac:	18 9b       	sbis	0x03, 0	; 3
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <ButtonPress2+0x128>
     7b0:	1a 9b       	sbis	0x03, 2	; 3
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <ButtonPress2+0x128>
     7b4:	1b 99       	sbic	0x03, 3	; 3
     7b6:	3a c0       	rjmp	.+116    	; 0x82c <ButtonPress2+0x19c>
		{
			if(lives - 1 > -1)
     7b8:	20 91 00 01 	lds	r18, 0x0100
     7bc:	82 2f       	mov	r24, r18
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	99 23       	and	r25, r25
     7c4:	24 f0       	brlt	.+8      	; 0x7ce <ButtonPress2+0x13e>
			{
				lives--;
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	20 93 00 01 	sts	0x0100, r18
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <ButtonPress2+0x144>
			}
			else
			{
				global_g = 20;
     7ce:	84 e1       	ldi	r24, 0x14	; 20
     7d0:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	80 93 0c 01 	sts	0x010C, r24
     7da:	34 c0       	rjmp	.+104    	; 0x844 <ButtonPress2+0x1b4>
		}
		break;

		case Press_state5:
		if(~PINB & 0x01)
     7dc:	18 99       	sbic	0x03, 0	; 3
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <ButtonPress2+0x15a>
		{
			while(~PINB & 0x01){}
     7e0:	18 9b       	sbis	0x03, 0	; 3
     7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <ButtonPress2+0x150>
			Press_sec_level = Press_state6;
     7e4:	86 e0       	ldi	r24, 0x06	; 6
     7e6:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     7ea:	19 9b       	sbis	0x03, 1	; 3
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <ButtonPress2+0x166>
     7ee:	1a 9b       	sbis	0x03, 2	; 3
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <ButtonPress2+0x166>
     7f2:	1b 99       	sbic	0x03, 3	; 3
     7f4:	1b c0       	rjmp	.+54     	; 0x82c <ButtonPress2+0x19c>
		{
			if(lives - 1 > -1)
     7f6:	20 91 00 01 	lds	r18, 0x0100
     7fa:	82 2f       	mov	r24, r18
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	99 23       	and	r25, r25
     802:	24 f0       	brlt	.+8      	; 0x80c <ButtonPress2+0x17c>
			{
				lives--;
     804:	21 50       	subi	r18, 0x01	; 1
     806:	20 93 00 01 	sts	0x0100, r18
     80a:	03 c0       	rjmp	.+6      	; 0x812 <ButtonPress2+0x182>
			}
			else
			{
				global_g = 20;
     80c:	84 e1       	ldi	r24, 0x14	; 20
     80e:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	80 93 0c 01 	sts	0x010C, r24
     818:	15 c0       	rjmp	.+42     	; 0x844 <ButtonPress2+0x1b4>
		}
		break;

		case Press_state6:
		if(~PINB & 0x10)
     81a:	1c 99       	sbic	0x03, 4	; 3
     81c:	3d c0       	rjmp	.+122    	; 0x898 <ButtonPress2+0x208>
		{
			Press_sec_level = Off2;
     81e:	88 e0       	ldi	r24, 0x08	; 8
     820:	80 93 0c 01 	sts	0x010C, r24
     824:	40 c0       	rjmp	.+128    	; 0x8a6 <ButtonPress2+0x216>
		}
		break;
		default:
		Press_sec_level = Init2;
     826:	10 92 0c 01 	sts	0x010C, r1
     82a:	08 95       	ret
	}
	switch(Press_sec_level)
     82c:	80 91 0c 01 	lds	r24, 0x010C
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	fc 01       	movw	r30, r24
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	e8 30       	cpi	r30, 0x08	; 8
     838:	f1 05       	cpc	r31, r1
     83a:	08 f0       	brcs	.+2      	; 0x83e <ButtonPress2+0x1ae>
     83c:	3c c0       	rjmp	.+120    	; 0x8b6 <ButtonPress2+0x226>
     83e:	e5 5a       	subi	r30, 0xA5	; 165
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	ae c6       	rjmp	.+3420   	; 0x15a0 <__tablejump2__>
	{
		case Error2:
		PORTA = 0x10;
     844:	80 e1       	ldi	r24, 0x10	; 16
     846:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     848:	80 91 00 01 	lds	r24, 0x0100
     84c:	7b dd       	rcall	.-1290   	; 0x344 <simon_SevenSeg>
     84e:	5d cd       	rjmp	.-1350   	; 0x30a <transmit_data>
		break;
     850:	08 95       	ret

		case Press_state1:
		PORTA = 0x01;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     856:	80 91 00 01 	lds	r24, 0x0100
     85a:	74 dd       	rcall	.-1304   	; 0x344 <simon_SevenSeg>
     85c:	56 cd       	rjmp	.-1364   	; 0x30a <transmit_data>
		break;
     85e:	08 95       	ret

		case Press_state2:
		PORTA = 0x04;
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     864:	80 91 00 01 	lds	r24, 0x0100
     868:	6d dd       	rcall	.-1318   	; 0x344 <simon_SevenSeg>
     86a:	4f cd       	rjmp	.-1378   	; 0x30a <transmit_data>
		break;
     86c:	08 95       	ret

		case Press_state3:
		PORTA = 0x08;
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     872:	80 91 00 01 	lds	r24, 0x0100
     876:	66 dd       	rcall	.-1332   	; 0x344 <simon_SevenSeg>
     878:	48 cd       	rjmp	.-1392   	; 0x30a <transmit_data>
		break;
     87a:	08 95       	ret

		case Press_state4:
		PORTA = 0x01;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     880:	80 91 00 01 	lds	r24, 0x0100
     884:	5f dd       	rcall	.-1346   	; 0x344 <simon_SevenSeg>
     886:	41 cd       	rjmp	.-1406   	; 0x30a <transmit_data>
		break;
     888:	08 95       	ret

		case Press_state5:
		PORTA = 0x02;
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     88e:	80 91 00 01 	lds	r24, 0x0100
     892:	58 dd       	rcall	.-1360   	; 0x344 <simon_SevenSeg>
     894:	3a cd       	rjmp	.-1420   	; 0x30a <transmit_data>
		break;
     896:	08 95       	ret

		case Press_state6:
		PORTA = 0x01;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     89c:	80 91 00 01 	lds	r24, 0x0100
     8a0:	51 dd       	rcall	.-1374   	; 0x344 <simon_SevenSeg>
     8a2:	33 cd       	rjmp	.-1434   	; 0x30a <transmit_data>
		break;
     8a4:	08 95       	ret

		case Off2:
		PORTA = 0x00;
     8a6:	12 b8       	out	0x02, r1	; 2
		transmit_data(simon_SevenSeg(lives));
     8a8:	80 91 00 01 	lds	r24, 0x0100
     8ac:	4b dd       	rcall	.-1386   	; 0x344 <simon_SevenSeg>
     8ae:	2d dd       	rcall	.-1446   	; 0x30a <transmit_data>
		global_g = 4;
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	80 93 06 01 	sts	0x0106, r24
     8b6:	08 95       	ret

000008b8 <TickFct_Machine3>:
}

enum SM3_States {SM3_off, SM3_on1, SM3_on2, SM3_on3, SM3_on4, SM3_on5, SM3_on6, SM3_on7, SM3_on8, SM3_on9} SM3_State;
void TickFct_Machine3()
{
	switch(SM3_State)
     8b8:	20 91 0d 01 	lds	r18, 0x010D
     8bc:	82 2f       	mov	r24, r18
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	8a 30       	cpi	r24, 0x0A	; 10
     8c2:	91 05       	cpc	r25, r1
     8c4:	98 f5       	brcc	.+102    	; 0x92c <TickFct_Machine3+0x74>
     8c6:	fc 01       	movw	r30, r24
     8c8:	ed 59       	subi	r30, 0x9D	; 157
     8ca:	ff 4f       	sbci	r31, 0xFF	; 255
     8cc:	69 c6       	rjmp	.+3282   	; 0x15a0 <__tablejump2__>
	{
		case SM3_off:
		if(global_g == 4)
     8ce:	80 91 06 01 	lds	r24, 0x0106
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	a1 f5       	brne	.+104    	; 0x93e <TickFct_Machine3+0x86>
		{
			if(~PINB & 0x01)
     8d6:	18 99       	sbic	0x03, 0	; 3
     8d8:	32 c0       	rjmp	.+100    	; 0x93e <TickFct_Machine3+0x86>
			{
				while(~PINB & 0x01){}
     8da:	18 9b       	sbis	0x03, 0	; 3
     8dc:	fe cf       	rjmp	.-4      	; 0x8da <TickFct_Machine3+0x22>
				SM3_State = SM3_on1;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 0d 01 	sts	0x010D, r24
     8e4:	2e c0       	rjmp	.+92     	; 0x942 <TickFct_Machine3+0x8a>
				SM3_State = SM3_off;
			}	
		}
		break;
		case SM3_on1:
		SM3_State = SM3_on2;
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	80 93 0d 01 	sts	0x010D, r24
     8ec:	2d c0       	rjmp	.+90     	; 0x948 <TickFct_Machine3+0x90>
		break;
		case SM3_on2:
		SM3_State = SM3_on3;
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	80 93 0d 01 	sts	0x010D, r24
     8f4:	2c c0       	rjmp	.+88     	; 0x94e <TickFct_Machine3+0x96>
		break;
		case SM3_on3:
		SM3_State = SM3_on4;
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	80 93 0d 01 	sts	0x010D, r24
     8fc:	2b c0       	rjmp	.+86     	; 0x954 <TickFct_Machine3+0x9c>
		break;
		case SM3_on4:
		SM3_State = SM3_on5;
     8fe:	85 e0       	ldi	r24, 0x05	; 5
     900:	80 93 0d 01 	sts	0x010D, r24
     904:	2a c0       	rjmp	.+84     	; 0x95a <TickFct_Machine3+0xa2>
		break;
		case SM3_on5:
		SM3_State = SM3_on6;
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	80 93 0d 01 	sts	0x010D, r24
     90c:	29 c0       	rjmp	.+82     	; 0x960 <TickFct_Machine3+0xa8>
		break;
		case SM3_on6:
		SM3_State = SM3_on7;
     90e:	87 e0       	ldi	r24, 0x07	; 7
     910:	80 93 0d 01 	sts	0x010D, r24
     914:	28 c0       	rjmp	.+80     	; 0x966 <TickFct_Machine3+0xae>
		break;
		case SM3_on7:
		SM3_State = SM3_on8;
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	80 93 0d 01 	sts	0x010D, r24
     91c:	27 c0       	rjmp	.+78     	; 0x96c <TickFct_Machine3+0xb4>
		break;
		case SM3_on8:
		SM3_State = SM3_on9;
     91e:	89 e0       	ldi	r24, 0x09	; 9
     920:	80 93 0d 01 	sts	0x010D, r24
     924:	26 c0       	rjmp	.+76     	; 0x972 <TickFct_Machine3+0xba>
		break;
		case SM3_on9:
		SM3_State = SM3_off;
     926:	10 92 0d 01 	sts	0x010D, r1
     92a:	09 c0       	rjmp	.+18     	; 0x93e <TickFct_Machine3+0x86>
	}
	switch(SM3_State)
     92c:	82 2f       	mov	r24, r18
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	8a 30       	cpi	r24, 0x0A	; 10
     932:	91 05       	cpc	r25, r1
     934:	18 f5       	brcc	.+70     	; 0x97c <TickFct_Machine3+0xc4>
     936:	fc 01       	movw	r30, r24
     938:	e3 59       	subi	r30, 0x93	; 147
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	31 c6       	rjmp	.+3170   	; 0x15a0 <__tablejump2__>
	{
		case SM3_off:
		PORTA = 0x00;
     93e:	12 b8       	out	0x02, r1	; 2
		break;
     940:	08 95       	ret
		case SM3_on1:
		PORTA = 0x02;
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	82 b9       	out	0x02, r24	; 2
		break;
     946:	08 95       	ret
		case SM3_on2:
		PORTA = 0x04;
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	82 b9       	out	0x02, r24	; 2
		break;
     94c:	08 95       	ret
		case SM3_on3:
		PORTA = 0x01;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	82 b9       	out	0x02, r24	; 2
		break;
     952:	08 95       	ret
		case SM3_on4:
		PORTA = 0x08;
     954:	88 e0       	ldi	r24, 0x08	; 8
     956:	82 b9       	out	0x02, r24	; 2
		break;
     958:	08 95       	ret
		case SM3_on5:
		PORTA = 0x02;
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	82 b9       	out	0x02, r24	; 2
		break;
     95e:	08 95       	ret
		case SM3_on6:
		PORTA = 0x04;
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	82 b9       	out	0x02, r24	; 2
		break;
     964:	08 95       	ret
		case SM3_on7:
		PORTA = 0x01;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	82 b9       	out	0x02, r24	; 2
		break;
     96a:	08 95       	ret
		case SM3_on8:
		PORTA = 0x02;
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	82 b9       	out	0x02, r24	; 2
		break;
     970:	08 95       	ret
		case SM3_on9:
		PORTA = 0x08;
     972:	88 e0       	ldi	r24, 0x08	; 8
     974:	82 b9       	out	0x02, r24	; 2
		global_g = 5;
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	80 93 06 01 	sts	0x0106, r24
     97c:	08 95       	ret

0000097e <ButtonPress3>:
}

enum Press_third_level{Init3, Press3_state1, Press3_state2, Press3_state3, Press3_state4, Press3_state5, Press3_state6, Press3_state7, Press3_state8, Press3_state9, Error3, Off3} Press_third_level;
void ButtonPress3()
{
	switch(Press_third_level)
     97e:	80 91 13 01 	lds	r24, 0x0113
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	8b 30       	cpi	r24, 0x0B	; 11
     986:	91 05       	cpc	r25, r1
     988:	08 f0       	brcs	.+2      	; 0x98c <ButtonPress3+0xe>
     98a:	b1 c0       	rjmp	.+354    	; 0xaee <ButtonPress3+0x170>
     98c:	fc 01       	movw	r30, r24
     98e:	e9 58       	subi	r30, 0x89	; 137
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	06 c6       	rjmp	.+3084   	; 0x15a0 <__tablejump2__>
	{
		case Init3:
		if(global_g == 5)
     994:	80 91 06 01 	lds	r24, 0x0106
     998:	85 30       	cpi	r24, 0x05	; 5
     99a:	09 f0       	breq	.+2      	; 0x99e <ButtonPress3+0x20>
     99c:	d5 c0       	rjmp	.+426    	; 0xb48 <ButtonPress3+0x1ca>
		{
			PORTA = 0x00;
     99e:	12 b8       	out	0x02, r1	; 2
			if(~PINB & 0x02)
     9a0:	19 99       	sbic	0x03, 1	; 3
     9a2:	05 c0       	rjmp	.+10     	; 0x9ae <ButtonPress3+0x30>
			{
				while(~PINB & 0x02){}
     9a4:	19 9b       	sbis	0x03, 1	; 3
     9a6:	fe cf       	rjmp	.-4      	; 0x9a4 <ButtonPress3+0x26>
				Press_third_level = Press3_state1;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 13 01 	sts	0x0113, r24
			}
			if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     9ae:	18 9b       	sbis	0x03, 0	; 3
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <ButtonPress3+0x3c>
     9b2:	1a 9b       	sbis	0x03, 2	; 3
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <ButtonPress3+0x3c>
     9b6:	1b 99       	sbic	0x03, 3	; 3
     9b8:	9a c0       	rjmp	.+308    	; 0xaee <ButtonPress3+0x170>
			{
				Press_third_level = Error3;
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	80 93 13 01 	sts	0x0113, r24
     9c0:	a1 c0       	rjmp	.+322    	; 0xb04 <ButtonPress3+0x186>
			}
		}
		break;
		case Error3:
		if(~PINB & 0x02)
     9c2:	19 99       	sbic	0x03, 1	; 3
     9c4:	9f c0       	rjmp	.+318    	; 0xb04 <ButtonPress3+0x186>
		{
			while(~PINB & 0x02){}
     9c6:	19 9b       	sbis	0x03, 1	; 3
     9c8:	fe cf       	rjmp	.-4      	; 0x9c6 <ButtonPress3+0x48>
			Press_third_level = Press3_state1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 13 01 	sts	0x0113, r24
     9d0:	9c c0       	rjmp	.+312    	; 0xb0a <ButtonPress3+0x18c>
		}
		break;
		case Press3_state1:
		if(~PINB & 0x04)
     9d2:	1a 99       	sbic	0x03, 2	; 3
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <ButtonPress3+0x62>
		{
			
			while(~PINB & 0x04){}
     9d6:	1a 9b       	sbis	0x03, 2	; 3
     9d8:	fe cf       	rjmp	.-4      	; 0x9d6 <ButtonPress3+0x58>
			Press_third_level = Press3_state2;
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     9e0:	19 9b       	sbis	0x03, 1	; 3
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <ButtonPress3+0x6e>
     9e4:	18 9b       	sbis	0x03, 0	; 3
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <ButtonPress3+0x6e>
     9e8:	1b 99       	sbic	0x03, 3	; 3
     9ea:	81 c0       	rjmp	.+258    	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	80 93 13 01 	sts	0x0113, r24
     9f2:	88 c0       	rjmp	.+272    	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state2:
		if(~PINB & 0x01)
     9f4:	18 99       	sbic	0x03, 0	; 3
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <ButtonPress3+0x84>
		{
			while(~PINB & 0x01){}
     9f8:	18 9b       	sbis	0x03, 0	; 3
     9fa:	fe cf       	rjmp	.-4      	; 0x9f8 <ButtonPress3+0x7a>
			Press_third_level = Press3_state3;
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     a02:	19 9b       	sbis	0x03, 1	; 3
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <ButtonPress3+0x90>
     a06:	1a 9b       	sbis	0x03, 2	; 3
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <ButtonPress3+0x90>
     a0a:	1b 99       	sbic	0x03, 3	; 3
     a0c:	70 c0       	rjmp	.+224    	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     a0e:	8a e0       	ldi	r24, 0x0A	; 10
     a10:	80 93 13 01 	sts	0x0113, r24
     a14:	77 c0       	rjmp	.+238    	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state3:
		if(~PINB & 0x08)
     a16:	1b 99       	sbic	0x03, 3	; 3
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <ButtonPress3+0xa6>
		{
			while(~PINB & 0x08){}
     a1a:	1b 9b       	sbis	0x03, 3	; 3
     a1c:	fe cf       	rjmp	.-4      	; 0xa1a <ButtonPress3+0x9c>
			Press_third_level = Press3_state4;
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     a24:	19 9b       	sbis	0x03, 1	; 3
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <ButtonPress3+0xb2>
     a28:	1a 9b       	sbis	0x03, 2	; 3
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <ButtonPress3+0xb2>
     a2c:	18 99       	sbic	0x03, 0	; 3
     a2e:	5f c0       	rjmp	.+190    	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	80 93 13 01 	sts	0x0113, r24
     a36:	66 c0       	rjmp	.+204    	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state4:
		if(~PINB & 0x02)
     a38:	19 99       	sbic	0x03, 1	; 3
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <ButtonPress3+0xc8>
		{
			while(~PINB & 0x02){}
     a3c:	19 9b       	sbis	0x03, 1	; 3
     a3e:	fe cf       	rjmp	.-4      	; 0xa3c <ButtonPress3+0xbe>
			Press_third_level = Press3_state5;
     a40:	85 e0       	ldi	r24, 0x05	; 5
     a42:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     a46:	18 9b       	sbis	0x03, 0	; 3
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <ButtonPress3+0xd4>
     a4a:	1a 9b       	sbis	0x03, 2	; 3
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <ButtonPress3+0xd4>
     a4e:	1b 99       	sbic	0x03, 3	; 3
     a50:	4e c0       	rjmp	.+156    	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	80 93 13 01 	sts	0x0113, r24
     a58:	55 c0       	rjmp	.+170    	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state5:
		if(~PINB & 0x04)
     a5a:	1a 99       	sbic	0x03, 2	; 3
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <ButtonPress3+0xea>
		{
			
			while(~PINB & 0x04){}
     a5e:	1a 9b       	sbis	0x03, 2	; 3
     a60:	fe cf       	rjmp	.-4      	; 0xa5e <ButtonPress3+0xe0>
			Press_third_level = Press3_state6;
     a62:	86 e0       	ldi	r24, 0x06	; 6
     a64:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     a68:	19 9b       	sbis	0x03, 1	; 3
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <ButtonPress3+0xf6>
     a6c:	18 9b       	sbis	0x03, 0	; 3
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <ButtonPress3+0xf6>
     a70:	1b 99       	sbic	0x03, 3	; 3
     a72:	3d c0       	rjmp	.+122    	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     a74:	8a e0       	ldi	r24, 0x0A	; 10
     a76:	80 93 13 01 	sts	0x0113, r24
     a7a:	44 c0       	rjmp	.+136    	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state6:
		if(~PINB & 0x01)
     a7c:	18 99       	sbic	0x03, 0	; 3
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <ButtonPress3+0x10c>
		{
			while(~PINB & 0x01){}
     a80:	18 9b       	sbis	0x03, 0	; 3
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <ButtonPress3+0x102>
			Press_third_level = Press3_state7;
     a84:	87 e0       	ldi	r24, 0x07	; 7
     a86:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     a8a:	19 9b       	sbis	0x03, 1	; 3
     a8c:	04 c0       	rjmp	.+8      	; 0xa96 <ButtonPress3+0x118>
     a8e:	1a 9b       	sbis	0x03, 2	; 3
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <ButtonPress3+0x118>
     a92:	1b 99       	sbic	0x03, 3	; 3
     a94:	2c c0       	rjmp	.+88     	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     a96:	8a e0       	ldi	r24, 0x0A	; 10
     a98:	80 93 13 01 	sts	0x0113, r24
     a9c:	33 c0       	rjmp	.+102    	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state7:
		if(~PINB & 0x02)
     a9e:	19 99       	sbic	0x03, 1	; 3
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <ButtonPress3+0x12e>
		{
			while(~PINB & 0x02){}
     aa2:	19 9b       	sbis	0x03, 1	; 3
     aa4:	fe cf       	rjmp	.-4      	; 0xaa2 <ButtonPress3+0x124>
			Press_third_level = Press3_state8;
     aa6:	88 e0       	ldi	r24, 0x08	; 8
     aa8:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     aac:	18 9b       	sbis	0x03, 0	; 3
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <ButtonPress3+0x13a>
     ab0:	1a 9b       	sbis	0x03, 2	; 3
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <ButtonPress3+0x13a>
     ab4:	1b 99       	sbic	0x03, 3	; 3
     ab6:	1b c0       	rjmp	.+54     	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     ab8:	8a e0       	ldi	r24, 0x0A	; 10
     aba:	80 93 13 01 	sts	0x0113, r24
     abe:	22 c0       	rjmp	.+68     	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state8:
		if(~PINB & 0x08)
     ac0:	1b 99       	sbic	0x03, 3	; 3
     ac2:	05 c0       	rjmp	.+10     	; 0xace <ButtonPress3+0x150>
		{
			while(~PINB & 0x08){}
     ac4:	1b 9b       	sbis	0x03, 3	; 3
     ac6:	fe cf       	rjmp	.-4      	; 0xac4 <ButtonPress3+0x146>
			Press_third_level = Press3_state9;
     ac8:	89 e0       	ldi	r24, 0x09	; 9
     aca:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     ace:	19 9b       	sbis	0x03, 1	; 3
     ad0:	04 c0       	rjmp	.+8      	; 0xada <ButtonPress3+0x15c>
     ad2:	1a 9b       	sbis	0x03, 2	; 3
     ad4:	02 c0       	rjmp	.+4      	; 0xada <ButtonPress3+0x15c>
     ad6:	18 99       	sbic	0x03, 0	; 3
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <ButtonPress3+0x170>
		{
			Press_third_level = Error3;
     ada:	8a e0       	ldi	r24, 0x0A	; 10
     adc:	80 93 13 01 	sts	0x0113, r24
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <ButtonPress3+0x186>
		}
		break;
		case Press3_state9:
		if(~PINB & 0x10)
     ae2:	1c 99       	sbic	0x03, 4	; 3
     ae4:	2a c0       	rjmp	.+84     	; 0xb3a <ButtonPress3+0x1bc>
		{
			Press_third_level = Off3;
     ae6:	8b e0       	ldi	r24, 0x0B	; 11
     ae8:	80 93 13 01 	sts	0x0113, r24
     aec:	29 c0       	rjmp	.+82     	; 0xb40 <ButtonPress3+0x1c2>
		}
		break;
	}
	switch(Press_third_level)
     aee:	80 91 13 01 	lds	r24, 0x0113
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	fc 01       	movw	r30, r24
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	eb 30       	cpi	r30, 0x0B	; 11
     afa:	f1 05       	cpc	r31, r1
     afc:	28 f5       	brcc	.+74     	; 0xb48 <ButtonPress3+0x1ca>
     afe:	ee 57       	subi	r30, 0x7E	; 126
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	4e c5       	rjmp	.+2716   	; 0x15a0 <__tablejump2__>
	{
		case Error3:
		PORTA = 0x10;
     b04:	80 e1       	ldi	r24, 0x10	; 16
     b06:	82 b9       	out	0x02, r24	; 2
		break;
     b08:	08 95       	ret
		case Press3_state1:
		PORTA = 0x02;
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	82 b9       	out	0x02, r24	; 2
		break;
     b0e:	08 95       	ret
		case Press3_state2:
		PORTA = 0x04;
     b10:	84 e0       	ldi	r24, 0x04	; 4
     b12:	82 b9       	out	0x02, r24	; 2
		break;
     b14:	08 95       	ret
		case Press3_state3:
		PORTA = 0x01;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	82 b9       	out	0x02, r24	; 2
		break;
     b1a:	08 95       	ret
		case Press3_state4:
		PORTA = 0x08;
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	82 b9       	out	0x02, r24	; 2
		break;
     b20:	08 95       	ret
		case Press3_state5:
		PORTA = 0x02;
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	82 b9       	out	0x02, r24	; 2
		break;
     b26:	08 95       	ret
		case Press3_state6:
		PORTA = 0x04;
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	82 b9       	out	0x02, r24	; 2
		break;
     b2c:	08 95       	ret
		case Press3_state7:
		PORTA = 0x01;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	82 b9       	out	0x02, r24	; 2
		break;
     b32:	08 95       	ret
		case Press3_state8:
		PORTA = 0x02;
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	82 b9       	out	0x02, r24	; 2
		break;
     b38:	08 95       	ret
		case Press3_state9:
		PORTA = 0x08;
     b3a:	88 e0       	ldi	r24, 0x08	; 8
     b3c:	82 b9       	out	0x02, r24	; 2
		break;
     b3e:	08 95       	ret
		case Off3:
		PORTA = 0x00;
     b40:	12 b8       	out	0x02, r1	; 2
		global_g = 6;
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	80 93 06 01 	sts	0x0106, r24
     b48:	08 95       	ret

00000b4a <TickFct_Machine4>:
}

enum SM4_States {SM4_off, SM4_on1, SM4_on2, SM4_on3, SM4_on4, SM4_on5, SM4_on6, SM4_on7, SM4_on8, SM4_on9, SM4_on10, SM4_on11, SM4_on12} SM4_States;
void TickFct_Machine4()
{
	switch(SM4_States)
     b4a:	20 91 0e 01 	lds	r18, 0x010E
     b4e:	82 2f       	mov	r24, r18
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	8d 30       	cpi	r24, 0x0D	; 13
     b54:	91 05       	cpc	r25, r1
     b56:	08 f0       	brcs	.+2      	; 0xb5a <TickFct_Machine4+0x10>
     b58:	40 c0       	rjmp	.+128    	; 0xbda <TickFct_Machine4+0x90>
     b5a:	fc 01       	movw	r30, r24
     b5c:	e3 57       	subi	r30, 0x73	; 115
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	1f c5       	rjmp	.+2622   	; 0x15a0 <__tablejump2__>
	{
		case SM4_off:
		if(global_g == 6)
     b62:	80 91 06 01 	lds	r24, 0x0106
     b66:	86 30       	cpi	r24, 0x06	; 6
     b68:	09 f0       	breq	.+2      	; 0xb6c <TickFct_Machine4+0x22>
     b6a:	40 c0       	rjmp	.+128    	; 0xbec <TickFct_Machine4+0xa2>
		{
			if(~PINB & 0x01)
     b6c:	18 99       	sbic	0x03, 0	; 3
     b6e:	3e c0       	rjmp	.+124    	; 0xbec <TickFct_Machine4+0xa2>
			{
				while(~PINB & 0x01){}
     b70:	18 9b       	sbis	0x03, 0	; 3
     b72:	fe cf       	rjmp	.-4      	; 0xb70 <TickFct_Machine4+0x26>
				SM4_States = SM4_on1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 0e 01 	sts	0x010E, r24
     b7a:	3a c0       	rjmp	.+116    	; 0xbf0 <TickFct_Machine4+0xa6>
				SM4_States = SM4_off;
			}
		}
		break;
		case SM4_on1:
		SM4_States = SM4_on2;
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	80 93 0e 01 	sts	0x010E, r24
     b82:	39 c0       	rjmp	.+114    	; 0xbf6 <TickFct_Machine4+0xac>
		break;
		case SM4_on2:
		SM4_States = SM4_on3;
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	80 93 0e 01 	sts	0x010E, r24
     b8a:	38 c0       	rjmp	.+112    	; 0xbfc <TickFct_Machine4+0xb2>
		break;
		case SM4_on3:
		SM4_States = SM4_on4;
     b8c:	84 e0       	ldi	r24, 0x04	; 4
     b8e:	80 93 0e 01 	sts	0x010E, r24
     b92:	37 c0       	rjmp	.+110    	; 0xc02 <TickFct_Machine4+0xb8>
		break;
		case SM4_on4:
		SM4_States = SM4_on5;
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	80 93 0e 01 	sts	0x010E, r24
     b9a:	36 c0       	rjmp	.+108    	; 0xc08 <TickFct_Machine4+0xbe>
		break;
		case SM4_on5:
		SM4_States = SM4_on6;
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	80 93 0e 01 	sts	0x010E, r24
     ba2:	35 c0       	rjmp	.+106    	; 0xc0e <TickFct_Machine4+0xc4>
		break;
		case SM4_on6:
		SM4_States = SM4_on7;
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	80 93 0e 01 	sts	0x010E, r24
     baa:	34 c0       	rjmp	.+104    	; 0xc14 <TickFct_Machine4+0xca>
		break;
		case SM4_on7:
		SM4_States = SM4_on8;
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	80 93 0e 01 	sts	0x010E, r24
     bb2:	33 c0       	rjmp	.+102    	; 0xc1a <TickFct_Machine4+0xd0>
		break;
		case SM4_on8:
		SM4_States = SM4_on9;
     bb4:	89 e0       	ldi	r24, 0x09	; 9
     bb6:	80 93 0e 01 	sts	0x010E, r24
     bba:	32 c0       	rjmp	.+100    	; 0xc20 <TickFct_Machine4+0xd6>
		break;
		case SM4_on9:
		SM4_States = SM4_on10;
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	80 93 0e 01 	sts	0x010E, r24
     bc2:	31 c0       	rjmp	.+98     	; 0xc26 <TickFct_Machine4+0xdc>
		break;
		case SM4_on10:
		SM4_States = SM4_on11;
     bc4:	8b e0       	ldi	r24, 0x0B	; 11
     bc6:	80 93 0e 01 	sts	0x010E, r24
     bca:	30 c0       	rjmp	.+96     	; 0xc2c <TickFct_Machine4+0xe2>
		break;
		case SM4_on11:
		SM4_States = SM4_on12;
     bcc:	8c e0       	ldi	r24, 0x0C	; 12
     bce:	80 93 0e 01 	sts	0x010E, r24
     bd2:	2f c0       	rjmp	.+94     	; 0xc32 <TickFct_Machine4+0xe8>
		break;
		case SM4_on12:
		SM4_States = SM4_off;
     bd4:	10 92 0e 01 	sts	0x010E, r1
		break;
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <TickFct_Machine4+0xa2>
	}
	switch(SM4_States)
     bda:	82 2f       	mov	r24, r18
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	8d 30       	cpi	r24, 0x0D	; 13
     be0:	91 05       	cpc	r25, r1
     be2:	60 f5       	brcc	.+88     	; 0xc3c <TickFct_Machine4+0xf2>
     be4:	fc 01       	movw	r30, r24
     be6:	e6 56       	subi	r30, 0x66	; 102
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	da c4       	rjmp	.+2484   	; 0x15a0 <__tablejump2__>
	{
		case SM4_off:
		PORTA = 0x00;
     bec:	12 b8       	out	0x02, r1	; 2
		break;
     bee:	08 95       	ret
		case SM4_on1:
		PORTA = 0x01;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	82 b9       	out	0x02, r24	; 2
		break;
     bf4:	08 95       	ret
		case SM4_on2:
		PORTA = 0x08;
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	82 b9       	out	0x02, r24	; 2
		break;
     bfa:	08 95       	ret
		case SM4_on3:
		PORTA = 0x02;
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	82 b9       	out	0x02, r24	; 2
		break;
     c00:	08 95       	ret
		case SM4_on4:
		PORTA = 0x01;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	82 b9       	out	0x02, r24	; 2
		break;
     c06:	08 95       	ret
		case SM4_on5:
		PORTA = 0x02;
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	82 b9       	out	0x02, r24	; 2
		break;
     c0c:	08 95       	ret
		case SM4_on6:
		PORTA = 0x08;
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	82 b9       	out	0x02, r24	; 2
		break;
     c12:	08 95       	ret
		case SM4_on7:
		PORTA = 0x02;
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	82 b9       	out	0x02, r24	; 2
		break;
     c18:	08 95       	ret
		case SM4_on8:
		PORTA = 0x01;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	82 b9       	out	0x02, r24	; 2
		break;
     c1e:	08 95       	ret
		case SM4_on9:
		PORTA = 0x08;
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	82 b9       	out	0x02, r24	; 2
		break;
     c24:	08 95       	ret
		case SM4_on10:
		PORTA = 0x01;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	82 b9       	out	0x02, r24	; 2
		break;
     c2a:	08 95       	ret
		case SM4_on11:
		PORTA = 0x02;
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	82 b9       	out	0x02, r24	; 2
		break;
     c30:	08 95       	ret
		case SM4_on12:
		PORTA = 0x01;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	82 b9       	out	0x02, r24	; 2
		global_g = 7;
     c36:	87 e0       	ldi	r24, 0x07	; 7
     c38:	80 93 06 01 	sts	0x0106, r24
     c3c:	08 95       	ret

00000c3e <ButtonPress4>:
}

enum Press_fourth_level{Init4, Press4_state1, Press4_state2, Press4_state3, Press4_state4, Press4_state5, Press4_state6, Press4_state7, Press4_state8, Press4_state9, Press4_state10, Press4_state11, Press4_state12, Error4, Off4} Press_fourth_level;
void ButtonPress4()
{
	switch(Press_fourth_level)
     c3e:	80 91 10 01 	lds	r24, 0x0110
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	8e 30       	cpi	r24, 0x0E	; 14
     c46:	91 05       	cpc	r25, r1
     c48:	08 f0       	brcs	.+2      	; 0xc4c <ButtonPress4+0xe>
     c4a:	e4 c0       	rjmp	.+456    	; 0xe14 <ButtonPress4+0x1d6>
     c4c:	fc 01       	movw	r30, r24
     c4e:	e9 55       	subi	r30, 0x59	; 89
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	a6 c4       	rjmp	.+2380   	; 0x15a0 <__tablejump2__>
	{
		case Init4:
		if(global_g == 7)
     c54:	80 91 06 01 	lds	r24, 0x0106
     c58:	87 30       	cpi	r24, 0x07	; 7
     c5a:	09 f0       	breq	.+2      	; 0xc5e <ButtonPress4+0x20>
     c5c:	11 c1       	rjmp	.+546    	; 0xe80 <ButtonPress4+0x242>
		{
			PORTA = 0x00;
     c5e:	12 b8       	out	0x02, r1	; 2
			if(~PINB & 0x01)
     c60:	18 99       	sbic	0x03, 0	; 3
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <ButtonPress4+0x30>
			{
				while(~PINB & 0x01){}
     c64:	18 9b       	sbis	0x03, 0	; 3
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <ButtonPress4+0x26>
				Press_fourth_level = Press4_state1; 
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 10 01 	sts	0x0110, r24
			}
			if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     c6e:	19 9b       	sbis	0x03, 1	; 3
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <ButtonPress4+0x3c>
     c72:	1a 9b       	sbis	0x03, 2	; 3
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <ButtonPress4+0x3c>
     c76:	1b 99       	sbic	0x03, 3	; 3
     c78:	cd c0       	rjmp	.+410    	; 0xe14 <ButtonPress4+0x1d6>
			{
				Press_fourth_level = Error4;
     c7a:	8d e0       	ldi	r24, 0x0D	; 13
     c7c:	80 93 10 01 	sts	0x0110, r24
     c80:	d4 c0       	rjmp	.+424    	; 0xe2a <ButtonPress4+0x1ec>
			}
		}
		break;
		case Press4_state1:
		if(~PINB & 0x08)
     c82:	1b 99       	sbic	0x03, 3	; 3
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <ButtonPress4+0x52>
		{
			while(~PINB & 0x08){}
     c86:	1b 9b       	sbis	0x03, 3	; 3
     c88:	fe cf       	rjmp	.-4      	; 0xc86 <ButtonPress4+0x48>
			Press_fourth_level = Press4_state2;
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     c90:	19 9b       	sbis	0x03, 1	; 3
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <ButtonPress4+0x5e>
     c94:	1a 9b       	sbis	0x03, 2	; 3
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <ButtonPress4+0x5e>
     c98:	18 99       	sbic	0x03, 0	; 3
     c9a:	bc c0       	rjmp	.+376    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     c9c:	8d e0       	ldi	r24, 0x0D	; 13
     c9e:	80 93 10 01 	sts	0x0110, r24
     ca2:	c3 c0       	rjmp	.+390    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state2:
		if(~PINB & 0x02)
     ca4:	19 99       	sbic	0x03, 1	; 3
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <ButtonPress4+0x74>
		{
			while(~PINB & 0x02){}
     ca8:	19 9b       	sbis	0x03, 1	; 3
     caa:	fe cf       	rjmp	.-4      	; 0xca8 <ButtonPress4+0x6a>
			Press_fourth_level = Press4_state3;
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     cb2:	18 9b       	sbis	0x03, 0	; 3
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <ButtonPress4+0x80>
     cb6:	1a 9b       	sbis	0x03, 2	; 3
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <ButtonPress4+0x80>
     cba:	1b 99       	sbic	0x03, 3	; 3
     cbc:	ab c0       	rjmp	.+342    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     cbe:	8d e0       	ldi	r24, 0x0D	; 13
     cc0:	80 93 10 01 	sts	0x0110, r24
     cc4:	b2 c0       	rjmp	.+356    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state3:
		if(~PINB & 0x01)
     cc6:	18 99       	sbic	0x03, 0	; 3
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <ButtonPress4+0x96>
		{
			while(~PINB & 0x01){}
     cca:	18 9b       	sbis	0x03, 0	; 3
     ccc:	fe cf       	rjmp	.-4      	; 0xcca <ButtonPress4+0x8c>
			Press_fourth_level = Press4_state4;
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     cd4:	19 9b       	sbis	0x03, 1	; 3
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <ButtonPress4+0xa2>
     cd8:	1a 9b       	sbis	0x03, 2	; 3
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <ButtonPress4+0xa2>
     cdc:	1b 99       	sbic	0x03, 3	; 3
     cde:	9a c0       	rjmp	.+308    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     ce0:	8d e0       	ldi	r24, 0x0D	; 13
     ce2:	80 93 10 01 	sts	0x0110, r24
     ce6:	a1 c0       	rjmp	.+322    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state4:
		if(~PINB & 0x02)
     ce8:	19 99       	sbic	0x03, 1	; 3
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <ButtonPress4+0xb8>
		{
			while(~PINB & 0x02){}
     cec:	19 9b       	sbis	0x03, 1	; 3
     cee:	fe cf       	rjmp	.-4      	; 0xcec <ButtonPress4+0xae>
			Press_fourth_level = Press4_state5;
     cf0:	85 e0       	ldi	r24, 0x05	; 5
     cf2:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     cf6:	18 9b       	sbis	0x03, 0	; 3
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <ButtonPress4+0xc4>
     cfa:	1a 9b       	sbis	0x03, 2	; 3
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <ButtonPress4+0xc4>
     cfe:	1b 99       	sbic	0x03, 3	; 3
     d00:	89 c0       	rjmp	.+274    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     d02:	8d e0       	ldi	r24, 0x0D	; 13
     d04:	80 93 10 01 	sts	0x0110, r24
     d08:	90 c0       	rjmp	.+288    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state5:
		if(~PINB & 0x08)
     d0a:	1b 99       	sbic	0x03, 3	; 3
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <ButtonPress4+0xda>
		{
			while(~PINB & 0x08){}
     d0e:	1b 9b       	sbis	0x03, 3	; 3
     d10:	fe cf       	rjmp	.-4      	; 0xd0e <ButtonPress4+0xd0>
			Press_fourth_level = Press4_state6;
     d12:	86 e0       	ldi	r24, 0x06	; 6
     d14:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     d18:	19 9b       	sbis	0x03, 1	; 3
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <ButtonPress4+0xe6>
     d1c:	1a 9b       	sbis	0x03, 2	; 3
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <ButtonPress4+0xe6>
     d20:	18 99       	sbic	0x03, 0	; 3
     d22:	78 c0       	rjmp	.+240    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     d24:	8d e0       	ldi	r24, 0x0D	; 13
     d26:	80 93 10 01 	sts	0x0110, r24
     d2a:	7f c0       	rjmp	.+254    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state6:
		if(~PINB & 0x02)
     d2c:	19 99       	sbic	0x03, 1	; 3
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <ButtonPress4+0xfc>
		{
			while(~PINB & 0x02){}
     d30:	19 9b       	sbis	0x03, 1	; 3
     d32:	fe cf       	rjmp	.-4      	; 0xd30 <ButtonPress4+0xf2>
			Press_fourth_level = Press4_state7;
     d34:	87 e0       	ldi	r24, 0x07	; 7
     d36:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     d3a:	18 9b       	sbis	0x03, 0	; 3
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <ButtonPress4+0x108>
     d3e:	1a 9b       	sbis	0x03, 2	; 3
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <ButtonPress4+0x108>
     d42:	1b 99       	sbic	0x03, 3	; 3
     d44:	67 c0       	rjmp	.+206    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     d46:	8d e0       	ldi	r24, 0x0D	; 13
     d48:	80 93 10 01 	sts	0x0110, r24
     d4c:	6e c0       	rjmp	.+220    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state7:
		if(~PINB & 0x01)
     d4e:	18 99       	sbic	0x03, 0	; 3
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <ButtonPress4+0x11e>
		{
			while(~PINB & 0x01){}
     d52:	18 9b       	sbis	0x03, 0	; 3
     d54:	fe cf       	rjmp	.-4      	; 0xd52 <ButtonPress4+0x114>
			Press_fourth_level = Press4_state8;
     d56:	88 e0       	ldi	r24, 0x08	; 8
     d58:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     d5c:	19 9b       	sbis	0x03, 1	; 3
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <ButtonPress4+0x12a>
     d60:	1a 9b       	sbis	0x03, 2	; 3
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <ButtonPress4+0x12a>
     d64:	1b 99       	sbic	0x03, 3	; 3
     d66:	56 c0       	rjmp	.+172    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     d68:	8d e0       	ldi	r24, 0x0D	; 13
     d6a:	80 93 10 01 	sts	0x0110, r24
     d6e:	5d c0       	rjmp	.+186    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state8:
		if(~PINB & 0x08)
     d70:	1b 99       	sbic	0x03, 3	; 3
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <ButtonPress4+0x140>
		{
			while(~PINB & 0x08){}
     d74:	1b 9b       	sbis	0x03, 3	; 3
     d76:	fe cf       	rjmp	.-4      	; 0xd74 <ButtonPress4+0x136>
			Press_fourth_level = Press4_state9;
     d78:	89 e0       	ldi	r24, 0x09	; 9
     d7a:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     d7e:	19 9b       	sbis	0x03, 1	; 3
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <ButtonPress4+0x14c>
     d82:	1a 9b       	sbis	0x03, 2	; 3
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <ButtonPress4+0x14c>
     d86:	18 99       	sbic	0x03, 0	; 3
     d88:	45 c0       	rjmp	.+138    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     d8a:	8d e0       	ldi	r24, 0x0D	; 13
     d8c:	80 93 10 01 	sts	0x0110, r24
     d90:	4c c0       	rjmp	.+152    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state9:
		if(~PINB & 0x01)
     d92:	18 99       	sbic	0x03, 0	; 3
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <ButtonPress4+0x162>
		{
			while(~PINB & 0x01){}
     d96:	18 9b       	sbis	0x03, 0	; 3
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <ButtonPress4+0x158>
			Press_fourth_level = Press4_state10;
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
     d9c:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     da0:	19 9b       	sbis	0x03, 1	; 3
     da2:	04 c0       	rjmp	.+8      	; 0xdac <ButtonPress4+0x16e>
     da4:	1a 9b       	sbis	0x03, 2	; 3
     da6:	02 c0       	rjmp	.+4      	; 0xdac <ButtonPress4+0x16e>
     da8:	1b 99       	sbic	0x03, 3	; 3
     daa:	34 c0       	rjmp	.+104    	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     dac:	8d e0       	ldi	r24, 0x0D	; 13
     dae:	80 93 10 01 	sts	0x0110, r24
     db2:	3b c0       	rjmp	.+118    	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state10:
		if(~PINB & 0x02)
     db4:	19 99       	sbic	0x03, 1	; 3
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <ButtonPress4+0x184>
		{
			while(~PINB & 0x02){}
     db8:	19 9b       	sbis	0x03, 1	; 3
     dba:	fe cf       	rjmp	.-4      	; 0xdb8 <ButtonPress4+0x17a>
			Press_fourth_level = Press4_state11;
     dbc:	8b e0       	ldi	r24, 0x0B	; 11
     dbe:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     dc2:	18 9b       	sbis	0x03, 0	; 3
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <ButtonPress4+0x190>
     dc6:	1a 9b       	sbis	0x03, 2	; 3
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <ButtonPress4+0x190>
     dca:	1b 99       	sbic	0x03, 3	; 3
     dcc:	23 c0       	rjmp	.+70     	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     dce:	8d e0       	ldi	r24, 0x0D	; 13
     dd0:	80 93 10 01 	sts	0x0110, r24
     dd4:	2a c0       	rjmp	.+84     	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		
		case Press4_state11:
		if(~PINB & 0x01)
     dd6:	18 99       	sbic	0x03, 0	; 3
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <ButtonPress4+0x1a6>
		{
			while(~PINB & 0x01){}
     dda:	18 9b       	sbis	0x03, 0	; 3
     ddc:	fe cf       	rjmp	.-4      	; 0xdda <ButtonPress4+0x19c>
			Press_fourth_level = Press4_state12;
     dde:	8c e0       	ldi	r24, 0x0C	; 12
     de0:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     de4:	19 9b       	sbis	0x03, 1	; 3
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <ButtonPress4+0x1b2>
     de8:	1a 9b       	sbis	0x03, 2	; 3
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <ButtonPress4+0x1b2>
     dec:	1b 99       	sbic	0x03, 3	; 3
     dee:	12 c0       	rjmp	.+36     	; 0xe14 <ButtonPress4+0x1d6>
		{
			Press_fourth_level = Error4;
     df0:	8d e0       	ldi	r24, 0x0D	; 13
     df2:	80 93 10 01 	sts	0x0110, r24
     df6:	19 c0       	rjmp	.+50     	; 0xe2a <ButtonPress4+0x1ec>
		}
		break;
		case Press4_state12:
		if(~PINB & 0x10)
     df8:	1c 99       	sbic	0x03, 4	; 3
     dfa:	3b c0       	rjmp	.+118    	; 0xe72 <ButtonPress4+0x234>
		{
			Press_fourth_level = Off4;
     dfc:	8e e0       	ldi	r24, 0x0E	; 14
     dfe:	80 93 10 01 	sts	0x0110, r24
     e02:	3a c0       	rjmp	.+116    	; 0xe78 <ButtonPress4+0x23a>
		}
		break;
		case Error4:
		if(~PINB & 0x01)
     e04:	18 99       	sbic	0x03, 0	; 3
     e06:	11 c0       	rjmp	.+34     	; 0xe2a <ButtonPress4+0x1ec>
		{
			while(~PINB & 0x01){}
     e08:	18 9b       	sbis	0x03, 0	; 3
     e0a:	fe cf       	rjmp	.-4      	; 0xe08 <ButtonPress4+0x1ca>
			Press_fourth_level = Press4_state1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 10 01 	sts	0x0110, r24
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <ButtonPress4+0x1f2>
		}
	}
	switch(Press_fourth_level)
     e14:	80 91 10 01 	lds	r24, 0x0110
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	fc 01       	movw	r30, r24
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	ee 30       	cpi	r30, 0x0E	; 14
     e20:	f1 05       	cpc	r31, r1
     e22:	70 f5       	brcc	.+92     	; 0xe80 <ButtonPress4+0x242>
     e24:	eb 54       	subi	r30, 0x4B	; 75
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	bb c3       	rjmp	.+1910   	; 0x15a0 <__tablejump2__>
	{
		case Error4:
		PORTA = 0x10;
     e2a:	80 e1       	ldi	r24, 0x10	; 16
     e2c:	82 b9       	out	0x02, r24	; 2
		break;
     e2e:	08 95       	ret
		case Press4_state1:
		PORTA = 0x01;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	82 b9       	out	0x02, r24	; 2
		break;
     e34:	08 95       	ret
		case Press4_state2:
		PORTA = 0x08;
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	82 b9       	out	0x02, r24	; 2
		break;
     e3a:	08 95       	ret
		case Press4_state3:
		PORTA = 0x02;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	82 b9       	out	0x02, r24	; 2
		break;
     e40:	08 95       	ret
		case Press4_state4:
		PORTA = 0x01;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	82 b9       	out	0x02, r24	; 2
		break;
     e46:	08 95       	ret
		case Press4_state5:
		PORTA = 0x02;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	82 b9       	out	0x02, r24	; 2
		break;
     e4c:	08 95       	ret
		case Press4_state6:
		PORTA = 0x08;
     e4e:	88 e0       	ldi	r24, 0x08	; 8
     e50:	82 b9       	out	0x02, r24	; 2
		break;
     e52:	08 95       	ret
		case Press4_state7:
		PORTA = 0x02;
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	82 b9       	out	0x02, r24	; 2
		break;
     e58:	08 95       	ret
		case Press4_state8:
		PORTA = 0x01;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	82 b9       	out	0x02, r24	; 2
		break;
     e5e:	08 95       	ret
		case Press4_state9:
		PORTA = 0x08;
     e60:	88 e0       	ldi	r24, 0x08	; 8
     e62:	82 b9       	out	0x02, r24	; 2
		break;
     e64:	08 95       	ret
		case Press4_state10:
		PORTA = 0x01;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	82 b9       	out	0x02, r24	; 2
		break;
     e6a:	08 95       	ret
		case Press4_state11:
		PORTA = 0x02;
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	82 b9       	out	0x02, r24	; 2
		break;
     e70:	08 95       	ret
		case Press4_state12:
		PORTA = 0x01;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	82 b9       	out	0x02, r24	; 2
		break;
     e76:	08 95       	ret
		case Off4:
		PORTA = 0x00;
     e78:	12 b8       	out	0x02, r1	; 2
		global_g = 8;
     e7a:	88 e0       	ldi	r24, 0x08	; 8
     e7c:	80 93 06 01 	sts	0x0106, r24
     e80:	08 95       	ret

00000e82 <TickFct_Machine5>:
}	

enum SM5_States{SM5_off, SM5_on1, SM5_on2, SM5_on3, SM5_on4, SM5_on5, SM5_on6, SM5_on7, SM5_on8, SM5_on9, SM5_on10, SM5_on11, SM5_on12, SM5_on13, SM5_on14, SM5_on15} SM5_States;
void TickFct_Machine5()
{
	switch(SM5_States)
     e82:	20 91 14 01 	lds	r18, 0x0114
     e86:	82 2f       	mov	r24, r18
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	80 31       	cpi	r24, 0x10	; 16
     e8c:	91 05       	cpc	r25, r1
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <TickFct_Machine5+0x10>
     e90:	4c c0       	rjmp	.+152    	; 0xf2a <TickFct_Machine5+0xa8>
     e92:	fc 01       	movw	r30, r24
     e94:	ed 53       	subi	r30, 0x3D	; 61
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	83 c3       	rjmp	.+1798   	; 0x15a0 <__tablejump2__>
	{
		case SM5_off:
		
		if(global_g == 8)
     e9a:	80 91 06 01 	lds	r24, 0x0106
     e9e:	88 30       	cpi	r24, 0x08	; 8
     ea0:	09 f0       	breq	.+2      	; 0xea4 <TickFct_Machine5+0x22>
     ea2:	4c c0       	rjmp	.+152    	; 0xf3c <TickFct_Machine5+0xba>
		{
			if(~PINB & 0x01)
     ea4:	18 99       	sbic	0x03, 0	; 3
     ea6:	4a c0       	rjmp	.+148    	; 0xf3c <TickFct_Machine5+0xba>
			{
				while(~PINB & 0x01){}
     ea8:	18 9b       	sbis	0x03, 0	; 3
     eaa:	fe cf       	rjmp	.-4      	; 0xea8 <TickFct_Machine5+0x26>
				SM5_States = SM5_on1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 14 01 	sts	0x0114, r24
     eb2:	46 c0       	rjmp	.+140    	; 0xf40 <TickFct_Machine5+0xbe>
				SM5_States = SM5_off;
			}
		}
		break;
		case SM5_on1:
		SM5_States = SM5_on2;
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	80 93 14 01 	sts	0x0114, r24
     eba:	45 c0       	rjmp	.+138    	; 0xf46 <TickFct_Machine5+0xc4>
		break;
		case SM5_on2:
		SM5_States = SM5_on3;
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	80 93 14 01 	sts	0x0114, r24
     ec2:	44 c0       	rjmp	.+136    	; 0xf4c <TickFct_Machine5+0xca>
		break;
		case SM5_on3:
		SM5_States = SM5_on4;
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	80 93 14 01 	sts	0x0114, r24
     eca:	43 c0       	rjmp	.+134    	; 0xf52 <TickFct_Machine5+0xd0>
		break;
		case SM5_on4:
		SM5_States = SM5_on5;
     ecc:	85 e0       	ldi	r24, 0x05	; 5
     ece:	80 93 14 01 	sts	0x0114, r24
     ed2:	42 c0       	rjmp	.+132    	; 0xf58 <TickFct_Machine5+0xd6>
		break;
		case SM5_on5:
		SM5_States = SM5_on6;
     ed4:	86 e0       	ldi	r24, 0x06	; 6
     ed6:	80 93 14 01 	sts	0x0114, r24
     eda:	41 c0       	rjmp	.+130    	; 0xf5e <TickFct_Machine5+0xdc>
		break;
		case SM5_on6:
		SM5_States = SM5_on7;
     edc:	87 e0       	ldi	r24, 0x07	; 7
     ede:	80 93 14 01 	sts	0x0114, r24
     ee2:	40 c0       	rjmp	.+128    	; 0xf64 <TickFct_Machine5+0xe2>
		break;
		case SM5_on7:
		SM5_States = SM5_on8;
     ee4:	88 e0       	ldi	r24, 0x08	; 8
     ee6:	80 93 14 01 	sts	0x0114, r24
     eea:	3f c0       	rjmp	.+126    	; 0xf6a <TickFct_Machine5+0xe8>
		break;
		case SM5_on8:
		SM5_States = SM5_on9;
     eec:	89 e0       	ldi	r24, 0x09	; 9
     eee:	80 93 14 01 	sts	0x0114, r24
     ef2:	3e c0       	rjmp	.+124    	; 0xf70 <TickFct_Machine5+0xee>
		break;
		case SM5_on9:
		SM5_States = SM5_on10;
     ef4:	8a e0       	ldi	r24, 0x0A	; 10
     ef6:	80 93 14 01 	sts	0x0114, r24
     efa:	3d c0       	rjmp	.+122    	; 0xf76 <TickFct_Machine5+0xf4>
		break;
		case SM5_on10:
		SM5_States = SM5_on11;
     efc:	8b e0       	ldi	r24, 0x0B	; 11
     efe:	80 93 14 01 	sts	0x0114, r24
     f02:	3c c0       	rjmp	.+120    	; 0xf7c <TickFct_Machine5+0xfa>
		break;
		case SM5_on11:
		SM5_States = SM5_on12;
     f04:	8c e0       	ldi	r24, 0x0C	; 12
     f06:	80 93 14 01 	sts	0x0114, r24
     f0a:	3b c0       	rjmp	.+118    	; 0xf82 <TickFct_Machine5+0x100>
		break;
		case SM5_on12:
		SM5_States = SM5_on13;
     f0c:	8d e0       	ldi	r24, 0x0D	; 13
     f0e:	80 93 14 01 	sts	0x0114, r24
     f12:	3a c0       	rjmp	.+116    	; 0xf88 <TickFct_Machine5+0x106>
		break;
		case SM5_on13:
		SM5_States = SM5_on14;
     f14:	8e e0       	ldi	r24, 0x0E	; 14
     f16:	80 93 14 01 	sts	0x0114, r24
     f1a:	39 c0       	rjmp	.+114    	; 0xf8e <TickFct_Machine5+0x10c>
		break;
		case SM5_on14:
		SM5_States = SM5_on15;
     f1c:	8f e0       	ldi	r24, 0x0F	; 15
     f1e:	80 93 14 01 	sts	0x0114, r24
     f22:	38 c0       	rjmp	.+112    	; 0xf94 <TickFct_Machine5+0x112>
		break;
		case SM5_on15:
		SM5_States = SM5_off;
     f24:	10 92 14 01 	sts	0x0114, r1
		break;
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <TickFct_Machine5+0xba>
	}
	switch(SM5_States)
     f2a:	82 2f       	mov	r24, r18
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	80 31       	cpi	r24, 0x10	; 16
     f30:	91 05       	cpc	r25, r1
     f32:	a8 f5       	brcc	.+106    	; 0xf9e <TickFct_Machine5+0x11c>
     f34:	fc 01       	movw	r30, r24
     f36:	ed 52       	subi	r30, 0x2D	; 45
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	32 c3       	rjmp	.+1636   	; 0x15a0 <__tablejump2__>
	{
		case SM5_off:
		PORTA = 0x00;
     f3c:	12 b8       	out	0x02, r1	; 2
		break;
     f3e:	08 95       	ret
		case SM5_on1:
		PORTA = 0x08;
     f40:	88 e0       	ldi	r24, 0x08	; 8
     f42:	82 b9       	out	0x02, r24	; 2
		break;
     f44:	08 95       	ret
		case SM5_on2:
		PORTA = 0x04;
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	82 b9       	out	0x02, r24	; 2
		break;
     f4a:	08 95       	ret
		case SM5_on3:
		PORTA = 0x02;
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	82 b9       	out	0x02, r24	; 2
		break;
     f50:	08 95       	ret
		case SM5_on4:
		PORTA = 0x01;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	82 b9       	out	0x02, r24	; 2
		break;
     f56:	08 95       	ret
		case SM5_on5:
		PORTA = 0x02;
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	82 b9       	out	0x02, r24	; 2
		break;
     f5c:	08 95       	ret
		case SM5_on6:
		PORTA = 0x01;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	82 b9       	out	0x02, r24	; 2
		break;
     f62:	08 95       	ret
		case SM5_on7:
		PORTA = 0x04;
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	82 b9       	out	0x02, r24	; 2
		break;
     f68:	08 95       	ret
		case SM5_on8:
		PORTA = 0x08;
     f6a:	88 e0       	ldi	r24, 0x08	; 8
     f6c:	82 b9       	out	0x02, r24	; 2
		break;
     f6e:	08 95       	ret
		case SM5_on9:
		PORTA = 0x02;
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	82 b9       	out	0x02, r24	; 2
		break;
     f74:	08 95       	ret
		case SM5_on10:
		PORTA = 0x01;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	82 b9       	out	0x02, r24	; 2
		break;
     f7a:	08 95       	ret
		case SM5_on11:
		PORTA = 0x02;
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	82 b9       	out	0x02, r24	; 2
		break;
     f80:	08 95       	ret
		case SM5_on12:
		PORTA = 0x01;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	82 b9       	out	0x02, r24	; 2
		break;
     f86:	08 95       	ret
		case SM5_on13:
		PORTA = 0x04;
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	82 b9       	out	0x02, r24	; 2
		break;
     f8c:	08 95       	ret
		case SM5_on14:
		PORTA = 0x08;
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	82 b9       	out	0x02, r24	; 2
		break;
     f92:	08 95       	ret
		case SM5_on15:
		PORTA = 0x01;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	82 b9       	out	0x02, r24	; 2
		global_g = 9;
     f98:	89 e0       	ldi	r24, 0x09	; 9
     f9a:	80 93 06 01 	sts	0x0106, r24
     f9e:	08 95       	ret

00000fa0 <ButtonPress5>:
}

enum Press_fifth_level{Init5, Press5_state1, Press5_state2, Press5_state3, Press5_state4, Press5_state5, Press5_state6, Press5_state7, Press5_state8, Press5_state9, Press5_state10, Press5_state11, Press5_state12, Press5_state13, Press5_state14, Press5_state15, Error5, Off5} Press_fifth_level;
void ButtonPress5()
{
	switch(Press_fifth_level)
     fa0:	80 91 15 01 	lds	r24, 0x0115
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	81 31       	cpi	r24, 0x11	; 17
     fa8:	91 05       	cpc	r25, r1
     faa:	08 f0       	brcs	.+2      	; 0xfae <ButtonPress5+0xe>
     fac:	17 c1       	rjmp	.+558    	; 0x11dc <ButtonPress5+0x23c>
     fae:	fc 01       	movw	r30, r24
     fb0:	ed 51       	subi	r30, 0x1D	; 29
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	f5 c2       	rjmp	.+1514   	; 0x15a0 <__tablejump2__>
	{
		case Init5:
		if(global_g == 9)
     fb6:	80 91 06 01 	lds	r24, 0x0106
     fba:	89 30       	cpi	r24, 0x09	; 9
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <ButtonPress5+0x20>
     fbe:	4a c1       	rjmp	.+660    	; 0x1254 <ButtonPress5+0x2b4>
		{
			PORTA = 0x00;
     fc0:	12 b8       	out	0x02, r1	; 2
			if(~PINB & 0x08)
     fc2:	1b 99       	sbic	0x03, 3	; 3
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <ButtonPress5+0x30>
			{
				while(~PINB & 0x08){}
     fc6:	1b 9b       	sbis	0x03, 3	; 3
     fc8:	fe cf       	rjmp	.-4      	; 0xfc6 <ButtonPress5+0x26>
				Press_fifth_level = Press5_state1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 15 01 	sts	0x0115, r24
			}
			if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     fd0:	19 9b       	sbis	0x03, 1	; 3
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <ButtonPress5+0x3c>
     fd4:	1a 9b       	sbis	0x03, 2	; 3
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <ButtonPress5+0x3c>
     fd8:	18 99       	sbic	0x03, 0	; 3
     fda:	00 c1       	rjmp	.+512    	; 0x11dc <ButtonPress5+0x23c>
			{
				Press_fifth_level = Error5;
     fdc:	80 e1       	ldi	r24, 0x10	; 16
     fde:	80 93 15 01 	sts	0x0115, r24
     fe2:	07 c1       	rjmp	.+526    	; 0x11f2 <ButtonPress5+0x252>
			}
		}
		break;
		case Press5_state1:
		if(~PINB & 0x04)
     fe4:	1a 99       	sbic	0x03, 2	; 3
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <ButtonPress5+0x52>
		{
			while(~PINB & 0x04){}
     fe8:	1a 9b       	sbis	0x03, 2	; 3
     fea:	fe cf       	rjmp	.-4      	; 0xfe8 <ButtonPress5+0x48>
			Press_fifth_level = Press5_state2;
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     ff2:	19 9b       	sbis	0x03, 1	; 3
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <ButtonPress5+0x5e>
     ff6:	18 9b       	sbis	0x03, 0	; 3
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <ButtonPress5+0x5e>
     ffa:	1b 99       	sbic	0x03, 3	; 3
     ffc:	ef c0       	rjmp	.+478    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
     ffe:	80 e1       	ldi	r24, 0x10	; 16
    1000:	80 93 15 01 	sts	0x0115, r24
    1004:	f6 c0       	rjmp	.+492    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state2:
		if(~PINB & 0x02)
    1006:	19 99       	sbic	0x03, 1	; 3
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <ButtonPress5+0x74>
		{
			while(~PINB & 0x02){}
    100a:	19 9b       	sbis	0x03, 1	; 3
    100c:	fe cf       	rjmp	.-4      	; 0x100a <ButtonPress5+0x6a>
			Press_fifth_level = Press5_state3;
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    1014:	18 9b       	sbis	0x03, 0	; 3
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <ButtonPress5+0x80>
    1018:	1a 9b       	sbis	0x03, 2	; 3
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <ButtonPress5+0x80>
    101c:	1b 99       	sbic	0x03, 3	; 3
    101e:	de c0       	rjmp	.+444    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1020:	80 e1       	ldi	r24, 0x10	; 16
    1022:	80 93 15 01 	sts	0x0115, r24
    1026:	e5 c0       	rjmp	.+458    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state3:
		if(~PINB & 0x01)
    1028:	18 99       	sbic	0x03, 0	; 3
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <ButtonPress5+0x96>
		{
			while(~PINB & 0x01){}
    102c:	18 9b       	sbis	0x03, 0	; 3
    102e:	fe cf       	rjmp	.-4      	; 0x102c <ButtonPress5+0x8c>
			Press_fifth_level = Press5_state4;
    1030:	84 e0       	ldi	r24, 0x04	; 4
    1032:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    1036:	19 9b       	sbis	0x03, 1	; 3
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <ButtonPress5+0xa2>
    103a:	1a 9b       	sbis	0x03, 2	; 3
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <ButtonPress5+0xa2>
    103e:	1b 99       	sbic	0x03, 3	; 3
    1040:	cd c0       	rjmp	.+410    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1042:	80 e1       	ldi	r24, 0x10	; 16
    1044:	80 93 15 01 	sts	0x0115, r24
    1048:	d4 c0       	rjmp	.+424    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state4:
		if(~PINB & 0x02)
    104a:	19 99       	sbic	0x03, 1	; 3
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <ButtonPress5+0xb8>
		{
			while(~PINB & 0x02){}
    104e:	19 9b       	sbis	0x03, 1	; 3
    1050:	fe cf       	rjmp	.-4      	; 0x104e <ButtonPress5+0xae>
			Press_fifth_level = Press5_state5;
    1052:	85 e0       	ldi	r24, 0x05	; 5
    1054:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    1058:	18 9b       	sbis	0x03, 0	; 3
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <ButtonPress5+0xc4>
    105c:	1a 9b       	sbis	0x03, 2	; 3
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <ButtonPress5+0xc4>
    1060:	1b 99       	sbic	0x03, 3	; 3
    1062:	bc c0       	rjmp	.+376    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1064:	80 e1       	ldi	r24, 0x10	; 16
    1066:	80 93 15 01 	sts	0x0115, r24
    106a:	c3 c0       	rjmp	.+390    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state5:
		if(~PINB & 0x01)
    106c:	18 99       	sbic	0x03, 0	; 3
    106e:	05 c0       	rjmp	.+10     	; 0x107a <ButtonPress5+0xda>
		{
			while(~PINB & 0x01){}
    1070:	18 9b       	sbis	0x03, 0	; 3
    1072:	fe cf       	rjmp	.-4      	; 0x1070 <ButtonPress5+0xd0>
			Press_fifth_level = Press5_state6;
    1074:	86 e0       	ldi	r24, 0x06	; 6
    1076:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    107a:	19 9b       	sbis	0x03, 1	; 3
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <ButtonPress5+0xe6>
    107e:	1a 9b       	sbis	0x03, 2	; 3
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <ButtonPress5+0xe6>
    1082:	1b 99       	sbic	0x03, 3	; 3
    1084:	ab c0       	rjmp	.+342    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1086:	80 e1       	ldi	r24, 0x10	; 16
    1088:	80 93 15 01 	sts	0x0115, r24
    108c:	b2 c0       	rjmp	.+356    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state6:
		if(~PINB & 0x04)
    108e:	1a 99       	sbic	0x03, 2	; 3
    1090:	05 c0       	rjmp	.+10     	; 0x109c <ButtonPress5+0xfc>
		{
			
			while(~PINB & 0x04){}
    1092:	1a 9b       	sbis	0x03, 2	; 3
    1094:	fe cf       	rjmp	.-4      	; 0x1092 <ButtonPress5+0xf2>
			Press_fifth_level = Press5_state7;
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
    109c:	19 9b       	sbis	0x03, 1	; 3
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <ButtonPress5+0x108>
    10a0:	18 9b       	sbis	0x03, 0	; 3
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <ButtonPress5+0x108>
    10a4:	1b 99       	sbic	0x03, 3	; 3
    10a6:	9a c0       	rjmp	.+308    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	80 93 15 01 	sts	0x0115, r24
    10ae:	a1 c0       	rjmp	.+322    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state7:
		if(~PINB & 0x08)
    10b0:	1b 99       	sbic	0x03, 3	; 3
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <ButtonPress5+0x11e>
		{
			while(~PINB & 0x08){}
    10b4:	1b 9b       	sbis	0x03, 3	; 3
    10b6:	fe cf       	rjmp	.-4      	; 0x10b4 <ButtonPress5+0x114>
			Press_fifth_level = Press5_state8;
    10b8:	88 e0       	ldi	r24, 0x08	; 8
    10ba:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
    10be:	19 9b       	sbis	0x03, 1	; 3
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <ButtonPress5+0x12a>
    10c2:	1a 9b       	sbis	0x03, 2	; 3
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <ButtonPress5+0x12a>
    10c6:	18 99       	sbic	0x03, 0	; 3
    10c8:	89 c0       	rjmp	.+274    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    10ca:	80 e1       	ldi	r24, 0x10	; 16
    10cc:	80 93 15 01 	sts	0x0115, r24
    10d0:	90 c0       	rjmp	.+288    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state8:
		if(~PINB & 0x02)
    10d2:	19 99       	sbic	0x03, 1	; 3
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <ButtonPress5+0x140>
		{
			while(~PINB & 0x02){}
    10d6:	19 9b       	sbis	0x03, 1	; 3
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <ButtonPress5+0x136>
			Press_fifth_level = Press5_state9;
    10da:	89 e0       	ldi	r24, 0x09	; 9
    10dc:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    10e0:	18 9b       	sbis	0x03, 0	; 3
    10e2:	04 c0       	rjmp	.+8      	; 0x10ec <ButtonPress5+0x14c>
    10e4:	1a 9b       	sbis	0x03, 2	; 3
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <ButtonPress5+0x14c>
    10e8:	1b 99       	sbic	0x03, 3	; 3
    10ea:	78 c0       	rjmp	.+240    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    10ec:	80 e1       	ldi	r24, 0x10	; 16
    10ee:	80 93 15 01 	sts	0x0115, r24
    10f2:	7f c0       	rjmp	.+254    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state9:
		if(~PINB & 0x01)
    10f4:	18 99       	sbic	0x03, 0	; 3
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <ButtonPress5+0x162>
		{
			while(~PINB & 0x01){}
    10f8:	18 9b       	sbis	0x03, 0	; 3
    10fa:	fe cf       	rjmp	.-4      	; 0x10f8 <ButtonPress5+0x158>
			Press_fifth_level = Press5_state10;
    10fc:	8a e0       	ldi	r24, 0x0A	; 10
    10fe:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    1102:	19 9b       	sbis	0x03, 1	; 3
    1104:	04 c0       	rjmp	.+8      	; 0x110e <ButtonPress5+0x16e>
    1106:	1a 9b       	sbis	0x03, 2	; 3
    1108:	02 c0       	rjmp	.+4      	; 0x110e <ButtonPress5+0x16e>
    110a:	1b 99       	sbic	0x03, 3	; 3
    110c:	67 c0       	rjmp	.+206    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	80 93 15 01 	sts	0x0115, r24
    1114:	6e c0       	rjmp	.+220    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state10:
		if(~PINB & 0x02)
    1116:	19 99       	sbic	0x03, 1	; 3
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <ButtonPress5+0x184>
		{
			while(~PINB & 0x02){}
    111a:	19 9b       	sbis	0x03, 1	; 3
    111c:	fe cf       	rjmp	.-4      	; 0x111a <ButtonPress5+0x17a>
			Press_fifth_level = Press5_state11;
    111e:	8b e0       	ldi	r24, 0x0B	; 11
    1120:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    1124:	18 9b       	sbis	0x03, 0	; 3
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <ButtonPress5+0x190>
    1128:	1a 9b       	sbis	0x03, 2	; 3
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <ButtonPress5+0x190>
    112c:	1b 99       	sbic	0x03, 3	; 3
    112e:	56 c0       	rjmp	.+172    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1130:	80 e1       	ldi	r24, 0x10	; 16
    1132:	80 93 15 01 	sts	0x0115, r24
    1136:	5d c0       	rjmp	.+186    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state11:
		if(~PINB & 0x01)
    1138:	18 99       	sbic	0x03, 0	; 3
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <ButtonPress5+0x1a6>
		{
			while(~PINB & 0x01){}
    113c:	18 9b       	sbis	0x03, 0	; 3
    113e:	fe cf       	rjmp	.-4      	; 0x113c <ButtonPress5+0x19c>
			Press_fifth_level = Press5_state12;
    1140:	8c e0       	ldi	r24, 0x0C	; 12
    1142:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    1146:	19 9b       	sbis	0x03, 1	; 3
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <ButtonPress5+0x1b2>
    114a:	1a 9b       	sbis	0x03, 2	; 3
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <ButtonPress5+0x1b2>
    114e:	1b 99       	sbic	0x03, 3	; 3
    1150:	45 c0       	rjmp	.+138    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	80 93 15 01 	sts	0x0115, r24
    1158:	4c c0       	rjmp	.+152    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state12:
		if(~PINB & 0x04)
    115a:	1a 99       	sbic	0x03, 2	; 3
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <ButtonPress5+0x1c8>
		{
			while(~PINB & 0x04){}
    115e:	1a 9b       	sbis	0x03, 2	; 3
    1160:	fe cf       	rjmp	.-4      	; 0x115e <ButtonPress5+0x1be>
			Press_fifth_level = Press5_state13;
    1162:	8d e0       	ldi	r24, 0x0D	; 13
    1164:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
    1168:	19 9b       	sbis	0x03, 1	; 3
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <ButtonPress5+0x1d4>
    116c:	18 9b       	sbis	0x03, 0	; 3
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <ButtonPress5+0x1d4>
    1170:	1b 99       	sbic	0x03, 3	; 3
    1172:	34 c0       	rjmp	.+104    	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1174:	80 e1       	ldi	r24, 0x10	; 16
    1176:	80 93 15 01 	sts	0x0115, r24
    117a:	3b c0       	rjmp	.+118    	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state13:
		if(~PINB & 0x08)
    117c:	1b 99       	sbic	0x03, 3	; 3
    117e:	05 c0       	rjmp	.+10     	; 0x118a <ButtonPress5+0x1ea>
		{
			while(~PINB & 0x08){}
    1180:	1b 9b       	sbis	0x03, 3	; 3
    1182:	fe cf       	rjmp	.-4      	; 0x1180 <ButtonPress5+0x1e0>
			Press_fifth_level = Press5_state14;
    1184:	8e e0       	ldi	r24, 0x0E	; 14
    1186:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
    118a:	19 9b       	sbis	0x03, 1	; 3
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <ButtonPress5+0x1f6>
    118e:	1a 9b       	sbis	0x03, 2	; 3
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <ButtonPress5+0x1f6>
    1192:	18 99       	sbic	0x03, 0	; 3
    1194:	23 c0       	rjmp	.+70     	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    1196:	80 e1       	ldi	r24, 0x10	; 16
    1198:	80 93 15 01 	sts	0x0115, r24
    119c:	2a c0       	rjmp	.+84     	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state14:
		if(~PINB & 0x01)
    119e:	18 99       	sbic	0x03, 0	; 3
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <ButtonPress5+0x20c>
		{
			while(~PINB & 0x01){}
    11a2:	18 9b       	sbis	0x03, 0	; 3
    11a4:	fe cf       	rjmp	.-4      	; 0x11a2 <ButtonPress5+0x202>
			Press_fifth_level = Press5_state15;
    11a6:	8f e0       	ldi	r24, 0x0F	; 15
    11a8:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    11ac:	19 9b       	sbis	0x03, 1	; 3
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <ButtonPress5+0x218>
    11b0:	1a 9b       	sbis	0x03, 2	; 3
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <ButtonPress5+0x218>
    11b4:	1b 99       	sbic	0x03, 3	; 3
    11b6:	12 c0       	rjmp	.+36     	; 0x11dc <ButtonPress5+0x23c>
		{
			Press_fifth_level = Error5;
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	80 93 15 01 	sts	0x0115, r24
    11be:	19 c0       	rjmp	.+50     	; 0x11f2 <ButtonPress5+0x252>
		}
		break;
		case Press5_state15:
		if(~PINB & 0x10)
    11c0:	1c 99       	sbic	0x03, 4	; 3
    11c2:	44 c0       	rjmp	.+136    	; 0x124c <ButtonPress5+0x2ac>
		{
			Press_fifth_level = Off5;
    11c4:	81 e1       	ldi	r24, 0x11	; 17
    11c6:	80 93 15 01 	sts	0x0115, r24
    11ca:	43 c0       	rjmp	.+134    	; 0x1252 <ButtonPress5+0x2b2>
		}
		break;
		case Error5:
		if(~PINB & 0x08)
    11cc:	1b 99       	sbic	0x03, 3	; 3
    11ce:	11 c0       	rjmp	.+34     	; 0x11f2 <ButtonPress5+0x252>
		{
			while(~PINB & 0x08){}
    11d0:	1b 9b       	sbis	0x03, 3	; 3
    11d2:	fe cf       	rjmp	.-4      	; 0x11d0 <ButtonPress5+0x230>
			Press_fifth_level = Press5_state1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 15 01 	sts	0x0115, r24
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <ButtonPress5+0x258>
		}
		break;
	}
	switch(Press_fifth_level)
    11dc:	80 91 15 01 	lds	r24, 0x0115
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	31 97       	sbiw	r30, 0x01	; 1
    11e6:	e1 31       	cpi	r30, 0x11	; 17
    11e8:	f1 05       	cpc	r31, r1
    11ea:	a0 f5       	brcc	.+104    	; 0x1254 <ButtonPress5+0x2b4>
    11ec:	ec 50       	subi	r30, 0x0C	; 12
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	d7 c1       	rjmp	.+942    	; 0x15a0 <__tablejump2__>
	{
		case Error5:
		PORTA = 0x10;
    11f2:	80 e1       	ldi	r24, 0x10	; 16
    11f4:	82 b9       	out	0x02, r24	; 2
		break;
    11f6:	08 95       	ret
		case Press5_state1:
		PORTA = 0x08;
    11f8:	88 e0       	ldi	r24, 0x08	; 8
    11fa:	82 b9       	out	0x02, r24	; 2
		break;
    11fc:	08 95       	ret
		case Press5_state2:
		PORTA = 0x04;
    11fe:	84 e0       	ldi	r24, 0x04	; 4
    1200:	82 b9       	out	0x02, r24	; 2
		break;
    1202:	08 95       	ret
		case Press5_state3:
		PORTA = 0x02;
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	82 b9       	out	0x02, r24	; 2
		break;
    1208:	08 95       	ret
		case Press5_state4:
		PORTA = 0x01;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	82 b9       	out	0x02, r24	; 2
		break;
    120e:	08 95       	ret
		case Press5_state5:
		PORTA = 0x02;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	82 b9       	out	0x02, r24	; 2
		break;
    1214:	08 95       	ret
		case Press5_state6:
		PORTA = 0x01;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	82 b9       	out	0x02, r24	; 2
		break;
    121a:	08 95       	ret
		case Press5_state7:
		PORTA = 0x04;
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	82 b9       	out	0x02, r24	; 2
		break;
    1220:	08 95       	ret
		case Press5_state8:
		PORTA = 0x08;
    1222:	88 e0       	ldi	r24, 0x08	; 8
    1224:	82 b9       	out	0x02, r24	; 2
		break;
    1226:	08 95       	ret
		case Press5_state9:
		PORTA = 0x02;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	82 b9       	out	0x02, r24	; 2
		break;
    122c:	08 95       	ret
		case Press5_state10:
		PORTA = 0x01;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	82 b9       	out	0x02, r24	; 2
		break;
    1232:	08 95       	ret
		case Press5_state11:
		PORTA = 0x02;
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	82 b9       	out	0x02, r24	; 2
		break;
    1238:	08 95       	ret
		case Press5_state12:
		PORTA = 0x01;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	82 b9       	out	0x02, r24	; 2
		break;
    123e:	08 95       	ret
		case Press5_state13:
		PORTA = 0x04;
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	82 b9       	out	0x02, r24	; 2
		break;
    1244:	08 95       	ret
		case Press5_state14:
		PORTA = 0x08;
    1246:	88 e0       	ldi	r24, 0x08	; 8
    1248:	82 b9       	out	0x02, r24	; 2
		break;
    124a:	08 95       	ret
		case Press5_state15:
		PORTA = 0x01;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	82 b9       	out	0x02, r24	; 2
		break;
    1250:	08 95       	ret
		case Off5:
		PORTA = 0x00;
    1252:	12 b8       	out	0x02, r1	; 2
    1254:	08 95       	ret

00001256 <main>:
	}
}


int main(void)
{
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
	DDRA = 0xFF;	PORTA = 0x00;
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	81 b9       	out	0x01, r24	; 1
    1262:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00;	PORTB = 0xFF;
    1264:	14 b8       	out	0x04, r1	; 4
    1266:	85 b9       	out	0x05, r24	; 5
	DDRD = 0xFF;	PORTD = 0x00;
    1268:	8a b9       	out	0x0a, r24	; 10
    126a:	1b b8       	out	0x0b, r1	; 11
	
	if(global_g == 0)
    126c:	80 91 06 01 	lds	r24, 0x0106
    1270:	81 11       	cpse	r24, r1
    1272:	8f c1       	rjmp	.+798    	; 0x1592 <main+0x33c>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1274:	0f 2e       	mov	r0, r31
    1276:	f4 ef       	ldi	r31, 0xF4	; 244
    1278:	cf 2e       	mov	r12, r31
    127a:	dd 24       	eor	r13, r13
    127c:	d3 94       	inc	r13
    127e:	e1 2c       	mov	r14, r1
    1280:	f1 2c       	mov	r15, r1
    1282:	f0 2d       	mov	r31, r0
    1284:	c0 92 01 01 	sts	0x0101, r12
    1288:	d0 92 02 01 	sts	0x0102, r13
    128c:	e0 92 03 01 	sts	0x0103, r14
    1290:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1294:	c0 92 07 01 	sts	0x0107, r12
    1298:	d0 92 08 01 	sts	0x0108, r13
    129c:	e0 92 09 01 	sts	0x0109, r14
    12a0:	f0 92 0a 01 	sts	0x010A, r15
	if(global_g == 0)
	{
		while(global_g == 0)
		{
			TimerSet(500);
			TimerOn();
    12a4:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_State_machine_1();
    12a8:	77 d8       	rcall	.-3858   	; 0x398 <TickFct_State_machine_1>
			while(!TimerFlag);
    12aa:	80 91 0b 01 	lds	r24, 0x010B
    12ae:	88 23       	and	r24, r24
    12b0:	e1 f3       	breq	.-8      	; 0x12aa <main+0x54>
			TimerFlag = 0;	
    12b2:	10 92 0b 01 	sts	0x010B, r1
	DDRB = 0x00;	PORTB = 0xFF;
	DDRD = 0xFF;	PORTD = 0x00;
	
	if(global_g == 0)
	{
		while(global_g == 0)
    12b6:	80 91 06 01 	lds	r24, 0x0106
    12ba:	88 23       	and	r24, r24
    12bc:	19 f3       	breq	.-58     	; 0x1284 <main+0x2e>
			TimerOn();
			TickFct_State_machine_1();
			while(!TimerFlag);
			TimerFlag = 0;	
		}
		while(global_g == 1)
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	21 f5       	brne	.+72     	; 0x130a <main+0xb4>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    12c2:	0f 2e       	mov	r0, r31
    12c4:	f8 ec       	ldi	r31, 0xC8	; 200
    12c6:	cf 2e       	mov	r12, r31
    12c8:	d1 2c       	mov	r13, r1
    12ca:	e1 2c       	mov	r14, r1
    12cc:	f1 2c       	mov	r15, r1
    12ce:	f0 2d       	mov	r31, r0
    12d0:	c0 92 01 01 	sts	0x0101, r12
    12d4:	d0 92 02 01 	sts	0x0102, r13
    12d8:	e0 92 03 01 	sts	0x0103, r14
    12dc:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    12e0:	c0 92 07 01 	sts	0x0107, r12
    12e4:	d0 92 08 01 	sts	0x0108, r13
    12e8:	e0 92 09 01 	sts	0x0109, r14
    12ec:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;	
		}
		while(global_g == 1)
		{
			TimerSet(200);
			TimerOn();
    12f0:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress();
    12f4:	9c d8       	rcall	.-3784   	; 0x42e <ButtonPress>
			while(!TimerFlag);
    12f6:	80 91 0b 01 	lds	r24, 0x010B
    12fa:	88 23       	and	r24, r24
    12fc:	e1 f3       	breq	.-8      	; 0x12f6 <main+0xa0>
			TimerFlag = 0;
    12fe:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_State_machine_1();
			while(!TimerFlag);
			TimerFlag = 0;	
		}
		while(global_g == 1)
    1302:	80 91 06 01 	lds	r24, 0x0106
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	19 f3       	breq	.-58     	; 0x12d0 <main+0x7a>
			TimerOn();
			ButtonPress();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 2)
    130a:	80 91 06 01 	lds	r24, 0x0106
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	29 f5       	brne	.+74     	; 0x135c <main+0x106>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1312:	0f 2e       	mov	r0, r31
    1314:	f4 ef       	ldi	r31, 0xF4	; 244
    1316:	cf 2e       	mov	r12, r31
    1318:	dd 24       	eor	r13, r13
    131a:	d3 94       	inc	r13
    131c:	e1 2c       	mov	r14, r1
    131e:	f1 2c       	mov	r15, r1
    1320:	f0 2d       	mov	r31, r0
    1322:	c0 92 01 01 	sts	0x0101, r12
    1326:	d0 92 02 01 	sts	0x0102, r13
    132a:	e0 92 03 01 	sts	0x0103, r14
    132e:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1332:	c0 92 07 01 	sts	0x0107, r12
    1336:	d0 92 08 01 	sts	0x0108, r13
    133a:	e0 92 09 01 	sts	0x0109, r14
    133e:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 2)
		{
			TimerSet(500);
			TimerOn();
    1342:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine2();
    1346:	52 d9       	rcall	.-3420   	; 0x5ec <TickFct_Machine2>
			while(!TimerFlag);
    1348:	80 91 0b 01 	lds	r24, 0x010B
    134c:	88 23       	and	r24, r24
    134e:	e1 f3       	breq	.-8      	; 0x1348 <main+0xf2>
			TimerFlag = 0;
    1350:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 2)
    1354:	80 91 06 01 	lds	r24, 0x0106
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	19 f3       	breq	.-58     	; 0x1322 <main+0xcc>
			TimerOn();
			TickFct_Machine2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 3)
    135c:	80 91 06 01 	lds	r24, 0x0106
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	21 f5       	brne	.+72     	; 0x13ac <main+0x156>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1364:	0f 2e       	mov	r0, r31
    1366:	f8 ec       	ldi	r31, 0xC8	; 200
    1368:	cf 2e       	mov	r12, r31
    136a:	d1 2c       	mov	r13, r1
    136c:	e1 2c       	mov	r14, r1
    136e:	f1 2c       	mov	r15, r1
    1370:	f0 2d       	mov	r31, r0
    1372:	c0 92 01 01 	sts	0x0101, r12
    1376:	d0 92 02 01 	sts	0x0102, r13
    137a:	e0 92 03 01 	sts	0x0103, r14
    137e:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1382:	c0 92 07 01 	sts	0x0107, r12
    1386:	d0 92 08 01 	sts	0x0108, r13
    138a:	e0 92 09 01 	sts	0x0109, r14
    138e:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 3)
		{
			TimerSet(200);
			TimerOn();
    1392:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress2();
    1396:	7c d9       	rcall	.-3336   	; 0x690 <ButtonPress2>
			while(!TimerFlag);
    1398:	80 91 0b 01 	lds	r24, 0x010B
    139c:	88 23       	and	r24, r24
    139e:	e1 f3       	breq	.-8      	; 0x1398 <main+0x142>
			TimerFlag = 0;
    13a0:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 3)
    13a4:	80 91 06 01 	lds	r24, 0x0106
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	19 f3       	breq	.-58     	; 0x1372 <main+0x11c>
			TimerOn();
			ButtonPress2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 4)
    13ac:	80 91 06 01 	lds	r24, 0x0106
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	29 f5       	brne	.+74     	; 0x13fe <main+0x1a8>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    13b4:	0f 2e       	mov	r0, r31
    13b6:	f4 ef       	ldi	r31, 0xF4	; 244
    13b8:	cf 2e       	mov	r12, r31
    13ba:	dd 24       	eor	r13, r13
    13bc:	d3 94       	inc	r13
    13be:	e1 2c       	mov	r14, r1
    13c0:	f1 2c       	mov	r15, r1
    13c2:	f0 2d       	mov	r31, r0
    13c4:	c0 92 01 01 	sts	0x0101, r12
    13c8:	d0 92 02 01 	sts	0x0102, r13
    13cc:	e0 92 03 01 	sts	0x0103, r14
    13d0:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    13d4:	c0 92 07 01 	sts	0x0107, r12
    13d8:	d0 92 08 01 	sts	0x0108, r13
    13dc:	e0 92 09 01 	sts	0x0109, r14
    13e0:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 4)
		{
			TimerSet(500);
			TimerOn();
    13e4:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine3();
    13e8:	67 da       	rcall	.-2866   	; 0x8b8 <TickFct_Machine3>
			while(!TimerFlag);
    13ea:	80 91 0b 01 	lds	r24, 0x010B
    13ee:	88 23       	and	r24, r24
    13f0:	e1 f3       	breq	.-8      	; 0x13ea <main+0x194>
			TimerFlag = 0;
    13f2:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 4)
    13f6:	80 91 06 01 	lds	r24, 0x0106
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	19 f3       	breq	.-58     	; 0x13c4 <main+0x16e>
			TimerOn();
			TickFct_Machine3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 5)
    13fe:	80 91 06 01 	lds	r24, 0x0106
    1402:	85 30       	cpi	r24, 0x05	; 5
    1404:	21 f5       	brne	.+72     	; 0x144e <main+0x1f8>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1406:	0f 2e       	mov	r0, r31
    1408:	f8 ec       	ldi	r31, 0xC8	; 200
    140a:	cf 2e       	mov	r12, r31
    140c:	d1 2c       	mov	r13, r1
    140e:	e1 2c       	mov	r14, r1
    1410:	f1 2c       	mov	r15, r1
    1412:	f0 2d       	mov	r31, r0
    1414:	c0 92 01 01 	sts	0x0101, r12
    1418:	d0 92 02 01 	sts	0x0102, r13
    141c:	e0 92 03 01 	sts	0x0103, r14
    1420:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1424:	c0 92 07 01 	sts	0x0107, r12
    1428:	d0 92 08 01 	sts	0x0108, r13
    142c:	e0 92 09 01 	sts	0x0109, r14
    1430:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 5)
		{
			TimerSet(200);
			TimerOn();
    1434:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress3();
    1438:	a2 da       	rcall	.-2748   	; 0x97e <ButtonPress3>
			while(!TimerFlag);
    143a:	80 91 0b 01 	lds	r24, 0x010B
    143e:	88 23       	and	r24, r24
    1440:	e1 f3       	breq	.-8      	; 0x143a <main+0x1e4>
			TimerFlag = 0;
    1442:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 5)
    1446:	80 91 06 01 	lds	r24, 0x0106
    144a:	85 30       	cpi	r24, 0x05	; 5
    144c:	19 f3       	breq	.-58     	; 0x1414 <main+0x1be>
			TimerOn();
			ButtonPress3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 6)
    144e:	80 91 06 01 	lds	r24, 0x0106
    1452:	86 30       	cpi	r24, 0x06	; 6
    1454:	29 f5       	brne	.+74     	; 0x14a0 <main+0x24a>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1456:	0f 2e       	mov	r0, r31
    1458:	f4 ef       	ldi	r31, 0xF4	; 244
    145a:	cf 2e       	mov	r12, r31
    145c:	dd 24       	eor	r13, r13
    145e:	d3 94       	inc	r13
    1460:	e1 2c       	mov	r14, r1
    1462:	f1 2c       	mov	r15, r1
    1464:	f0 2d       	mov	r31, r0
    1466:	c0 92 01 01 	sts	0x0101, r12
    146a:	d0 92 02 01 	sts	0x0102, r13
    146e:	e0 92 03 01 	sts	0x0103, r14
    1472:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1476:	c0 92 07 01 	sts	0x0107, r12
    147a:	d0 92 08 01 	sts	0x0108, r13
    147e:	e0 92 09 01 	sts	0x0109, r14
    1482:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 6)
		{
			TimerSet(500);
			TimerOn();
    1486:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine4();
    148a:	5f db       	rcall	.-2370   	; 0xb4a <TickFct_Machine4>
			while(!TimerFlag);
    148c:	80 91 0b 01 	lds	r24, 0x010B
    1490:	88 23       	and	r24, r24
    1492:	e1 f3       	breq	.-8      	; 0x148c <main+0x236>
			TimerFlag = 0;
    1494:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 6)
    1498:	80 91 06 01 	lds	r24, 0x0106
    149c:	86 30       	cpi	r24, 0x06	; 6
    149e:	19 f3       	breq	.-58     	; 0x1466 <main+0x210>
			TimerOn();
			TickFct_Machine4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 7)
    14a0:	80 91 06 01 	lds	r24, 0x0106
    14a4:	87 30       	cpi	r24, 0x07	; 7
    14a6:	21 f5       	brne	.+72     	; 0x14f0 <main+0x29a>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    14a8:	0f 2e       	mov	r0, r31
    14aa:	f8 ec       	ldi	r31, 0xC8	; 200
    14ac:	cf 2e       	mov	r12, r31
    14ae:	d1 2c       	mov	r13, r1
    14b0:	e1 2c       	mov	r14, r1
    14b2:	f1 2c       	mov	r15, r1
    14b4:	f0 2d       	mov	r31, r0
    14b6:	c0 92 01 01 	sts	0x0101, r12
    14ba:	d0 92 02 01 	sts	0x0102, r13
    14be:	e0 92 03 01 	sts	0x0103, r14
    14c2:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    14c6:	c0 92 07 01 	sts	0x0107, r12
    14ca:	d0 92 08 01 	sts	0x0108, r13
    14ce:	e0 92 09 01 	sts	0x0109, r14
    14d2:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 7)
		{
			TimerSet(200);
			TimerOn();
    14d6:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress4();
    14da:	b1 db       	rcall	.-2206   	; 0xc3e <ButtonPress4>
			while(!TimerFlag);
    14dc:	80 91 0b 01 	lds	r24, 0x010B
    14e0:	88 23       	and	r24, r24
    14e2:	e1 f3       	breq	.-8      	; 0x14dc <main+0x286>
			TimerFlag = 0;
    14e4:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 7)
    14e8:	80 91 06 01 	lds	r24, 0x0106
    14ec:	87 30       	cpi	r24, 0x07	; 7
    14ee:	19 f3       	breq	.-58     	; 0x14b6 <main+0x260>
			TimerOn();
			ButtonPress4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 8)
    14f0:	80 91 06 01 	lds	r24, 0x0106
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	29 f5       	brne	.+74     	; 0x1542 <main+0x2ec>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    14f8:	0f 2e       	mov	r0, r31
    14fa:	f4 ef       	ldi	r31, 0xF4	; 244
    14fc:	cf 2e       	mov	r12, r31
    14fe:	dd 24       	eor	r13, r13
    1500:	d3 94       	inc	r13
    1502:	e1 2c       	mov	r14, r1
    1504:	f1 2c       	mov	r15, r1
    1506:	f0 2d       	mov	r31, r0
    1508:	c0 92 01 01 	sts	0x0101, r12
    150c:	d0 92 02 01 	sts	0x0102, r13
    1510:	e0 92 03 01 	sts	0x0103, r14
    1514:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1518:	c0 92 07 01 	sts	0x0107, r12
    151c:	d0 92 08 01 	sts	0x0108, r13
    1520:	e0 92 09 01 	sts	0x0109, r14
    1524:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 8)
		{
			TimerSet(500);
			TimerOn();
    1528:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine5();
    152c:	aa dc       	rcall	.-1708   	; 0xe82 <TickFct_Machine5>
			while(!TimerFlag);
    152e:	80 91 0b 01 	lds	r24, 0x010B
    1532:	88 23       	and	r24, r24
    1534:	e1 f3       	breq	.-8      	; 0x152e <main+0x2d8>
			TimerFlag = 0;
    1536:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 8)
    153a:	80 91 06 01 	lds	r24, 0x0106
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	19 f3       	breq	.-58     	; 0x1508 <main+0x2b2>
			TimerOn();
			TickFct_Machine5();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 9)
    1542:	80 91 06 01 	lds	r24, 0x0106
    1546:	89 30       	cpi	r24, 0x09	; 9
    1548:	21 f5       	brne	.+72     	; 0x1592 <main+0x33c>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    154a:	0f 2e       	mov	r0, r31
    154c:	f8 ec       	ldi	r31, 0xC8	; 200
    154e:	cf 2e       	mov	r12, r31
    1550:	d1 2c       	mov	r13, r1
    1552:	e1 2c       	mov	r14, r1
    1554:	f1 2c       	mov	r15, r1
    1556:	f0 2d       	mov	r31, r0
    1558:	c0 92 01 01 	sts	0x0101, r12
    155c:	d0 92 02 01 	sts	0x0102, r13
    1560:	e0 92 03 01 	sts	0x0103, r14
    1564:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1568:	c0 92 07 01 	sts	0x0107, r12
    156c:	d0 92 08 01 	sts	0x0108, r13
    1570:	e0 92 09 01 	sts	0x0109, r14
    1574:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 9)
		{
			TimerSet(200);
			TimerOn();
    1578:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress5();
    157c:	11 dd       	rcall	.-1502   	; 0xfa0 <ButtonPress5>
			while(!TimerFlag);
    157e:	80 91 0b 01 	lds	r24, 0x010B
    1582:	88 23       	and	r24, r24
    1584:	e1 f3       	breq	.-8      	; 0x157e <main+0x328>
			TimerFlag = 0;
    1586:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine5();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 9)
    158a:	80 91 06 01 	lds	r24, 0x0106
    158e:	89 30       	cpi	r24, 0x09	; 9
    1590:	19 f3       	breq	.-58     	; 0x1558 <main+0x302>
			TimerFlag = 0;
		}
	}
	return 0;
		
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	08 95       	ret

000015a0 <__tablejump2__>:
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31

000015a4 <__tablejump__>:
    15a4:	05 90       	lpm	r0, Z+
    15a6:	f4 91       	lpm	r31, Z
    15a8:	e0 2d       	mov	r30, r0
    15aa:	09 94       	ijmp

000015ac <_exit>:
    15ac:	f8 94       	cli

000015ae <__stop_program>:
    15ae:	ff cf       	rjmp	.-2      	; 0x15ae <__stop_program>
