
2nd_final_prj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001b48  00001bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800106  00800106  00001be2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ff1  00000000  00000000  00001cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028a  00000000  00000000  00002ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b65  00000000  00000000  00002f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00004ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000800  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f5  00000000  00000000  000054c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000059b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__vector_13>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 03       	mulsu	r16, r17
      8e:	11 03       	mulsu	r17, r17
      90:	15 03       	mulsu	r17, r21
      92:	19 03       	fmul	r17, r17
      94:	1d 03       	fmul	r17, r21
      96:	21 03       	mulsu	r18, r17
      98:	25 03       	mulsu	r18, r21
      9a:	36 03       	mulsu	r19, r22
      9c:	38 03       	fmul	r19, r16
      9e:	3b 03       	fmul	r19, r19
      a0:	3e 03       	fmul	r19, r22
      a2:	41 03       	mulsu	r20, r17
      a4:	44 03       	mulsu	r20, r20
      a6:	47 03       	mulsu	r20, r23
      a8:	56 03       	mulsu	r21, r22
      aa:	75 03       	mulsu	r23, r21
      ac:	94 03       	fmuls	r17, r20
      ae:	b3 03       	fmuls	r19, r19
      b0:	d2 03       	fmuls	r21, r18
      b2:	f1 03       	fmuls	r23, r17
      b4:	10 04       	cpc	r1, r0
      b6:	2d 04       	cpc	r2, r13
      b8:	34 04       	cpc	r3, r4
      ba:	3b 04       	cpc	r3, r11
      bc:	42 04       	cpc	r4, r2
      be:	49 04       	cpc	r4, r9
      c0:	50 04       	cpc	r5, r0
      c2:	26 04       	cpc	r2, r6
      c4:	57 04       	cpc	r5, r7
      c6:	6c 04       	cpc	r6, r12
      c8:	78 04       	cpc	r7, r8
      ca:	7c 04       	cpc	r7, r12
      cc:	80 04       	cpc	r8, r0
      ce:	84 04       	cpc	r8, r4
      d0:	88 04       	cpc	r8, r8
      d2:	8c 04       	cpc	r8, r12
      d4:	90 04       	cpc	r9, r0
      d6:	94 04       	cpc	r9, r4
      d8:	98 04       	cpc	r9, r8
      da:	a5 04       	cpc	r10, r5
      dc:	a7 04       	cpc	r10, r7
      de:	aa 04       	cpc	r10, r10
      e0:	ad 04       	cpc	r10, r13
      e2:	b0 04       	cpc	r11, r0
      e4:	b3 04       	cpc	r11, r3
      e6:	b6 04       	cpc	r11, r6
      e8:	b9 04       	cpc	r11, r9
      ea:	bc 04       	cpc	r11, r12
      ec:	bf 04       	cpc	r11, r15
      ee:	d1 04       	cpc	r13, r1
      f0:	fe 04       	cpc	r15, r14
      f2:	1d 05       	cpc	r17, r13
      f4:	3c 05       	cpc	r19, r12
      f6:	5b 05       	cpc	r21, r11
      f8:	7a 05       	cpc	r23, r10
      fa:	99 05       	cpc	r25, r9
      fc:	b8 05       	cpc	r27, r8
      fe:	d7 05       	cpc	r29, r7
     100:	f6 05       	cpc	r31, r6
     102:	f6 04       	cpc	r15, r6
     104:	0f 06       	cpc	r0, r31
     106:	16 06       	cpc	r1, r22
     108:	1d 06       	cpc	r1, r29
     10a:	24 06       	cpc	r2, r20
     10c:	2b 06       	cpc	r2, r27
     10e:	32 06       	cpc	r3, r18
     110:	39 06       	cpc	r3, r25
     112:	40 06       	cpc	r4, r16
     114:	47 06       	cpc	r4, r23
     116:	08 06       	cpc	r0, r24
     118:	4e 06       	cpc	r4, r30
     11a:	63 06       	cpc	r6, r19
     11c:	70 06       	cpc	r7, r16
     11e:	74 06       	cpc	r7, r20
     120:	78 06       	cpc	r7, r24
     122:	7c 06       	cpc	r7, r28
     124:	80 06       	cpc	r8, r16
     126:	84 06       	cpc	r8, r20
     128:	88 06       	cpc	r8, r24
     12a:	8c 06       	cpc	r8, r28
     12c:	90 06       	cpc	r9, r16
     12e:	94 06       	cpc	r9, r20
     130:	98 06       	cpc	r9, r24
     132:	9c 06       	cpc	r9, r28
     134:	a8 06       	cpc	r10, r24
     136:	aa 06       	cpc	r10, r26
     138:	ad 06       	cpc	r10, r29
     13a:	b0 06       	cpc	r11, r16
     13c:	b3 06       	cpc	r11, r19
     13e:	b6 06       	cpc	r11, r22
     140:	b9 06       	cpc	r11, r25
     142:	bc 06       	cpc	r11, r28
     144:	bf 06       	cpc	r11, r31
     146:	c2 06       	cpc	r12, r18
     148:	c5 06       	cpc	r12, r21
     14a:	c8 06       	cpc	r12, r24
     14c:	cb 06       	cpc	r12, r27
     14e:	dc 06       	cpc	r13, r28
     150:	01 07       	cpc	r16, r17
     152:	20 07       	cpc	r18, r16
     154:	3f 07       	cpc	r19, r31
     156:	5e 07       	cpc	r21, r30
     158:	7d 07       	cpc	r23, r29
     15a:	9c 07       	cpc	r25, r28
     15c:	bb 07       	cpc	r27, r27
     15e:	da 07       	cpc	r29, r26
     160:	f9 07       	cpc	r31, r25
     162:	18 08       	sbc	r1, r8
     164:	37 08       	sbc	r3, r7
     166:	56 08       	sbc	r5, r6
     168:	5c 08       	sbc	r5, r12
     16a:	77 08       	sbc	r7, r7
     16c:	7e 08       	sbc	r7, r14
     16e:	85 08       	sbc	r8, r5
     170:	8c 08       	sbc	r8, r12
     172:	93 08       	sbc	r9, r3
     174:	9a 08       	sbc	r9, r10
     176:	a1 08       	sbc	r10, r1
     178:	a8 08       	sbc	r10, r8
     17a:	af 08       	sbc	r10, r15
     17c:	b6 08       	sbc	r11, r6
     17e:	bd 08       	sbc	r11, r13
     180:	c4 08       	sbc	r12, r4
     182:	70 08       	sbc	r7, r0
     184:	cb 08       	sbc	r12, r11
     186:	e0 08       	sbc	r14, r0
     188:	ed 08       	sbc	r14, r13
     18a:	f1 08       	sbc	r15, r1
     18c:	f5 08       	sbc	r15, r5
     18e:	f9 08       	sbc	r15, r9
     190:	fd 08       	sbc	r15, r13
     192:	01 09       	sbc	r16, r1
     194:	05 09       	sbc	r16, r5
     196:	09 09       	sbc	r16, r9
     198:	0d 09       	sbc	r16, r13
     19a:	11 09       	sbc	r17, r1
     19c:	15 09       	sbc	r17, r5
     19e:	19 09       	sbc	r17, r9
     1a0:	1d 09       	sbc	r17, r13
     1a2:	21 09       	sbc	r18, r1
     1a4:	25 09       	sbc	r18, r5
     1a6:	31 09       	sbc	r19, r1
     1a8:	33 09       	sbc	r19, r3
     1aa:	36 09       	sbc	r19, r6
     1ac:	39 09       	sbc	r19, r9
     1ae:	3c 09       	sbc	r19, r12
     1b0:	3f 09       	sbc	r19, r15
     1b2:	42 09       	sbc	r20, r2
     1b4:	45 09       	sbc	r20, r5
     1b6:	48 09       	sbc	r20, r8
     1b8:	4b 09       	sbc	r20, r11
     1ba:	4e 09       	sbc	r20, r14
     1bc:	51 09       	sbc	r21, r1
     1be:	54 09       	sbc	r21, r4
     1c0:	57 09       	sbc	r21, r7
     1c2:	5a 09       	sbc	r21, r10
     1c4:	5d 09       	sbc	r21, r13
     1c6:	6e 09       	sbc	r22, r14
     1c8:	93 09       	sbc	r25, r3
     1ca:	b2 09       	sbc	r27, r2
     1cc:	d1 09       	sbc	r29, r1
     1ce:	f0 09       	sbc	r31, r0
     1d0:	0f 0a       	sbc	r0, r31
     1d2:	2e 0a       	sbc	r2, r30
     1d4:	4d 0a       	sbc	r4, r29
     1d6:	6c 0a       	sbc	r6, r28
     1d8:	8b 0a       	sbc	r8, r27
     1da:	aa 0a       	sbc	r10, r26
     1dc:	c9 0a       	sbc	r12, r25
     1de:	e8 0a       	sbc	r14, r24
     1e0:	07 0b       	sbc	r16, r23
     1e2:	26 0b       	sbc	r18, r22
     1e4:	45 0b       	sbc	r20, r21
     1e6:	4b 0b       	sbc	r20, r27
     1e8:	68 0b       	sbc	r22, r24
     1ea:	71 0b       	sbc	r23, r17
     1ec:	7a 0b       	sbc	r23, r26
     1ee:	83 0b       	sbc	r24, r19
     1f0:	8c 0b       	sbc	r24, r28
     1f2:	95 0b       	sbc	r25, r21
     1f4:	9e 0b       	sbc	r25, r30
     1f6:	a7 0b       	sbc	r26, r23
     1f8:	b0 0b       	sbc	r27, r16
     1fa:	b9 0b       	sbc	r27, r25
     1fc:	c2 0b       	sbc	r28, r18
     1fe:	cb 0b       	sbc	r28, r27
     200:	d4 0b       	sbc	r29, r20
     202:	dd 0b       	sbc	r29, r29
     204:	e6 0b       	sbc	r30, r22
     206:	5f 0b       	sbc	r21, r31
     208:	ef 0b       	sbc	r30, r31

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	d0 e4       	ldi	r29, 0x40	; 64
     212:	de bf       	out	0x3e, r29	; 62
     214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	e8 e4       	ldi	r30, 0x48	; 72
     21e:	fb e1       	ldi	r31, 0x1B	; 27
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0b bf       	out	0x3b, r16	; 59
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
     226:	07 90       	elpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	a6 30       	cpi	r26, 0x06	; 6
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>

00000230 <__do_clear_bss>:
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	a6 e0       	ldi	r26, 0x06	; 6
     234:	b1 e0       	ldi	r27, 0x01	; 1
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a8 31       	cpi	r26, 0x18	; 24
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <main>
     244:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <TimerOn>:
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
     24a:	8b e0       	ldi	r24, 0x0B	; 11
     24c:	80 93 81 00 	sts	0x0081, r24
     250:	8d e7       	ldi	r24, 0x7D	; 125
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 89 00 	sts	0x0089, r25
     258:	80 93 88 00 	sts	0x0088, r24
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	80 93 6f 00 	sts	0x006F, r24
     262:	10 92 85 00 	sts	0x0085, r1
     266:	10 92 84 00 	sts	0x0084, r1
     26a:	80 91 01 01 	lds	r24, 0x0101
     26e:	90 91 02 01 	lds	r25, 0x0102
     272:	a0 91 03 01 	lds	r26, 0x0103
     276:	b0 91 04 01 	lds	r27, 0x0104
     27a:	80 93 07 01 	sts	0x0107, r24
     27e:	90 93 08 01 	sts	0x0108, r25
     282:	a0 93 09 01 	sts	0x0109, r26
     286:	b0 93 0a 01 	sts	0x010A, r27
     28a:	8f b7       	in	r24, 0x3f	; 63
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	8f bf       	out	0x3f, r24	; 63
     290:	08 95       	ret

00000292 <__vector_13>:
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	af 93       	push	r26
     2a2:	bf 93       	push	r27
     2a4:	80 91 07 01 	lds	r24, 0x0107
     2a8:	90 91 08 01 	lds	r25, 0x0108
     2ac:	a0 91 09 01 	lds	r26, 0x0109
     2b0:	b0 91 0a 01 	lds	r27, 0x010A
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	a1 09       	sbc	r26, r1
     2b8:	b1 09       	sbc	r27, r1
     2ba:	80 93 07 01 	sts	0x0107, r24
     2be:	90 93 08 01 	sts	0x0108, r25
     2c2:	a0 93 09 01 	sts	0x0109, r26
     2c6:	b0 93 0a 01 	sts	0x010A, r27
     2ca:	89 2b       	or	r24, r25
     2cc:	8a 2b       	or	r24, r26
     2ce:	8b 2b       	or	r24, r27
     2d0:	99 f4       	brne	.+38     	; 0x2f8 <__vector_13+0x66>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 0b 01 	sts	0x010B, r24
     2d8:	80 91 01 01 	lds	r24, 0x0101
     2dc:	90 91 02 01 	lds	r25, 0x0102
     2e0:	a0 91 03 01 	lds	r26, 0x0103
     2e4:	b0 91 04 01 	lds	r27, 0x0104
     2e8:	80 93 07 01 	sts	0x0107, r24
     2ec:	90 93 08 01 	sts	0x0108, r25
     2f0:	a0 93 09 01 	sts	0x0109, r26
     2f4:	b0 93 0a 01 	sts	0x010A, r27
     2f8:	bf 91       	pop	r27
     2fa:	af 91       	pop	r26
     2fc:	9f 91       	pop	r25
     2fe:	8f 91       	pop	r24
     300:	0f 90       	pop	r0
     302:	0f be       	out	0x3f, r0	; 63
     304:	0f 90       	pop	r0
     306:	1f 90       	pop	r1
     308:	18 95       	reti

0000030a <transmit_data>:
///////////////////////////////////////////////begin code/////////////////////////////////////////////////////////////////////////////

void transmit_data(unsigned char data) 
{
	int i;
	for (i = 0; i < 8 ; ++i) {
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		PORTD = (PORTD & 0xF0) | 0x08;
		// set SER = next bit of data to be sent.
		PORTD |= ((data >> i) & 0x01);
     30e:	90 e0       	ldi	r25, 0x00	; 0
{
	int i;
	for (i = 0; i < 8 ; ++i) {
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		PORTD = (PORTD & 0xF0) | 0x08;
     310:	4b b1       	in	r20, 0x0b	; 11
     312:	40 7f       	andi	r20, 0xF0	; 240
     314:	48 60       	ori	r20, 0x08	; 8
     316:	4b b9       	out	0x0b, r20	; 11
		// set SER = next bit of data to be sent.
		PORTD |= ((data >> i) & 0x01);
     318:	6b b1       	in	r22, 0x0b	; 11
     31a:	ac 01       	movw	r20, r24
     31c:	02 2e       	mov	r0, r18
     31e:	02 c0       	rjmp	.+4      	; 0x324 <transmit_data+0x1a>
     320:	55 95       	asr	r21
     322:	47 95       	ror	r20
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <transmit_data+0x16>
     328:	41 70       	andi	r20, 0x01	; 1
     32a:	46 2b       	or	r20, r22
     32c:	4b b9       	out	0x0b, r20	; 11
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTD |= 0x02;
     32e:	59 9a       	sbi	0x0b, 1	; 11
///////////////////////////////////////////////begin code/////////////////////////////////////////////////////////////////////////////

void transmit_data(unsigned char data) 
{
	int i;
	for (i = 0; i < 8 ; ++i) {
     330:	2f 5f       	subi	r18, 0xFF	; 255
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	28 30       	cpi	r18, 0x08	; 8
     336:	31 05       	cpc	r19, r1
     338:	59 f7       	brne	.-42     	; 0x310 <transmit_data+0x6>
		PORTD |= ((data >> i) & 0x01);
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTD |= 0x02;
	}
	// set RCLK = 1. Rising edge copies data from “Shift” register to “Storage” register
	PORTD |= 0x04;
     33a:	5a 9a       	sbi	0x0b, 2	; 11
	// clears all lines in preparation of a new transmission
	PORTD = PORTD & 0xF0;
     33c:	8b b1       	in	r24, 0x0b	; 11
     33e:	80 7f       	andi	r24, 0xF0	; 240
     340:	8b b9       	out	0x0b, r24	; 11
     342:	08 95       	ret

00000344 <simon_SevenSeg>:
}

unsigned char simon_SevenSeg(unsigned char score) 
{
	unsigned char controlSig = 0x00;
	if(score == 9) 
     344:	89 30       	cpi	r24, 0x09	; 9
     346:	a1 f0       	breq	.+40     	; 0x370 <simon_SevenSeg+0x2c>
	{
		controlSig = 0x19;//good
	}
	else if(score == 8) 
     348:	88 30       	cpi	r24, 0x08	; 8
     34a:	a1 f0       	breq	.+40     	; 0x374 <simon_SevenSeg+0x30>
	{
		controlSig = 0x00;//good
	}
	else if(score == 7) 
     34c:	87 30       	cpi	r24, 0x07	; 7
     34e:	a1 f0       	breq	.+40     	; 0x378 <simon_SevenSeg+0x34>
	{
		controlSig = 0x1F;//good
	}
	else if(score == 6) 
     350:	86 30       	cpi	r24, 0x06	; 6
     352:	a1 f0       	breq	.+40     	; 0x37c <simon_SevenSeg+0x38>
	{
		controlSig = 0x40;//good
	}
	else if(score == 5) 
     354:	85 30       	cpi	r24, 0x05	; 5
     356:	a1 f0       	breq	.+40     	; 0x380 <simon_SevenSeg+0x3c>
	{
		controlSig = 0x48;//good
	}
	else if(score == 4) 
     358:	84 30       	cpi	r24, 0x04	; 4
     35a:	a1 f0       	breq	.+40     	; 0x384 <simon_SevenSeg+0x40>
	{
		controlSig = 0x98;//good
	}
	else if(score == 3) 
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	a1 f0       	breq	.+40     	; 0x388 <simon_SevenSeg+0x44>
	{
		controlSig = 0x0C;//good
	}
	else if(score == 2) 
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	a1 f0       	breq	.+40     	; 0x38c <simon_SevenSeg+0x48>
	{
		controlSig = 0x24;//good
	}
	else if(score == 1) 
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	a1 f0       	breq	.+40     	; 0x390 <simon_SevenSeg+0x4c>
	{
		controlSig = 0x9E;//good
	}
	else if(score == 0) 
     368:	88 23       	and	r24, r24
     36a:	a1 f0       	breq	.+40     	; 0x394 <simon_SevenSeg+0x50>
	PORTD = PORTD & 0xF0;
}

unsigned char simon_SevenSeg(unsigned char score) 
{
	unsigned char controlSig = 0x00;
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	08 95       	ret
	if(score == 9) 
	{
		controlSig = 0x19;//good
     370:	89 e1       	ldi	r24, 0x19	; 25
     372:	08 95       	ret
	}
	else if(score == 8) 
	{
		controlSig = 0x00;//good
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret
	}
	else if(score == 7) 
	{
		controlSig = 0x1F;//good
     378:	8f e1       	ldi	r24, 0x1F	; 31
     37a:	08 95       	ret
	}
	else if(score == 6) 
	{
		controlSig = 0x40;//good
     37c:	80 e4       	ldi	r24, 0x40	; 64
     37e:	08 95       	ret
	}
	else if(score == 5) 
	{
		controlSig = 0x48;//good
     380:	88 e4       	ldi	r24, 0x48	; 72
     382:	08 95       	ret
	}
	else if(score == 4) 
	{
		controlSig = 0x98;//good
     384:	88 e9       	ldi	r24, 0x98	; 152
     386:	08 95       	ret
	}
	else if(score == 3) 
	{
		controlSig = 0x0C;//good
     388:	8c e0       	ldi	r24, 0x0C	; 12
     38a:	08 95       	ret
	}
	else if(score == 2) 
	{
		controlSig = 0x24;//good
     38c:	84 e2       	ldi	r24, 0x24	; 36
     38e:	08 95       	ret
	}
	else if(score == 1) 
	{
		controlSig = 0x9E;//good
     390:	8e e9       	ldi	r24, 0x9E	; 158
     392:	08 95       	ret
	}
	else if(score == 0) 
	{
		controlSig = 0x02;//good
     394:	82 e0       	ldi	r24, 0x02	; 2
	}
	return controlSig;
}
     396:	08 95       	ret

00000398 <TickFct_State_machine_1>:

//////////////////////////////////////////7 seg BCD////////////////////////////////////////////////////////////////////////////////////
enum SM1_States { SM1_off, SM1_on1, SM1_on2, SM1_on3, SM1_on4} SM1_State;
void TickFct_State_machine_1() 
{
	switch(SM1_State) 
     398:	80 91 12 01 	lds	r24, 0x0112
     39c:	82 30       	cpi	r24, 0x02	; 2
     39e:	c9 f0       	breq	.+50     	; 0x3d2 <TickFct_State_machine_1+0x3a>
     3a0:	28 f4       	brcc	.+10     	; 0x3ac <TickFct_State_machine_1+0x14>
     3a2:	88 23       	and	r24, r24
     3a4:	41 f0       	breq	.+16     	; 0x3b6 <TickFct_State_machine_1+0x1e>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	81 f0       	breq	.+32     	; 0x3ca <TickFct_State_machine_1+0x32>
     3aa:	20 c0       	rjmp	.+64     	; 0x3ec <TickFct_State_machine_1+0x54>
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	a9 f0       	breq	.+42     	; 0x3da <TickFct_State_machine_1+0x42>
     3b0:	84 30       	cpi	r24, 0x04	; 4
     3b2:	b9 f0       	breq	.+46     	; 0x3e2 <TickFct_State_machine_1+0x4a>
     3b4:	1b c0       	rjmp	.+54     	; 0x3ec <TickFct_State_machine_1+0x54>
	{

		case SM1_off:
		if(global_g == 0)
     3b6:	80 91 06 01 	lds	r24, 0x0106
     3ba:	81 11       	cpse	r24, r1
     3bc:	26 c0       	rjmp	.+76     	; 0x40a <TickFct_State_machine_1+0x72>
		{
			if(~PINB & 0x10)
     3be:	1c 99       	sbic	0x03, 4	; 3
     3c0:	24 c0       	rjmp	.+72     	; 0x40a <TickFct_State_machine_1+0x72>
			{
				SM1_State = SM1_on1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 12 01 	sts	0x0112, r24
     3c8:	26 c0       	rjmp	.+76     	; 0x416 <TickFct_State_machine_1+0x7e>
				SM1_State = SM1_off;
			}
		}
		break;
		case SM1_on1:
		SM1_State = SM1_on2;
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	80 93 12 01 	sts	0x0112, r24
     3d0:	25 c0       	rjmp	.+74     	; 0x41c <TickFct_State_machine_1+0x84>
		break;
		case SM1_on2:
		SM1_State = SM1_on3;
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	80 93 12 01 	sts	0x0112, r24
     3d8:	24 c0       	rjmp	.+72     	; 0x422 <TickFct_State_machine_1+0x8a>
		break;
		case SM1_on3:
		SM1_State = SM1_on4;
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	80 93 12 01 	sts	0x0112, r24
     3e0:	23 c0       	rjmp	.+70     	; 0x428 <TickFct_State_machine_1+0x90>
		break;
		case SM1_on4:
		SM1_State = SM1_off;
     3e2:	10 92 12 01 	sts	0x0112, r1
		global_g = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 06 01 	sts	0x0106, r24
	}

	switch(SM1_State) 
     3ec:	80 91 12 01 	lds	r24, 0x0112
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	a1 f0       	breq	.+40     	; 0x41c <TickFct_State_machine_1+0x84>
     3f4:	28 f4       	brcc	.+10     	; 0x400 <TickFct_State_machine_1+0x68>
     3f6:	88 23       	and	r24, r24
     3f8:	41 f0       	breq	.+16     	; 0x40a <TickFct_State_machine_1+0x72>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	61 f0       	breq	.+24     	; 0x416 <TickFct_State_machine_1+0x7e>
     3fe:	08 95       	ret
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	79 f0       	breq	.+30     	; 0x422 <TickFct_State_machine_1+0x8a>
     404:	84 30       	cpi	r24, 0x04	; 4
     406:	91 f4       	brne	.+36     	; 0x42c <TickFct_State_machine_1+0x94>
     408:	0f c0       	rjmp	.+30     	; 0x428 <TickFct_State_machine_1+0x90>
	{
		case SM1_off:
		PORTA = 0X00;
     40a:	12 b8       	out	0x02, r1	; 2
		transmit_data(simon_SevenSeg(lives));
     40c:	80 91 00 01 	lds	r24, 0x0100
     410:	99 df       	rcall	.-206    	; 0x344 <simon_SevenSeg>
     412:	7b cf       	rjmp	.-266    	; 0x30a <transmit_data>
		break;
     414:	08 95       	ret
		case SM1_on1:
		PORTA = 0x01;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	82 b9       	out	0x02, r24	; 2
		break;
     41a:	08 95       	ret
		case SM1_on2:
		PORTA = 0x02;
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	82 b9       	out	0x02, r24	; 2
		break;
     420:	08 95       	ret
		case SM1_on3:
		PORTA = 0x04;
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	82 b9       	out	0x02, r24	; 2
		break;
     426:	08 95       	ret
		case SM1_on4:
		PORTA = 0x08;
     428:	88 e0       	ldi	r24, 0x08	; 8
     42a:	82 b9       	out	0x02, r24	; 2
     42c:	08 95       	ret

0000042e <ButtonPress>:
}

enum Press_States {Init, Press1, Press2, Press3, Press4, Error, Off} Press_States;
void ButtonPress()
{
	switch(Press_States)
     42e:	80 91 17 01 	lds	r24, 0x0117
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	09 f4       	brne	.+2      	; 0x438 <ButtonPress+0xa>
     436:	52 c0       	rjmp	.+164    	; 0x4dc <ButtonPress+0xae>
     438:	28 f4       	brcc	.+10     	; 0x444 <ButtonPress+0x16>
     43a:	88 23       	and	r24, r24
     43c:	61 f0       	breq	.+24     	; 0x456 <ButtonPress+0x28>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	71 f1       	breq	.+92     	; 0x49e <ButtonPress+0x70>
     442:	98 c0       	rjmp	.+304    	; 0x574 <ButtonPress+0x146>
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	09 f4       	brne	.+2      	; 0x44a <ButtonPress+0x1c>
     448:	87 c0       	rjmp	.+270    	; 0x558 <ButtonPress+0x12a>
     44a:	08 f4       	brcc	.+2      	; 0x44e <ButtonPress+0x20>
     44c:	66 c0       	rjmp	.+204    	; 0x51a <ButtonPress+0xec>
     44e:	85 30       	cpi	r24, 0x05	; 5
     450:	09 f4       	brne	.+2      	; 0x454 <ButtonPress+0x26>
     452:	88 c0       	rjmp	.+272    	; 0x564 <ButtonPress+0x136>
     454:	8f c0       	rjmp	.+286    	; 0x574 <ButtonPress+0x146>
	{
		case Init:
		if(global_g == 1)
     456:	80 91 06 01 	lds	r24, 0x0106
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	09 f0       	breq	.+2      	; 0x460 <ButtonPress+0x32>
     45e:	c5 c0       	rjmp	.+394    	; 0x5ea <ButtonPress+0x1bc>
		{
			if(~PINB & 0x01)
     460:	18 99       	sbic	0x03, 0	; 3
     462:	05 c0       	rjmp	.+10     	; 0x46e <ButtonPress+0x40>
			{
				while(~PINB & 0x01){}
     464:	18 9b       	sbis	0x03, 0	; 3
     466:	fe cf       	rjmp	.-4      	; 0x464 <ButtonPress+0x36>
				Press_States = Press1;	
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 17 01 	sts	0x0117, r24
			}
			if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     46e:	19 9b       	sbis	0x03, 1	; 3
     470:	04 c0       	rjmp	.+8      	; 0x47a <ButtonPress+0x4c>
     472:	1a 9b       	sbis	0x03, 2	; 3
     474:	02 c0       	rjmp	.+4      	; 0x47a <ButtonPress+0x4c>
     476:	1b 99       	sbic	0x03, 3	; 3
     478:	7d c0       	rjmp	.+250    	; 0x574 <ButtonPress+0x146>
			{
				if(lives - 1 > -1)
     47a:	20 91 00 01 	lds	r18, 0x0100
     47e:	82 2f       	mov	r24, r18
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	99 23       	and	r25, r25
     486:	24 f0       	brlt	.+8      	; 0x490 <ButtonPress+0x62>
				{
					lives--;
     488:	21 50       	subi	r18, 0x01	; 1
     48a:	20 93 00 01 	sts	0x0100, r18
     48e:	03 c0       	rjmp	.+6      	; 0x496 <ButtonPress+0x68>
				}
				else
				{
					global_g = 20;
     490:	84 e1       	ldi	r24, 0x14	; 20
     492:	80 93 06 01 	sts	0x0106, r24
				}
				Press_States = Error;
     496:	85 e0       	ldi	r24, 0x05	; 5
     498:	80 93 17 01 	sts	0x0117, r24
     49c:	7b c0       	rjmp	.+246    	; 0x594 <ButtonPress+0x166>
			}
		}
		break;
		
		case Press1:
		if(~PINB & 0x02)
     49e:	19 99       	sbic	0x03, 1	; 3
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <ButtonPress+0x7e>
		{
			while(~PINB & 0x02){}
     4a2:	19 9b       	sbis	0x03, 1	; 3
     4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <ButtonPress+0x74>
			Press_States = Press2;
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	80 93 17 01 	sts	0x0117, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     4ac:	18 9b       	sbis	0x03, 0	; 3
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <ButtonPress+0x8a>
     4b0:	1a 9b       	sbis	0x03, 2	; 3
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <ButtonPress+0x8a>
     4b4:	1b 99       	sbic	0x03, 3	; 3
     4b6:	5e c0       	rjmp	.+188    	; 0x574 <ButtonPress+0x146>
		{
			if(lives - 1 > -1)
     4b8:	20 91 00 01 	lds	r18, 0x0100
     4bc:	82 2f       	mov	r24, r18
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	99 23       	and	r25, r25
     4c4:	24 f0       	brlt	.+8      	; 0x4ce <ButtonPress+0xa0>
			{
				lives--;
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	20 93 00 01 	sts	0x0100, r18
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <ButtonPress+0xa6>
			}
			else
			{
				global_g = 20;
     4ce:	84 e1       	ldi	r24, 0x14	; 20
     4d0:	80 93 06 01 	sts	0x0106, r24
			}
			Press_States = Error;
     4d4:	85 e0       	ldi	r24, 0x05	; 5
     4d6:	80 93 17 01 	sts	0x0117, r24
     4da:	5c c0       	rjmp	.+184    	; 0x594 <ButtonPress+0x166>
		}
		break;
		case Press2:
		if(~PINB & 0x04)
     4dc:	1a 99       	sbic	0x03, 2	; 3
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <ButtonPress+0xbc>
		{
			while(~PINB & 0x04){}
     4e0:	1a 9b       	sbis	0x03, 2	; 3
     4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <ButtonPress+0xb2>
			Press_States = Press3;
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 93 17 01 	sts	0x0117, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     4ea:	19 9b       	sbis	0x03, 1	; 3
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <ButtonPress+0xc8>
     4ee:	18 9b       	sbis	0x03, 0	; 3
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <ButtonPress+0xc8>
     4f2:	1b 99       	sbic	0x03, 3	; 3
     4f4:	3f c0       	rjmp	.+126    	; 0x574 <ButtonPress+0x146>
		{
			if(lives - 1 > -1)
     4f6:	20 91 00 01 	lds	r18, 0x0100
     4fa:	82 2f       	mov	r24, r18
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	99 23       	and	r25, r25
     502:	24 f0       	brlt	.+8      	; 0x50c <ButtonPress+0xde>
			{
				lives--;
     504:	21 50       	subi	r18, 0x01	; 1
     506:	20 93 00 01 	sts	0x0100, r18
     50a:	03 c0       	rjmp	.+6      	; 0x512 <ButtonPress+0xe4>
			}
			else
			{
				global_g = 20;
     50c:	84 e1       	ldi	r24, 0x14	; 20
     50e:	80 93 06 01 	sts	0x0106, r24
			}
			Press_States = Error;
     512:	85 e0       	ldi	r24, 0x05	; 5
     514:	80 93 17 01 	sts	0x0117, r24
     518:	3d c0       	rjmp	.+122    	; 0x594 <ButtonPress+0x166>
		}
		break;
		case Press3:
		if(~PINB & 0x08)
     51a:	1b 99       	sbic	0x03, 3	; 3
     51c:	05 c0       	rjmp	.+10     	; 0x528 <ButtonPress+0xfa>
		{
			while(~PINB & 0x08){}
     51e:	1b 9b       	sbis	0x03, 3	; 3
     520:	fe cf       	rjmp	.-4      	; 0x51e <ButtonPress+0xf0>
			Press_States = Press4;
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	80 93 17 01 	sts	0x0117, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     528:	19 9b       	sbis	0x03, 1	; 3
     52a:	04 c0       	rjmp	.+8      	; 0x534 <ButtonPress+0x106>
     52c:	1a 9b       	sbis	0x03, 2	; 3
     52e:	02 c0       	rjmp	.+4      	; 0x534 <ButtonPress+0x106>
     530:	18 99       	sbic	0x03, 0	; 3
     532:	20 c0       	rjmp	.+64     	; 0x574 <ButtonPress+0x146>
		{
			if(lives - 1 > -1)
     534:	20 91 00 01 	lds	r18, 0x0100
     538:	82 2f       	mov	r24, r18
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	99 23       	and	r25, r25
     540:	24 f0       	brlt	.+8      	; 0x54a <ButtonPress+0x11c>
			{
				lives--;
     542:	21 50       	subi	r18, 0x01	; 1
     544:	20 93 00 01 	sts	0x0100, r18
     548:	03 c0       	rjmp	.+6      	; 0x550 <ButtonPress+0x122>
			}
			else
			{
				global_g = 20;
     54a:	84 e1       	ldi	r24, 0x14	; 20
     54c:	80 93 06 01 	sts	0x0106, r24
			}
			Press_States = Error;
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	80 93 17 01 	sts	0x0117, r24
     556:	1e c0       	rjmp	.+60     	; 0x594 <ButtonPress+0x166>
		}
		break;
		case Press4:
		if(~PINB & 0x10)
     558:	1c 99       	sbic	0x03, 4	; 3
     55a:	38 c0       	rjmp	.+112    	; 0x5cc <ButtonPress+0x19e>
		{
			Press_States = Off;	
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	80 93 17 01 	sts	0x0117, r24
     562:	3b c0       	rjmp	.+118    	; 0x5da <ButtonPress+0x1ac>
		}
		break;
		case Error:
		if(~PINB & 0x01)
     564:	18 99       	sbic	0x03, 0	; 3
     566:	16 c0       	rjmp	.+44     	; 0x594 <ButtonPress+0x166>
		{
			while(~PINB & 0x01){}
     568:	18 9b       	sbis	0x03, 0	; 3
     56a:	fe cf       	rjmp	.-4      	; 0x568 <ButtonPress+0x13a>
			Press_States = Press1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 17 01 	sts	0x0117, r24
     572:	17 c0       	rjmp	.+46     	; 0x5a2 <ButtonPress+0x174>
		}
		break;
	}
	switch(Press_States)
     574:	80 91 17 01 	lds	r24, 0x0117
     578:	83 30       	cpi	r24, 0x03	; 3
     57a:	09 f1       	breq	.+66     	; 0x5be <ButtonPress+0x190>
     57c:	28 f4       	brcc	.+10     	; 0x588 <ButtonPress+0x15a>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	81 f0       	breq	.+32     	; 0x5a2 <ButtonPress+0x174>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	a9 f0       	breq	.+42     	; 0x5b0 <ButtonPress+0x182>
     586:	08 95       	ret
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	21 f0       	breq	.+8      	; 0x594 <ButtonPress+0x166>
     58c:	f8 f0       	brcs	.+62     	; 0x5cc <ButtonPress+0x19e>
     58e:	86 30       	cpi	r24, 0x06	; 6
     590:	21 f1       	breq	.+72     	; 0x5da <ButtonPress+0x1ac>
     592:	08 95       	ret
	{
		case Error:
		PORTA = 0x10;
     594:	80 e1       	ldi	r24, 0x10	; 16
     596:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     598:	80 91 00 01 	lds	r24, 0x0100
     59c:	d3 de       	rcall	.-602    	; 0x344 <simon_SevenSeg>
     59e:	b5 ce       	rjmp	.-662    	; 0x30a <transmit_data>
		break;
     5a0:	08 95       	ret
		
		case Press1:
		PORTA = 0x01;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5a6:	80 91 00 01 	lds	r24, 0x0100
     5aa:	cc de       	rcall	.-616    	; 0x344 <simon_SevenSeg>
     5ac:	ae ce       	rjmp	.-676    	; 0x30a <transmit_data>
		break;
     5ae:	08 95       	ret
		
		case Press2:
		PORTA = 0x02;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5b4:	80 91 00 01 	lds	r24, 0x0100
     5b8:	c5 de       	rcall	.-630    	; 0x344 <simon_SevenSeg>
     5ba:	a7 ce       	rjmp	.-690    	; 0x30a <transmit_data>
		break;
     5bc:	08 95       	ret
		
		case Press3:
		PORTA = 0x04;
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5c2:	80 91 00 01 	lds	r24, 0x0100
     5c6:	be de       	rcall	.-644    	; 0x344 <simon_SevenSeg>
     5c8:	a0 ce       	rjmp	.-704    	; 0x30a <transmit_data>
		break;
     5ca:	08 95       	ret
		
		case Press4:
		PORTA = 0x08;
     5cc:	88 e0       	ldi	r24, 0x08	; 8
     5ce:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     5d0:	80 91 00 01 	lds	r24, 0x0100
     5d4:	b7 de       	rcall	.-658    	; 0x344 <simon_SevenSeg>
     5d6:	99 ce       	rjmp	.-718    	; 0x30a <transmit_data>
		break;
     5d8:	08 95       	ret
		case Off:
		PORTA = 0x00;
     5da:	12 b8       	out	0x02, r1	; 2
		transmit_data(simon_SevenSeg(lives));
     5dc:	80 91 00 01 	lds	r24, 0x0100
     5e0:	b1 de       	rcall	.-670    	; 0x344 <simon_SevenSeg>
     5e2:	93 de       	rcall	.-730    	; 0x30a <transmit_data>
		global_g = 2;
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	80 93 06 01 	sts	0x0106, r24
     5ea:	08 95       	ret

000005ec <TickFct_Machine2>:
}

enum SM2_State {SM2_off, SM2_on1, SM2_on2, SM2_on3, SM2_on4, SM2_on5, SM2_on6} SM2_States;
void TickFct_Machine2()
{
	switch(SM2_States)
     5ec:	80 91 11 01 	lds	r24, 0x0111
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	87 30       	cpi	r24, 0x07	; 7
     5f4:	91 05       	cpc	r25, r1
     5f6:	78 f5       	brcc	.+94     	; 0x656 <TickFct_Machine2+0x6a>
     5f8:	fc 01       	movw	r30, r24
     5fa:	ea 5b       	subi	r30, 0xBA	; 186
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__tablejump2__>
	{
		case SM2_off:
		if(global_g == 2)
     602:	80 91 06 01 	lds	r24, 0x0106
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	89 f5       	brne	.+98     	; 0x66c <TickFct_Machine2+0x80>
		{
			if(~PINB & 0x01)
     60a:	18 99       	sbic	0x03, 0	; 3
     60c:	03 c0       	rjmp	.+6      	; 0x614 <TickFct_Machine2+0x28>
			{
				SM2_States = SM2_on1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 11 01 	sts	0x0111, r24
			}
			while(!(~PINB & 0x01))
     614:	18 9b       	sbis	0x03, 0	; 3
     616:	1f c0       	rjmp	.+62     	; 0x656 <TickFct_Machine2+0x6a>
			{
				SM2_States = SM2_off;
     618:	10 92 11 01 	sts	0x0111, r1
		{
			if(~PINB & 0x01)
			{
				SM2_States = SM2_on1;
			}
			while(!(~PINB & 0x01))
     61c:	18 99       	sbic	0x03, 0	; 3
     61e:	fc cf       	rjmp	.-8      	; 0x618 <TickFct_Machine2+0x2c>
     620:	25 c0       	rjmp	.+74     	; 0x66c <TickFct_Machine2+0x80>
		{
			SM2_States = SM2_off;
		}
		break;
		case SM2_on1:
		SM2_States = SM2_on2;
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	80 93 11 01 	sts	0x0111, r24
     628:	26 c0       	rjmp	.+76     	; 0x676 <TickFct_Machine2+0x8a>
		break;
		case SM2_on2:
		SM2_States = SM2_on3;
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	80 93 11 01 	sts	0x0111, r24
     630:	25 c0       	rjmp	.+74     	; 0x67c <TickFct_Machine2+0x90>
		break;
		case SM2_on3:
		SM2_States = SM2_on4;
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	80 93 11 01 	sts	0x0111, r24
     638:	24 c0       	rjmp	.+72     	; 0x682 <TickFct_Machine2+0x96>
		break;
		case SM2_on4:
		SM2_States = SM2_on5;
     63a:	85 e0       	ldi	r24, 0x05	; 5
     63c:	80 93 11 01 	sts	0x0111, r24
     640:	23 c0       	rjmp	.+70     	; 0x688 <TickFct_Machine2+0x9c>
		break;
		case SM2_on5:
		SM2_States = SM2_on6;
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	80 93 11 01 	sts	0x0111, r24
     648:	22 c0       	rjmp	.+68     	; 0x68e <TickFct_Machine2+0xa2>
		break;
		case SM2_on6:
		global_g = 3;
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	80 93 06 01 	sts	0x0106, r24
		SM2_States = SM2_off;
     650:	10 92 11 01 	sts	0x0111, r1
		break;
     654:	0b c0       	rjmp	.+22     	; 0x66c <TickFct_Machine2+0x80>
	}

	switch(SM2_States)
     656:	80 91 11 01 	lds	r24, 0x0111
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	87 30       	cpi	r24, 0x07	; 7
     65e:	91 05       	cpc	r25, r1
     660:	c0 f4       	brcc	.+48     	; 0x692 <TickFct_Machine2+0xa6>
     662:	fc 01       	movw	r30, r24
     664:	e3 5b       	subi	r30, 0xB3	; 179
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__tablejump2__>
	{
		case SM2_off:
		PORTA = 0x00;
     66c:	12 b8       	out	0x02, r1	; 2
		break;
     66e:	08 95       	ret
		case SM2_on1:
		PORTA = 0x01;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	82 b9       	out	0x02, r24	; 2
		break;
     674:	08 95       	ret
		case SM2_on2:
		PORTA = 0x04;
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	82 b9       	out	0x02, r24	; 2
		break;
     67a:	08 95       	ret
		case SM2_on3:
		PORTA = 0x08;
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	82 b9       	out	0x02, r24	; 2
		break;
     680:	08 95       	ret
		case SM2_on4:
		PORTA = 0x01;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	82 b9       	out	0x02, r24	; 2
		break;
     686:	08 95       	ret
		case SM2_on5:
		PORTA = 0x02;
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	82 b9       	out	0x02, r24	; 2
		break;
     68c:	08 95       	ret
		case SM2_on6:
		PORTA = 0x01;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	82 b9       	out	0x02, r24	; 2
     692:	08 95       	ret

00000694 <ButtonPress2>:
}

enum Press_sec_level{Init2, Press_state1, Press_state2, Press_state3, Press_state4, Press_state5, Press_state6, Error2, Off2} Press_sec_level;
void ButtonPress2()
{
	switch(Press_sec_level)
     694:	80 91 0c 01 	lds	r24, 0x010C
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	87 30       	cpi	r24, 0x07	; 7
     69c:	91 05       	cpc	r25, r1
     69e:	08 f0       	brcs	.+2      	; 0x6a2 <ButtonPress2+0xe>
     6a0:	c5 c0       	rjmp	.+394    	; 0x82c <ButtonPress2+0x198>
     6a2:	fc 01       	movw	r30, r24
     6a4:	ec 5a       	subi	r30, 0xAC	; 172
     6a6:	ff 4f       	sbci	r31, 0xFF	; 255
     6a8:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__tablejump2__>
	{
		case Init2:
		if(~PINB & 0x01)
     6ac:	18 99       	sbic	0x03, 0	; 3
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <ButtonPress2+0x26>
		{
			while(~PINB & 0x01){}
     6b0:	18 9b       	sbis	0x03, 0	; 3
     6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <ButtonPress2+0x1c>
			Press_sec_level = Press_state1;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     6ba:	19 9b       	sbis	0x03, 1	; 3
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <ButtonPress2+0x32>
     6be:	1a 9b       	sbis	0x03, 2	; 3
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <ButtonPress2+0x32>
     6c2:	1b 99       	sbic	0x03, 3	; 3
     6c4:	b6 c0       	rjmp	.+364    	; 0x832 <ButtonPress2+0x19e>
		{
			if(lives - 1 > -1)
     6c6:	20 91 00 01 	lds	r18, 0x0100
     6ca:	82 2f       	mov	r24, r18
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	99 23       	and	r25, r25
     6d2:	24 f0       	brlt	.+8      	; 0x6dc <ButtonPress2+0x48>
			{
				lives--;
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	20 93 00 01 	sts	0x0100, r18
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <ButtonPress2+0x4e>
			}
			else
			{
				global_g = 20;
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     6e2:	87 e0       	ldi	r24, 0x07	; 7
     6e4:	80 93 0c 01 	sts	0x010C, r24
     6e8:	b1 c0       	rjmp	.+354    	; 0x84c <ButtonPress2+0x1b8>
		}
		break;
		case Press_state1:
		if(~PINB & 0x04)
     6ea:	1a 99       	sbic	0x03, 2	; 3
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <ButtonPress2+0x64>
		{
			while(~PINB & 0x04){}
     6ee:	1a 9b       	sbis	0x03, 2	; 3
     6f0:	fe cf       	rjmp	.-4      	; 0x6ee <ButtonPress2+0x5a>
			Press_sec_level = Press_state2;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     6f8:	19 9b       	sbis	0x03, 1	; 3
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <ButtonPress2+0x70>
     6fc:	18 9b       	sbis	0x03, 0	; 3
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <ButtonPress2+0x70>
     700:	1b 99       	sbic	0x03, 3	; 3
     702:	97 c0       	rjmp	.+302    	; 0x832 <ButtonPress2+0x19e>
		{
			if(lives - 1 > -1)
     704:	20 91 00 01 	lds	r18, 0x0100
     708:	82 2f       	mov	r24, r18
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	99 23       	and	r25, r25
     710:	24 f0       	brlt	.+8      	; 0x71a <ButtonPress2+0x86>
			{
				lives--;
     712:	21 50       	subi	r18, 0x01	; 1
     714:	20 93 00 01 	sts	0x0100, r18
     718:	03 c0       	rjmp	.+6      	; 0x720 <ButtonPress2+0x8c>
			}
			else
			{
				global_g = 20;
     71a:	84 e1       	ldi	r24, 0x14	; 20
     71c:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     720:	87 e0       	ldi	r24, 0x07	; 7
     722:	80 93 0c 01 	sts	0x010C, r24
     726:	92 c0       	rjmp	.+292    	; 0x84c <ButtonPress2+0x1b8>
		}
		break;

		case Press_state2:
		if(~PINB & 0x08)
     728:	1b 99       	sbic	0x03, 3	; 3
     72a:	05 c0       	rjmp	.+10     	; 0x736 <ButtonPress2+0xa2>
		{
			while(~PINB & 0x08){}
     72c:	1b 9b       	sbis	0x03, 3	; 3
     72e:	fe cf       	rjmp	.-4      	; 0x72c <ButtonPress2+0x98>
			Press_sec_level = Press_state3;
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     736:	19 9b       	sbis	0x03, 1	; 3
     738:	04 c0       	rjmp	.+8      	; 0x742 <ButtonPress2+0xae>
     73a:	1a 9b       	sbis	0x03, 2	; 3
     73c:	02 c0       	rjmp	.+4      	; 0x742 <ButtonPress2+0xae>
     73e:	18 99       	sbic	0x03, 0	; 3
     740:	78 c0       	rjmp	.+240    	; 0x832 <ButtonPress2+0x19e>
		{
			if(lives - 1 > -1)
     742:	20 91 00 01 	lds	r18, 0x0100
     746:	82 2f       	mov	r24, r18
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	99 23       	and	r25, r25
     74e:	24 f0       	brlt	.+8      	; 0x758 <ButtonPress2+0xc4>
			{
				lives--;
     750:	21 50       	subi	r18, 0x01	; 1
     752:	20 93 00 01 	sts	0x0100, r18
     756:	03 c0       	rjmp	.+6      	; 0x75e <ButtonPress2+0xca>
			}
			else
			{
				global_g = 20;
     758:	84 e1       	ldi	r24, 0x14	; 20
     75a:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     75e:	87 e0       	ldi	r24, 0x07	; 7
     760:	80 93 0c 01 	sts	0x010C, r24
     764:	73 c0       	rjmp	.+230    	; 0x84c <ButtonPress2+0x1b8>
		}
		break;

		case Press_state3:
		if(~PINB & 0x01)
     766:	18 99       	sbic	0x03, 0	; 3
     768:	05 c0       	rjmp	.+10     	; 0x774 <ButtonPress2+0xe0>
		{
			while(~PINB & 0x01){}
     76a:	18 9b       	sbis	0x03, 0	; 3
     76c:	fe cf       	rjmp	.-4      	; 0x76a <ButtonPress2+0xd6>
			Press_sec_level = Press_state4;
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     774:	19 9b       	sbis	0x03, 1	; 3
     776:	04 c0       	rjmp	.+8      	; 0x780 <ButtonPress2+0xec>
     778:	1a 9b       	sbis	0x03, 2	; 3
     77a:	02 c0       	rjmp	.+4      	; 0x780 <ButtonPress2+0xec>
     77c:	1b 99       	sbic	0x03, 3	; 3
     77e:	59 c0       	rjmp	.+178    	; 0x832 <ButtonPress2+0x19e>
		{
			if(lives - 1 > -1)
     780:	20 91 00 01 	lds	r18, 0x0100
     784:	82 2f       	mov	r24, r18
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	99 23       	and	r25, r25
     78c:	24 f0       	brlt	.+8      	; 0x796 <ButtonPress2+0x102>
			{
				lives--;
     78e:	21 50       	subi	r18, 0x01	; 1
     790:	20 93 00 01 	sts	0x0100, r18
     794:	03 c0       	rjmp	.+6      	; 0x79c <ButtonPress2+0x108>
			}
			else
			{
				global_g = 20;
     796:	84 e1       	ldi	r24, 0x14	; 20
     798:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     79c:	87 e0       	ldi	r24, 0x07	; 7
     79e:	80 93 0c 01 	sts	0x010C, r24
     7a2:	54 c0       	rjmp	.+168    	; 0x84c <ButtonPress2+0x1b8>
		}
		break;

		case Press_state4:
		if(~PINB & 0x02)
     7a4:	19 99       	sbic	0x03, 1	; 3
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <ButtonPress2+0x11e>
		{
			while(~PINB & 0x02){}
     7a8:	19 9b       	sbis	0x03, 1	; 3
     7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <ButtonPress2+0x114>
			Press_sec_level = Press_state5;
     7ac:	85 e0       	ldi	r24, 0x05	; 5
     7ae:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     7b2:	18 9b       	sbis	0x03, 0	; 3
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <ButtonPress2+0x12a>
     7b6:	1a 9b       	sbis	0x03, 2	; 3
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <ButtonPress2+0x12a>
     7ba:	1b 99       	sbic	0x03, 3	; 3
     7bc:	3a c0       	rjmp	.+116    	; 0x832 <ButtonPress2+0x19e>
		{
			if(lives - 1 > -1)
     7be:	20 91 00 01 	lds	r18, 0x0100
     7c2:	82 2f       	mov	r24, r18
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	99 23       	and	r25, r25
     7ca:	24 f0       	brlt	.+8      	; 0x7d4 <ButtonPress2+0x140>
			{
				lives--;
     7cc:	21 50       	subi	r18, 0x01	; 1
     7ce:	20 93 00 01 	sts	0x0100, r18
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <ButtonPress2+0x146>
			}
			else
			{
				global_g = 20;
     7d4:	84 e1       	ldi	r24, 0x14	; 20
     7d6:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     7da:	87 e0       	ldi	r24, 0x07	; 7
     7dc:	80 93 0c 01 	sts	0x010C, r24
     7e0:	35 c0       	rjmp	.+106    	; 0x84c <ButtonPress2+0x1b8>
		}
		break;

		case Press_state5:
		if(~PINB & 0x01)
     7e2:	18 99       	sbic	0x03, 0	; 3
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <ButtonPress2+0x15c>
		{
			while(~PINB & 0x01){}
     7e6:	18 9b       	sbis	0x03, 0	; 3
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <ButtonPress2+0x152>
			Press_sec_level = Press_state6;
     7ea:	86 e0       	ldi	r24, 0x06	; 6
     7ec:	80 93 0c 01 	sts	0x010C, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     7f0:	19 9b       	sbis	0x03, 1	; 3
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <ButtonPress2+0x168>
     7f4:	1a 9b       	sbis	0x03, 2	; 3
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <ButtonPress2+0x168>
     7f8:	1b 99       	sbic	0x03, 3	; 3
     7fa:	1b c0       	rjmp	.+54     	; 0x832 <ButtonPress2+0x19e>
		{
			if(lives - 1 > -1)
     7fc:	20 91 00 01 	lds	r18, 0x0100
     800:	82 2f       	mov	r24, r18
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	99 23       	and	r25, r25
     808:	24 f0       	brlt	.+8      	; 0x812 <ButtonPress2+0x17e>
			{
				lives--;
     80a:	21 50       	subi	r18, 0x01	; 1
     80c:	20 93 00 01 	sts	0x0100, r18
     810:	03 c0       	rjmp	.+6      	; 0x818 <ButtonPress2+0x184>
			}
			else
			{
				global_g = 20;
     812:	84 e1       	ldi	r24, 0x14	; 20
     814:	80 93 06 01 	sts	0x0106, r24
			}
			Press_sec_level = Error2;
     818:	87 e0       	ldi	r24, 0x07	; 7
     81a:	80 93 0c 01 	sts	0x010C, r24
     81e:	16 c0       	rjmp	.+44     	; 0x84c <ButtonPress2+0x1b8>
		}
		break;

		case Press_state6:
		if(~PINB & 0x10)
     820:	1c 99       	sbic	0x03, 4	; 3
     822:	3e c0       	rjmp	.+124    	; 0x8a0 <ButtonPress2+0x20c>
		{
			Press_sec_level = Off2;
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	80 93 0c 01 	sts	0x010C, r24
     82a:	41 c0       	rjmp	.+130    	; 0x8ae <ButtonPress2+0x21a>
		}
		break;
		default:
		Press_sec_level = Init2;
     82c:	10 92 0c 01 	sts	0x010C, r1
     830:	08 95       	ret
	}
	switch(Press_sec_level)
     832:	80 91 0c 01 	lds	r24, 0x010C
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	e8 30       	cpi	r30, 0x08	; 8
     83e:	f1 05       	cpc	r31, r1
     840:	08 f0       	brcs	.+2      	; 0x844 <ButtonPress2+0x1b0>
     842:	3d c0       	rjmp	.+122    	; 0x8be <ButtonPress2+0x22a>
     844:	e5 5a       	subi	r30, 0xA5	; 165
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__tablejump2__>
	{
		case Error2:
		PORTA = 0x10;
     84c:	80 e1       	ldi	r24, 0x10	; 16
     84e:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     850:	80 91 00 01 	lds	r24, 0x0100
     854:	77 dd       	rcall	.-1298   	; 0x344 <simon_SevenSeg>
     856:	59 cd       	rjmp	.-1358   	; 0x30a <transmit_data>
		break;
     858:	08 95       	ret

		case Press_state1:
		PORTA = 0x01;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     85e:	80 91 00 01 	lds	r24, 0x0100
     862:	70 dd       	rcall	.-1312   	; 0x344 <simon_SevenSeg>
     864:	52 cd       	rjmp	.-1372   	; 0x30a <transmit_data>
		break;
     866:	08 95       	ret

		case Press_state2:
		PORTA = 0x04;
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     86c:	80 91 00 01 	lds	r24, 0x0100
     870:	69 dd       	rcall	.-1326   	; 0x344 <simon_SevenSeg>
     872:	4b cd       	rjmp	.-1386   	; 0x30a <transmit_data>
		break;
     874:	08 95       	ret

		case Press_state3:
		PORTA = 0x08;
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     87a:	80 91 00 01 	lds	r24, 0x0100
     87e:	62 dd       	rcall	.-1340   	; 0x344 <simon_SevenSeg>
     880:	44 cd       	rjmp	.-1400   	; 0x30a <transmit_data>
		break;
     882:	08 95       	ret

		case Press_state4:
		PORTA = 0x01;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     888:	80 91 00 01 	lds	r24, 0x0100
     88c:	5b dd       	rcall	.-1354   	; 0x344 <simon_SevenSeg>
     88e:	3d cd       	rjmp	.-1414   	; 0x30a <transmit_data>
		break;
     890:	08 95       	ret

		case Press_state5:
		PORTA = 0x02;
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     896:	80 91 00 01 	lds	r24, 0x0100
     89a:	54 dd       	rcall	.-1368   	; 0x344 <simon_SevenSeg>
     89c:	36 cd       	rjmp	.-1428   	; 0x30a <transmit_data>
		break;
     89e:	08 95       	ret

		case Press_state6:
		PORTA = 0x01;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	82 b9       	out	0x02, r24	; 2
		transmit_data(simon_SevenSeg(lives));
     8a4:	80 91 00 01 	lds	r24, 0x0100
     8a8:	4d dd       	rcall	.-1382   	; 0x344 <simon_SevenSeg>
     8aa:	2f cd       	rjmp	.-1442   	; 0x30a <transmit_data>
		break;
     8ac:	08 95       	ret

		case Off2:
		PORTA = 0x00;
     8ae:	12 b8       	out	0x02, r1	; 2
		transmit_data(simon_SevenSeg(lives));
     8b0:	80 91 00 01 	lds	r24, 0x0100
     8b4:	47 dd       	rcall	.-1394   	; 0x344 <simon_SevenSeg>
     8b6:	29 dd       	rcall	.-1454   	; 0x30a <transmit_data>
		global_g = 4;
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	80 93 06 01 	sts	0x0106, r24
     8be:	08 95       	ret

000008c0 <TickFct_Machine3>:
}

enum SM3_States {SM3_off, SM3_on1, SM3_on2, SM3_on3, SM3_on4, SM3_on5, SM3_on6, SM3_on7, SM3_on8, SM3_on9} SM3_State;
void TickFct_Machine3()
{
	switch(SM3_State)
     8c0:	20 91 0d 01 	lds	r18, 0x010D
     8c4:	82 2f       	mov	r24, r18
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	8a 30       	cpi	r24, 0x0A	; 10
     8ca:	91 05       	cpc	r25, r1
     8cc:	a0 f5       	brcc	.+104    	; 0x936 <TickFct_Machine3+0x76>
     8ce:	fc 01       	movw	r30, r24
     8d0:	ed 59       	subi	r30, 0x9D	; 157
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__tablejump2__>
	{
		case SM3_off:
		if(global_g == 4)
     8d8:	80 91 06 01 	lds	r24, 0x0106
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	a9 f5       	brne	.+106    	; 0x94a <TickFct_Machine3+0x8a>
		{
			if(~PINB & 0x01)
     8e0:	18 99       	sbic	0x03, 0	; 3
     8e2:	33 c0       	rjmp	.+102    	; 0x94a <TickFct_Machine3+0x8a>
			{
				while(~PINB & 0x01){}
     8e4:	18 9b       	sbis	0x03, 0	; 3
     8e6:	fe cf       	rjmp	.-4      	; 0x8e4 <TickFct_Machine3+0x24>
				SM3_State = SM3_on1;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 0d 01 	sts	0x010D, r24
     8ee:	2f c0       	rjmp	.+94     	; 0x94e <TickFct_Machine3+0x8e>
				SM3_State = SM3_off;
			}	
		}
		break;
		case SM3_on1:
		SM3_State = SM3_on2;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	80 93 0d 01 	sts	0x010D, r24
     8f6:	2e c0       	rjmp	.+92     	; 0x954 <TickFct_Machine3+0x94>
		break;
		case SM3_on2:
		SM3_State = SM3_on3;
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	80 93 0d 01 	sts	0x010D, r24
     8fe:	2d c0       	rjmp	.+90     	; 0x95a <TickFct_Machine3+0x9a>
		break;
		case SM3_on3:
		SM3_State = SM3_on4;
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	80 93 0d 01 	sts	0x010D, r24
     906:	2c c0       	rjmp	.+88     	; 0x960 <TickFct_Machine3+0xa0>
		break;
		case SM3_on4:
		SM3_State = SM3_on5;
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	80 93 0d 01 	sts	0x010D, r24
     90e:	2b c0       	rjmp	.+86     	; 0x966 <TickFct_Machine3+0xa6>
		break;
		case SM3_on5:
		SM3_State = SM3_on6;
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	80 93 0d 01 	sts	0x010D, r24
     916:	2a c0       	rjmp	.+84     	; 0x96c <TickFct_Machine3+0xac>
		break;
		case SM3_on6:
		SM3_State = SM3_on7;
     918:	87 e0       	ldi	r24, 0x07	; 7
     91a:	80 93 0d 01 	sts	0x010D, r24
     91e:	29 c0       	rjmp	.+82     	; 0x972 <TickFct_Machine3+0xb2>
		break;
		case SM3_on7:
		SM3_State = SM3_on8;
     920:	88 e0       	ldi	r24, 0x08	; 8
     922:	80 93 0d 01 	sts	0x010D, r24
     926:	28 c0       	rjmp	.+80     	; 0x978 <TickFct_Machine3+0xb8>
		break;
		case SM3_on8:
		SM3_State = SM3_on9;
     928:	89 e0       	ldi	r24, 0x09	; 9
     92a:	80 93 0d 01 	sts	0x010D, r24
     92e:	27 c0       	rjmp	.+78     	; 0x97e <TickFct_Machine3+0xbe>
		break;
		case SM3_on9:
		SM3_State = SM3_off;
     930:	10 92 0d 01 	sts	0x010D, r1
     934:	0a c0       	rjmp	.+20     	; 0x94a <TickFct_Machine3+0x8a>
	}
	switch(SM3_State)
     936:	82 2f       	mov	r24, r18
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	8a 30       	cpi	r24, 0x0A	; 10
     93c:	91 05       	cpc	r25, r1
     93e:	20 f5       	brcc	.+72     	; 0x988 <TickFct_Machine3+0xc8>
     940:	fc 01       	movw	r30, r24
     942:	e3 59       	subi	r30, 0x93	; 147
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__tablejump2__>
	{
		case SM3_off:
		PORTA = 0x00;
     94a:	12 b8       	out	0x02, r1	; 2
		break;
     94c:	08 95       	ret
		case SM3_on1:
		PORTA = 0x02;
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	82 b9       	out	0x02, r24	; 2
		break;
     952:	08 95       	ret
		case SM3_on2:
		PORTA = 0x04;
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	82 b9       	out	0x02, r24	; 2
		break;
     958:	08 95       	ret
		case SM3_on3:
		PORTA = 0x01;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	82 b9       	out	0x02, r24	; 2
		break;
     95e:	08 95       	ret
		case SM3_on4:
		PORTA = 0x08;
     960:	88 e0       	ldi	r24, 0x08	; 8
     962:	82 b9       	out	0x02, r24	; 2
		break;
     964:	08 95       	ret
		case SM3_on5:
		PORTA = 0x02;
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	82 b9       	out	0x02, r24	; 2
		break;
     96a:	08 95       	ret
		case SM3_on6:
		PORTA = 0x04;
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	82 b9       	out	0x02, r24	; 2
		break;
     970:	08 95       	ret
		case SM3_on7:
		PORTA = 0x01;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	82 b9       	out	0x02, r24	; 2
		break;
     976:	08 95       	ret
		case SM3_on8:
		PORTA = 0x02;
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	82 b9       	out	0x02, r24	; 2
		break;
     97c:	08 95       	ret
		case SM3_on9:
		PORTA = 0x08;
     97e:	88 e0       	ldi	r24, 0x08	; 8
     980:	82 b9       	out	0x02, r24	; 2
		global_g = 5;
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	80 93 06 01 	sts	0x0106, r24
     988:	08 95       	ret

0000098a <ButtonPress3>:
}

enum Press_third_level{Init3, Press3_state1, Press3_state2, Press3_state3, Press3_state4, Press3_state5, Press3_state6, Press3_state7, Press3_state8, Press3_state9, Error3, Off3} Press_third_level;
void ButtonPress3()
{
	switch(Press_third_level)
     98a:	80 91 13 01 	lds	r24, 0x0113
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	8b 30       	cpi	r24, 0x0B	; 11
     992:	91 05       	cpc	r25, r1
     994:	08 f0       	brcs	.+2      	; 0x998 <ButtonPress3+0xe>
     996:	30 c1       	rjmp	.+608    	; 0xbf8 <ButtonPress3+0x26e>
     998:	fc 01       	movw	r30, r24
     99a:	e9 58       	subi	r30, 0x89	; 137
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__tablejump2__>
	{
		case Init3:
		if(global_g == 5)
     9a2:	80 91 06 01 	lds	r24, 0x0106
     9a6:	85 30       	cpi	r24, 0x05	; 5
     9a8:	09 f0       	breq	.+2      	; 0x9ac <ButtonPress3+0x22>
     9aa:	80 c1       	rjmp	.+768    	; 0xcac <ButtonPress3+0x322>
		{
			PORTA = 0x00;
     9ac:	12 b8       	out	0x02, r1	; 2
			if(~PINB & 0x02)
     9ae:	19 99       	sbic	0x03, 1	; 3
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <ButtonPress3+0x32>
			{
				while(~PINB & 0x02){}
     9b2:	19 9b       	sbis	0x03, 1	; 3
     9b4:	fe cf       	rjmp	.-4      	; 0x9b2 <ButtonPress3+0x28>
				Press_third_level = Press3_state1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 13 01 	sts	0x0113, r24
			}
			if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     9bc:	18 9b       	sbis	0x03, 0	; 3
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <ButtonPress3+0x3e>
     9c0:	1a 9b       	sbis	0x03, 2	; 3
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <ButtonPress3+0x3e>
     9c4:	1b 99       	sbic	0x03, 3	; 3
     9c6:	18 c1       	rjmp	.+560    	; 0xbf8 <ButtonPress3+0x26e>
			{
				if(lives - 1 > -1)
     9c8:	20 91 00 01 	lds	r18, 0x0100
     9cc:	82 2f       	mov	r24, r18
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	99 23       	and	r25, r25
     9d4:	24 f0       	brlt	.+8      	; 0x9de <ButtonPress3+0x54>
				{
					lives--;
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	20 93 00 01 	sts	0x0100, r18
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <ButtonPress3+0x5a>
				}
				else
				{
					global_g = 20;
     9de:	84 e1       	ldi	r24, 0x14	; 20
     9e0:	80 93 06 01 	sts	0x0106, r24
				}
				Press_third_level = Error3;
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	80 93 13 01 	sts	0x0113, r24
     9ea:	12 c1       	rjmp	.+548    	; 0xc10 <ButtonPress3+0x286>
			}
		}
		break;
		case Error3:
		if(~PINB & 0x02)
     9ec:	19 99       	sbic	0x03, 1	; 3
     9ee:	10 c1       	rjmp	.+544    	; 0xc10 <ButtonPress3+0x286>
		{
			while(~PINB & 0x02){}
     9f0:	19 9b       	sbis	0x03, 1	; 3
     9f2:	fe cf       	rjmp	.-4      	; 0x9f0 <ButtonPress3+0x66>
			Press_third_level = Press3_state1;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 13 01 	sts	0x0113, r24
     9fa:	11 c1       	rjmp	.+546    	; 0xc1e <ButtonPress3+0x294>
		}
		break;
		case Press3_state1:
		if(~PINB & 0x04)
     9fc:	1a 99       	sbic	0x03, 2	; 3
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <ButtonPress3+0x80>
		{
			
			while(~PINB & 0x04){}
     a00:	1a 9b       	sbis	0x03, 2	; 3
     a02:	fe cf       	rjmp	.-4      	; 0xa00 <ButtonPress3+0x76>
			Press_third_level = Press3_state2;
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     a0a:	19 9b       	sbis	0x03, 1	; 3
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <ButtonPress3+0x8c>
     a0e:	18 9b       	sbis	0x03, 0	; 3
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <ButtonPress3+0x8c>
     a12:	1b 99       	sbic	0x03, 3	; 3
     a14:	f1 c0       	rjmp	.+482    	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     a16:	20 91 00 01 	lds	r18, 0x0100
     a1a:	82 2f       	mov	r24, r18
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	99 23       	and	r25, r25
     a22:	24 f0       	brlt	.+8      	; 0xa2c <ButtonPress3+0xa2>
			{
				lives--;
     a24:	21 50       	subi	r18, 0x01	; 1
     a26:	20 93 00 01 	sts	0x0100, r18
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <ButtonPress3+0xa8>
			}
			else
			{
				global_g = 20;
     a2c:	84 e1       	ldi	r24, 0x14	; 20
     a2e:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     a32:	8a e0       	ldi	r24, 0x0A	; 10
     a34:	80 93 13 01 	sts	0x0113, r24
     a38:	eb c0       	rjmp	.+470    	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state2:
		if(~PINB & 0x01)
     a3a:	18 99       	sbic	0x03, 0	; 3
     a3c:	05 c0       	rjmp	.+10     	; 0xa48 <ButtonPress3+0xbe>
		{
			while(~PINB & 0x01){}
     a3e:	18 9b       	sbis	0x03, 0	; 3
     a40:	fe cf       	rjmp	.-4      	; 0xa3e <ButtonPress3+0xb4>
			Press_third_level = Press3_state3;
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     a48:	19 9b       	sbis	0x03, 1	; 3
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <ButtonPress3+0xca>
     a4c:	1a 9b       	sbis	0x03, 2	; 3
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <ButtonPress3+0xca>
     a50:	1b 99       	sbic	0x03, 3	; 3
     a52:	d2 c0       	rjmp	.+420    	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     a54:	20 91 00 01 	lds	r18, 0x0100
     a58:	82 2f       	mov	r24, r18
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	99 23       	and	r25, r25
     a60:	24 f0       	brlt	.+8      	; 0xa6a <ButtonPress3+0xe0>
			{
				lives--;
     a62:	21 50       	subi	r18, 0x01	; 1
     a64:	20 93 00 01 	sts	0x0100, r18
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <ButtonPress3+0xe6>
			}
			else
			{
				global_g = 20;
     a6a:	84 e1       	ldi	r24, 0x14	; 20
     a6c:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	80 93 13 01 	sts	0x0113, r24
     a76:	cc c0       	rjmp	.+408    	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state3:
		if(~PINB & 0x08)
     a78:	1b 99       	sbic	0x03, 3	; 3
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <ButtonPress3+0xfc>
		{
			while(~PINB & 0x08){}
     a7c:	1b 9b       	sbis	0x03, 3	; 3
     a7e:	fe cf       	rjmp	.-4      	; 0xa7c <ButtonPress3+0xf2>
			Press_third_level = Press3_state4;
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     a86:	19 9b       	sbis	0x03, 1	; 3
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <ButtonPress3+0x108>
     a8a:	1a 9b       	sbis	0x03, 2	; 3
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <ButtonPress3+0x108>
     a8e:	18 99       	sbic	0x03, 0	; 3
     a90:	b3 c0       	rjmp	.+358    	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     a92:	20 91 00 01 	lds	r18, 0x0100
     a96:	82 2f       	mov	r24, r18
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	99 23       	and	r25, r25
     a9e:	24 f0       	brlt	.+8      	; 0xaa8 <ButtonPress3+0x11e>
			{
				lives--;
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	20 93 00 01 	sts	0x0100, r18
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <ButtonPress3+0x124>
			}
			else
			{
				global_g = 20;
     aa8:	84 e1       	ldi	r24, 0x14	; 20
     aaa:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     aae:	8a e0       	ldi	r24, 0x0A	; 10
     ab0:	80 93 13 01 	sts	0x0113, r24
     ab4:	ad c0       	rjmp	.+346    	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state4:
		if(~PINB & 0x02)
     ab6:	19 99       	sbic	0x03, 1	; 3
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <ButtonPress3+0x13a>
		{
			while(~PINB & 0x02){}
     aba:	19 9b       	sbis	0x03, 1	; 3
     abc:	fe cf       	rjmp	.-4      	; 0xaba <ButtonPress3+0x130>
			Press_third_level = Press3_state5;
     abe:	85 e0       	ldi	r24, 0x05	; 5
     ac0:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     ac4:	18 9b       	sbis	0x03, 0	; 3
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <ButtonPress3+0x146>
     ac8:	1a 9b       	sbis	0x03, 2	; 3
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <ButtonPress3+0x146>
     acc:	1b 99       	sbic	0x03, 3	; 3
     ace:	94 c0       	rjmp	.+296    	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     ad0:	20 91 00 01 	lds	r18, 0x0100
     ad4:	82 2f       	mov	r24, r18
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	99 23       	and	r25, r25
     adc:	24 f0       	brlt	.+8      	; 0xae6 <ButtonPress3+0x15c>
			{
				lives--;
     ade:	21 50       	subi	r18, 0x01	; 1
     ae0:	20 93 00 01 	sts	0x0100, r18
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <ButtonPress3+0x162>
			}
			else
			{
				global_g = 20;
     ae6:	84 e1       	ldi	r24, 0x14	; 20
     ae8:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     aec:	8a e0       	ldi	r24, 0x0A	; 10
     aee:	80 93 13 01 	sts	0x0113, r24
     af2:	8e c0       	rjmp	.+284    	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state5:
		if(~PINB & 0x04)
     af4:	1a 99       	sbic	0x03, 2	; 3
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <ButtonPress3+0x178>
		{
			
			while(~PINB & 0x04){}
     af8:	1a 9b       	sbis	0x03, 2	; 3
     afa:	fe cf       	rjmp	.-4      	; 0xaf8 <ButtonPress3+0x16e>
			Press_third_level = Press3_state6;
     afc:	86 e0       	ldi	r24, 0x06	; 6
     afe:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
     b02:	19 9b       	sbis	0x03, 1	; 3
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <ButtonPress3+0x184>
     b06:	18 9b       	sbis	0x03, 0	; 3
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <ButtonPress3+0x184>
     b0a:	1b 99       	sbic	0x03, 3	; 3
     b0c:	75 c0       	rjmp	.+234    	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     b0e:	20 91 00 01 	lds	r18, 0x0100
     b12:	82 2f       	mov	r24, r18
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	99 23       	and	r25, r25
     b1a:	24 f0       	brlt	.+8      	; 0xb24 <ButtonPress3+0x19a>
			{
				lives--;
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	20 93 00 01 	sts	0x0100, r18
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <ButtonPress3+0x1a0>
			}
			else
			{
				global_g = 20;
     b24:	84 e1       	ldi	r24, 0x14	; 20
     b26:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	80 93 13 01 	sts	0x0113, r24
     b30:	6f c0       	rjmp	.+222    	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state6:
		if(~PINB & 0x01)
     b32:	18 99       	sbic	0x03, 0	; 3
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <ButtonPress3+0x1b6>
		{
			while(~PINB & 0x01){}
     b36:	18 9b       	sbis	0x03, 0	; 3
     b38:	fe cf       	rjmp	.-4      	; 0xb36 <ButtonPress3+0x1ac>
			Press_third_level = Press3_state7;
     b3a:	87 e0       	ldi	r24, 0x07	; 7
     b3c:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     b40:	19 9b       	sbis	0x03, 1	; 3
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <ButtonPress3+0x1c2>
     b44:	1a 9b       	sbis	0x03, 2	; 3
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <ButtonPress3+0x1c2>
     b48:	1b 99       	sbic	0x03, 3	; 3
     b4a:	56 c0       	rjmp	.+172    	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     b4c:	20 91 00 01 	lds	r18, 0x0100
     b50:	82 2f       	mov	r24, r18
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	99 23       	and	r25, r25
     b58:	24 f0       	brlt	.+8      	; 0xb62 <ButtonPress3+0x1d8>
			{
				lives--;
     b5a:	21 50       	subi	r18, 0x01	; 1
     b5c:	20 93 00 01 	sts	0x0100, r18
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <ButtonPress3+0x1de>
			}
			else
			{
				global_g = 20;
     b62:	84 e1       	ldi	r24, 0x14	; 20
     b64:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     b68:	8a e0       	ldi	r24, 0x0A	; 10
     b6a:	80 93 13 01 	sts	0x0113, r24
     b6e:	50 c0       	rjmp	.+160    	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state7:
		if(~PINB & 0x02)
     b70:	19 99       	sbic	0x03, 1	; 3
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <ButtonPress3+0x1f4>
		{
			while(~PINB & 0x02){}
     b74:	19 9b       	sbis	0x03, 1	; 3
     b76:	fe cf       	rjmp	.-4      	; 0xb74 <ButtonPress3+0x1ea>
			Press_third_level = Press3_state8;
     b78:	88 e0       	ldi	r24, 0x08	; 8
     b7a:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     b7e:	18 9b       	sbis	0x03, 0	; 3
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <ButtonPress3+0x200>
     b82:	1a 9b       	sbis	0x03, 2	; 3
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <ButtonPress3+0x200>
     b86:	1b 99       	sbic	0x03, 3	; 3
     b88:	37 c0       	rjmp	.+110    	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     b8a:	20 91 00 01 	lds	r18, 0x0100
     b8e:	82 2f       	mov	r24, r18
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	99 23       	and	r25, r25
     b96:	24 f0       	brlt	.+8      	; 0xba0 <ButtonPress3+0x216>
			{
				lives--;
     b98:	21 50       	subi	r18, 0x01	; 1
     b9a:	20 93 00 01 	sts	0x0100, r18
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <ButtonPress3+0x21c>
			}
			else
			{
				global_g = 20;
     ba0:	84 e1       	ldi	r24, 0x14	; 20
     ba2:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     ba6:	8a e0       	ldi	r24, 0x0A	; 10
     ba8:	80 93 13 01 	sts	0x0113, r24
     bac:	31 c0       	rjmp	.+98     	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state8:
		if(~PINB & 0x08)
     bae:	1b 99       	sbic	0x03, 3	; 3
     bb0:	05 c0       	rjmp	.+10     	; 0xbbc <ButtonPress3+0x232>
		{
			while(~PINB & 0x08){}
     bb2:	1b 9b       	sbis	0x03, 3	; 3
     bb4:	fe cf       	rjmp	.-4      	; 0xbb2 <ButtonPress3+0x228>
			Press_third_level = Press3_state9;
     bb6:	89 e0       	ldi	r24, 0x09	; 9
     bb8:	80 93 13 01 	sts	0x0113, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     bbc:	19 9b       	sbis	0x03, 1	; 3
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <ButtonPress3+0x23e>
     bc0:	1a 9b       	sbis	0x03, 2	; 3
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <ButtonPress3+0x23e>
     bc4:	18 99       	sbic	0x03, 0	; 3
     bc6:	18 c0       	rjmp	.+48     	; 0xbf8 <ButtonPress3+0x26e>
		{
			if(lives - 1 > -1)
     bc8:	20 91 00 01 	lds	r18, 0x0100
     bcc:	82 2f       	mov	r24, r18
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	99 23       	and	r25, r25
     bd4:	24 f0       	brlt	.+8      	; 0xbde <ButtonPress3+0x254>
			{
				lives--;
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	20 93 00 01 	sts	0x0100, r18
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <ButtonPress3+0x25a>
			}
			else
			{
				global_g = 20;
     bde:	84 e1       	ldi	r24, 0x14	; 20
     be0:	80 93 06 01 	sts	0x0106, r24
			}
			Press_third_level = Error3;
     be4:	8a e0       	ldi	r24, 0x0A	; 10
     be6:	80 93 13 01 	sts	0x0113, r24
     bea:	12 c0       	rjmp	.+36     	; 0xc10 <ButtonPress3+0x286>
		}
		break;
		case Press3_state9:
		if(~PINB & 0x10)
     bec:	1c 99       	sbic	0x03, 4	; 3
     bee:	4f c0       	rjmp	.+158    	; 0xc8e <ButtonPress3+0x304>
		{
			Press_third_level = Off3;
     bf0:	8b e0       	ldi	r24, 0x0B	; 11
     bf2:	80 93 13 01 	sts	0x0113, r24
     bf6:	52 c0       	rjmp	.+164    	; 0xc9c <ButtonPress3+0x312>
		}
		break;
	}
	switch(Press_third_level)
     bf8:	80 91 13 01 	lds	r24, 0x0113
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	fc 01       	movw	r30, r24
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	eb 30       	cpi	r30, 0x0B	; 11
     c04:	f1 05       	cpc	r31, r1
     c06:	08 f0       	brcs	.+2      	; 0xc0a <ButtonPress3+0x280>
     c08:	51 c0       	rjmp	.+162    	; 0xcac <ButtonPress3+0x322>
     c0a:	ee 57       	subi	r30, 0x7E	; 126
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	94 c7       	rjmp	.+3880   	; 0x1b38 <__tablejump2__>
	{
		case Error3:
		transmit_data(simon_SevenSeg(lives));
     c10:	80 91 00 01 	lds	r24, 0x0100
     c14:	97 db       	rcall	.-2258   	; 0x344 <simon_SevenSeg>
     c16:	79 db       	rcall	.-2318   	; 0x30a <transmit_data>
		PORTA = 0x10;
     c18:	80 e1       	ldi	r24, 0x10	; 16
     c1a:	82 b9       	out	0x02, r24	; 2
		break;
     c1c:	08 95       	ret
		case Press3_state1:
		transmit_data(simon_SevenSeg(lives));
     c1e:	80 91 00 01 	lds	r24, 0x0100
     c22:	90 db       	rcall	.-2272   	; 0x344 <simon_SevenSeg>
     c24:	72 db       	rcall	.-2332   	; 0x30a <transmit_data>
		PORTA = 0x02;
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	82 b9       	out	0x02, r24	; 2
		break;
     c2a:	08 95       	ret
		case Press3_state2:
		transmit_data(simon_SevenSeg(lives));
     c2c:	80 91 00 01 	lds	r24, 0x0100
     c30:	89 db       	rcall	.-2286   	; 0x344 <simon_SevenSeg>
     c32:	6b db       	rcall	.-2346   	; 0x30a <transmit_data>
		PORTA = 0x04;
     c34:	84 e0       	ldi	r24, 0x04	; 4
     c36:	82 b9       	out	0x02, r24	; 2
		break;
     c38:	08 95       	ret
		case Press3_state3:
		transmit_data(simon_SevenSeg(lives));
     c3a:	80 91 00 01 	lds	r24, 0x0100
     c3e:	82 db       	rcall	.-2300   	; 0x344 <simon_SevenSeg>
     c40:	64 db       	rcall	.-2360   	; 0x30a <transmit_data>
		PORTA = 0x01;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	82 b9       	out	0x02, r24	; 2
		break;
     c46:	08 95       	ret
		case Press3_state4:
		transmit_data(simon_SevenSeg(lives));
     c48:	80 91 00 01 	lds	r24, 0x0100
     c4c:	7b db       	rcall	.-2314   	; 0x344 <simon_SevenSeg>
     c4e:	5d db       	rcall	.-2374   	; 0x30a <transmit_data>
		PORTA = 0x08;
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	82 b9       	out	0x02, r24	; 2
		break;
     c54:	08 95       	ret
		case Press3_state5:
		transmit_data(simon_SevenSeg(lives));
     c56:	80 91 00 01 	lds	r24, 0x0100
     c5a:	74 db       	rcall	.-2328   	; 0x344 <simon_SevenSeg>
     c5c:	56 db       	rcall	.-2388   	; 0x30a <transmit_data>
		PORTA = 0x02;
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	82 b9       	out	0x02, r24	; 2
		break;
     c62:	08 95       	ret
		case Press3_state6:
		transmit_data(simon_SevenSeg(lives));
     c64:	80 91 00 01 	lds	r24, 0x0100
     c68:	6d db       	rcall	.-2342   	; 0x344 <simon_SevenSeg>
     c6a:	4f db       	rcall	.-2402   	; 0x30a <transmit_data>
		PORTA = 0x04;
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	82 b9       	out	0x02, r24	; 2
		break;
     c70:	08 95       	ret
		case Press3_state7:
		transmit_data(simon_SevenSeg(lives));
     c72:	80 91 00 01 	lds	r24, 0x0100
     c76:	66 db       	rcall	.-2356   	; 0x344 <simon_SevenSeg>
     c78:	48 db       	rcall	.-2416   	; 0x30a <transmit_data>
		PORTA = 0x01;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	82 b9       	out	0x02, r24	; 2
		break;
     c7e:	08 95       	ret
		case Press3_state8:
		transmit_data(simon_SevenSeg(lives));
     c80:	80 91 00 01 	lds	r24, 0x0100
     c84:	5f db       	rcall	.-2370   	; 0x344 <simon_SevenSeg>
     c86:	41 db       	rcall	.-2430   	; 0x30a <transmit_data>
		PORTA = 0x02;
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	82 b9       	out	0x02, r24	; 2
		break;
     c8c:	08 95       	ret
		case Press3_state9:
		transmit_data(simon_SevenSeg(lives));
     c8e:	80 91 00 01 	lds	r24, 0x0100
     c92:	58 db       	rcall	.-2384   	; 0x344 <simon_SevenSeg>
     c94:	3a db       	rcall	.-2444   	; 0x30a <transmit_data>
		PORTA = 0x08;
     c96:	88 e0       	ldi	r24, 0x08	; 8
     c98:	82 b9       	out	0x02, r24	; 2
		break;
     c9a:	08 95       	ret
		case Off3:
		PORTA = 0x00;
     c9c:	12 b8       	out	0x02, r1	; 2
		transmit_data(simon_SevenSeg(lives));
     c9e:	80 91 00 01 	lds	r24, 0x0100
     ca2:	50 db       	rcall	.-2400   	; 0x344 <simon_SevenSeg>
     ca4:	32 db       	rcall	.-2460   	; 0x30a <transmit_data>
		global_g = 6;
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	80 93 06 01 	sts	0x0106, r24
     cac:	08 95       	ret

00000cae <TickFct_Machine4>:
}

enum SM4_States {SM4_off, SM4_on1, SM4_on2, SM4_on3, SM4_on4, SM4_on5, SM4_on6, SM4_on7, SM4_on8, SM4_on9, SM4_on10, SM4_on11, SM4_on12} SM4_States;
void TickFct_Machine4()
{
	switch(SM4_States)
     cae:	20 91 0e 01 	lds	r18, 0x010E
     cb2:	82 2f       	mov	r24, r18
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	8d 30       	cpi	r24, 0x0D	; 13
     cb8:	91 05       	cpc	r25, r1
     cba:	08 f0       	brcs	.+2      	; 0xcbe <TickFct_Machine4+0x10>
     cbc:	40 c0       	rjmp	.+128    	; 0xd3e <TickFct_Machine4+0x90>
     cbe:	fc 01       	movw	r30, r24
     cc0:	e3 57       	subi	r30, 0x73	; 115
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	39 c7       	rjmp	.+3698   	; 0x1b38 <__tablejump2__>
	{
		case SM4_off:
		if(global_g == 6)
     cc6:	80 91 06 01 	lds	r24, 0x0106
     cca:	86 30       	cpi	r24, 0x06	; 6
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <TickFct_Machine4+0x22>
     cce:	40 c0       	rjmp	.+128    	; 0xd50 <TickFct_Machine4+0xa2>
		{
			if(~PINB & 0x01)
     cd0:	18 99       	sbic	0x03, 0	; 3
     cd2:	3e c0       	rjmp	.+124    	; 0xd50 <TickFct_Machine4+0xa2>
			{
				while(~PINB & 0x01){}
     cd4:	18 9b       	sbis	0x03, 0	; 3
     cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <TickFct_Machine4+0x26>
				SM4_States = SM4_on1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 0e 01 	sts	0x010E, r24
     cde:	3a c0       	rjmp	.+116    	; 0xd54 <TickFct_Machine4+0xa6>
				SM4_States = SM4_off;
			}
		}
		break;
		case SM4_on1:
		SM4_States = SM4_on2;
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	80 93 0e 01 	sts	0x010E, r24
     ce6:	39 c0       	rjmp	.+114    	; 0xd5a <TickFct_Machine4+0xac>
		break;
		case SM4_on2:
		SM4_States = SM4_on3;
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	80 93 0e 01 	sts	0x010E, r24
     cee:	38 c0       	rjmp	.+112    	; 0xd60 <TickFct_Machine4+0xb2>
		break;
		case SM4_on3:
		SM4_States = SM4_on4;
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	80 93 0e 01 	sts	0x010E, r24
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <TickFct_Machine4+0xb8>
		break;
		case SM4_on4:
		SM4_States = SM4_on5;
     cf8:	85 e0       	ldi	r24, 0x05	; 5
     cfa:	80 93 0e 01 	sts	0x010E, r24
     cfe:	36 c0       	rjmp	.+108    	; 0xd6c <TickFct_Machine4+0xbe>
		break;
		case SM4_on5:
		SM4_States = SM4_on6;
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	80 93 0e 01 	sts	0x010E, r24
     d06:	35 c0       	rjmp	.+106    	; 0xd72 <TickFct_Machine4+0xc4>
		break;
		case SM4_on6:
		SM4_States = SM4_on7;
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	80 93 0e 01 	sts	0x010E, r24
     d0e:	34 c0       	rjmp	.+104    	; 0xd78 <TickFct_Machine4+0xca>
		break;
		case SM4_on7:
		SM4_States = SM4_on8;
     d10:	88 e0       	ldi	r24, 0x08	; 8
     d12:	80 93 0e 01 	sts	0x010E, r24
     d16:	33 c0       	rjmp	.+102    	; 0xd7e <TickFct_Machine4+0xd0>
		break;
		case SM4_on8:
		SM4_States = SM4_on9;
     d18:	89 e0       	ldi	r24, 0x09	; 9
     d1a:	80 93 0e 01 	sts	0x010E, r24
     d1e:	32 c0       	rjmp	.+100    	; 0xd84 <TickFct_Machine4+0xd6>
		break;
		case SM4_on9:
		SM4_States = SM4_on10;
     d20:	8a e0       	ldi	r24, 0x0A	; 10
     d22:	80 93 0e 01 	sts	0x010E, r24
     d26:	31 c0       	rjmp	.+98     	; 0xd8a <TickFct_Machine4+0xdc>
		break;
		case SM4_on10:
		SM4_States = SM4_on11;
     d28:	8b e0       	ldi	r24, 0x0B	; 11
     d2a:	80 93 0e 01 	sts	0x010E, r24
     d2e:	30 c0       	rjmp	.+96     	; 0xd90 <TickFct_Machine4+0xe2>
		break;
		case SM4_on11:
		SM4_States = SM4_on12;
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	80 93 0e 01 	sts	0x010E, r24
     d36:	2f c0       	rjmp	.+94     	; 0xd96 <TickFct_Machine4+0xe8>
		break;
		case SM4_on12:
		SM4_States = SM4_off;
     d38:	10 92 0e 01 	sts	0x010E, r1
		break;
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <TickFct_Machine4+0xa2>
	}
	switch(SM4_States)
     d3e:	82 2f       	mov	r24, r18
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	8d 30       	cpi	r24, 0x0D	; 13
     d44:	91 05       	cpc	r25, r1
     d46:	60 f5       	brcc	.+88     	; 0xda0 <TickFct_Machine4+0xf2>
     d48:	fc 01       	movw	r30, r24
     d4a:	e6 56       	subi	r30, 0x66	; 102
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	f4 c6       	rjmp	.+3560   	; 0x1b38 <__tablejump2__>
	{
		case SM4_off:
		PORTA = 0x00;
     d50:	12 b8       	out	0x02, r1	; 2
		break;
     d52:	08 95       	ret
		case SM4_on1:
		PORTA = 0x01;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	82 b9       	out	0x02, r24	; 2
		break;
     d58:	08 95       	ret
		case SM4_on2:
		PORTA = 0x08;
     d5a:	88 e0       	ldi	r24, 0x08	; 8
     d5c:	82 b9       	out	0x02, r24	; 2
		break;
     d5e:	08 95       	ret
		case SM4_on3:
		PORTA = 0x02;
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	82 b9       	out	0x02, r24	; 2
		break;
     d64:	08 95       	ret
		case SM4_on4:
		PORTA = 0x01;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	82 b9       	out	0x02, r24	; 2
		break;
     d6a:	08 95       	ret
		case SM4_on5:
		PORTA = 0x02;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	82 b9       	out	0x02, r24	; 2
		break;
     d70:	08 95       	ret
		case SM4_on6:
		PORTA = 0x08;
     d72:	88 e0       	ldi	r24, 0x08	; 8
     d74:	82 b9       	out	0x02, r24	; 2
		break;
     d76:	08 95       	ret
		case SM4_on7:
		PORTA = 0x02;
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	82 b9       	out	0x02, r24	; 2
		break;
     d7c:	08 95       	ret
		case SM4_on8:
		PORTA = 0x01;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	82 b9       	out	0x02, r24	; 2
		break;
     d82:	08 95       	ret
		case SM4_on9:
		PORTA = 0x08;
     d84:	88 e0       	ldi	r24, 0x08	; 8
     d86:	82 b9       	out	0x02, r24	; 2
		break;
     d88:	08 95       	ret
		case SM4_on10:
		PORTA = 0x01;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	82 b9       	out	0x02, r24	; 2
		break;
     d8e:	08 95       	ret
		case SM4_on11:
		PORTA = 0x02;
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	82 b9       	out	0x02, r24	; 2
		break;
     d94:	08 95       	ret
		case SM4_on12:
		PORTA = 0x01;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	82 b9       	out	0x02, r24	; 2
		global_g = 7;
     d9a:	87 e0       	ldi	r24, 0x07	; 7
     d9c:	80 93 06 01 	sts	0x0106, r24
     da0:	08 95       	ret

00000da2 <ButtonPress4>:
}

enum Press_fourth_level{Init4, Press4_state1, Press4_state2, Press4_state3, Press4_state4, Press4_state5, Press4_state6, Press4_state7, Press4_state8, Press4_state9, Press4_state10, Press4_state11, Press4_state12, Error4, Off4} Press_fourth_level;
void ButtonPress4()
{
	switch(Press_fourth_level)
     da2:	80 91 10 01 	lds	r24, 0x0110
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	8e 30       	cpi	r24, 0x0E	; 14
     daa:	91 05       	cpc	r25, r1
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <ButtonPress4+0xe>
     dae:	8c c1       	rjmp	.+792    	; 0x10c8 <ButtonPress4+0x326>
     db0:	fc 01       	movw	r30, r24
     db2:	e9 55       	subi	r30, 0x59	; 89
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	c0 c6       	rjmp	.+3456   	; 0x1b38 <__tablejump2__>
	{
		case Init4:
		if(global_g == 7)
     db8:	80 91 06 01 	lds	r24, 0x0106
     dbc:	87 30       	cpi	r24, 0x07	; 7
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <ButtonPress4+0x20>
     dc0:	f2 c1       	rjmp	.+996    	; 0x11a6 <ButtonPress4+0x404>
		{
			PORTA = 0x00;
     dc2:	12 b8       	out	0x02, r1	; 2
			if(~PINB & 0x01)
     dc4:	18 99       	sbic	0x03, 0	; 3
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <ButtonPress4+0x30>
			{
				while(~PINB & 0x01){}
     dc8:	18 9b       	sbis	0x03, 0	; 3
     dca:	fe cf       	rjmp	.-4      	; 0xdc8 <ButtonPress4+0x26>
				Press_fourth_level = Press4_state1; 
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 10 01 	sts	0x0110, r24
			}
			if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     dd2:	19 9b       	sbis	0x03, 1	; 3
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <ButtonPress4+0x3c>
     dd6:	1a 9b       	sbis	0x03, 2	; 3
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <ButtonPress4+0x3c>
     dda:	1b 99       	sbic	0x03, 3	; 3
     ddc:	75 c1       	rjmp	.+746    	; 0x10c8 <ButtonPress4+0x326>
			{
				if(lives - 1 > -1)
     dde:	20 91 00 01 	lds	r18, 0x0100
     de2:	82 2f       	mov	r24, r18
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	99 23       	and	r25, r25
     dea:	24 f0       	brlt	.+8      	; 0xdf4 <ButtonPress4+0x52>
				{
					lives--;
     dec:	21 50       	subi	r18, 0x01	; 1
     dee:	20 93 00 01 	sts	0x0100, r18
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <ButtonPress4+0x58>
				}
				else
				{
					global_g = 20;
     df4:	84 e1       	ldi	r24, 0x14	; 20
     df6:	80 93 06 01 	sts	0x0106, r24
				}
				Press_fourth_level = Error4;
     dfa:	8d e0       	ldi	r24, 0x0D	; 13
     dfc:	80 93 10 01 	sts	0x0110, r24
     e00:	6f c1       	rjmp	.+734    	; 0x10e0 <ButtonPress4+0x33e>
			}
		}
		break;
		case Press4_state1:
		if(~PINB & 0x08)
     e02:	1b 99       	sbic	0x03, 3	; 3
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <ButtonPress4+0x6e>
		{
			while(~PINB & 0x08){}
     e06:	1b 9b       	sbis	0x03, 3	; 3
     e08:	fe cf       	rjmp	.-4      	; 0xe06 <ButtonPress4+0x64>
			Press_fourth_level = Press4_state2;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     e10:	19 9b       	sbis	0x03, 1	; 3
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <ButtonPress4+0x7a>
     e14:	1a 9b       	sbis	0x03, 2	; 3
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <ButtonPress4+0x7a>
     e18:	18 99       	sbic	0x03, 0	; 3
     e1a:	56 c1       	rjmp	.+684    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     e1c:	20 91 00 01 	lds	r18, 0x0100
     e20:	82 2f       	mov	r24, r18
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	99 23       	and	r25, r25
     e28:	24 f0       	brlt	.+8      	; 0xe32 <ButtonPress4+0x90>
			{
				lives--;
     e2a:	21 50       	subi	r18, 0x01	; 1
     e2c:	20 93 00 01 	sts	0x0100, r18
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <ButtonPress4+0x96>
			}
			else
			{
				global_g = 20;
     e32:	84 e1       	ldi	r24, 0x14	; 20
     e34:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     e38:	8d e0       	ldi	r24, 0x0D	; 13
     e3a:	80 93 10 01 	sts	0x0110, r24
     e3e:	50 c1       	rjmp	.+672    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state2:
		if(~PINB & 0x02)
     e40:	19 99       	sbic	0x03, 1	; 3
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <ButtonPress4+0xac>
		{
			while(~PINB & 0x02){}
     e44:	19 9b       	sbis	0x03, 1	; 3
     e46:	fe cf       	rjmp	.-4      	; 0xe44 <ButtonPress4+0xa2>
			Press_fourth_level = Press4_state3;
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     e4e:	18 9b       	sbis	0x03, 0	; 3
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <ButtonPress4+0xb8>
     e52:	1a 9b       	sbis	0x03, 2	; 3
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <ButtonPress4+0xb8>
     e56:	1b 99       	sbic	0x03, 3	; 3
     e58:	37 c1       	rjmp	.+622    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     e5a:	20 91 00 01 	lds	r18, 0x0100
     e5e:	82 2f       	mov	r24, r18
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	99 23       	and	r25, r25
     e66:	24 f0       	brlt	.+8      	; 0xe70 <ButtonPress4+0xce>
			{
				lives--;
     e68:	21 50       	subi	r18, 0x01	; 1
     e6a:	20 93 00 01 	sts	0x0100, r18
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <ButtonPress4+0xd4>
			}
			else
			{
				global_g = 20;
     e70:	84 e1       	ldi	r24, 0x14	; 20
     e72:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     e76:	8d e0       	ldi	r24, 0x0D	; 13
     e78:	80 93 10 01 	sts	0x0110, r24
     e7c:	31 c1       	rjmp	.+610    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state3:
		if(~PINB & 0x01)
     e7e:	18 99       	sbic	0x03, 0	; 3
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <ButtonPress4+0xea>
		{
			while(~PINB & 0x01){}
     e82:	18 9b       	sbis	0x03, 0	; 3
     e84:	fe cf       	rjmp	.-4      	; 0xe82 <ButtonPress4+0xe0>
			Press_fourth_level = Press4_state4;
     e86:	84 e0       	ldi	r24, 0x04	; 4
     e88:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     e8c:	19 9b       	sbis	0x03, 1	; 3
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <ButtonPress4+0xf6>
     e90:	1a 9b       	sbis	0x03, 2	; 3
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <ButtonPress4+0xf6>
     e94:	1b 99       	sbic	0x03, 3	; 3
     e96:	18 c1       	rjmp	.+560    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     e98:	20 91 00 01 	lds	r18, 0x0100
     e9c:	82 2f       	mov	r24, r18
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	99 23       	and	r25, r25
     ea4:	24 f0       	brlt	.+8      	; 0xeae <ButtonPress4+0x10c>
			{
				lives--;
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	20 93 00 01 	sts	0x0100, r18
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <ButtonPress4+0x112>
			}
			else
			{
				global_g = 20;
     eae:	84 e1       	ldi	r24, 0x14	; 20
     eb0:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     eb4:	8d e0       	ldi	r24, 0x0D	; 13
     eb6:	80 93 10 01 	sts	0x0110, r24
     eba:	12 c1       	rjmp	.+548    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state4:
		if(~PINB & 0x02)
     ebc:	19 99       	sbic	0x03, 1	; 3
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <ButtonPress4+0x128>
		{
			while(~PINB & 0x02){}
     ec0:	19 9b       	sbis	0x03, 1	; 3
     ec2:	fe cf       	rjmp	.-4      	; 0xec0 <ButtonPress4+0x11e>
			Press_fourth_level = Press4_state5;
     ec4:	85 e0       	ldi	r24, 0x05	; 5
     ec6:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     eca:	18 9b       	sbis	0x03, 0	; 3
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <ButtonPress4+0x134>
     ece:	1a 9b       	sbis	0x03, 2	; 3
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <ButtonPress4+0x134>
     ed2:	1b 99       	sbic	0x03, 3	; 3
     ed4:	f9 c0       	rjmp	.+498    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     ed6:	20 91 00 01 	lds	r18, 0x0100
     eda:	82 2f       	mov	r24, r18
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	99 23       	and	r25, r25
     ee2:	24 f0       	brlt	.+8      	; 0xeec <ButtonPress4+0x14a>
			{
				lives--;
     ee4:	21 50       	subi	r18, 0x01	; 1
     ee6:	20 93 00 01 	sts	0x0100, r18
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <ButtonPress4+0x150>
			}
			else
			{
				global_g = 20;
     eec:	84 e1       	ldi	r24, 0x14	; 20
     eee:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     ef2:	8d e0       	ldi	r24, 0x0D	; 13
     ef4:	80 93 10 01 	sts	0x0110, r24
     ef8:	f3 c0       	rjmp	.+486    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state5:
		if(~PINB & 0x08)
     efa:	1b 99       	sbic	0x03, 3	; 3
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <ButtonPress4+0x166>
		{
			while(~PINB & 0x08){}
     efe:	1b 9b       	sbis	0x03, 3	; 3
     f00:	fe cf       	rjmp	.-4      	; 0xefe <ButtonPress4+0x15c>
			Press_fourth_level = Press4_state6;
     f02:	86 e0       	ldi	r24, 0x06	; 6
     f04:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     f08:	19 9b       	sbis	0x03, 1	; 3
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <ButtonPress4+0x172>
     f0c:	1a 9b       	sbis	0x03, 2	; 3
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <ButtonPress4+0x172>
     f10:	18 99       	sbic	0x03, 0	; 3
     f12:	da c0       	rjmp	.+436    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     f14:	20 91 00 01 	lds	r18, 0x0100
     f18:	82 2f       	mov	r24, r18
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	99 23       	and	r25, r25
     f20:	24 f0       	brlt	.+8      	; 0xf2a <ButtonPress4+0x188>
			{
				lives--;
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	20 93 00 01 	sts	0x0100, r18
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <ButtonPress4+0x18e>
			}
			else
			{
				global_g = 20;
     f2a:	84 e1       	ldi	r24, 0x14	; 20
     f2c:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     f30:	8d e0       	ldi	r24, 0x0D	; 13
     f32:	80 93 10 01 	sts	0x0110, r24
     f36:	d4 c0       	rjmp	.+424    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state6:
		if(~PINB & 0x02)
     f38:	19 99       	sbic	0x03, 1	; 3
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <ButtonPress4+0x1a4>
		{
			while(~PINB & 0x02){}
     f3c:	19 9b       	sbis	0x03, 1	; 3
     f3e:	fe cf       	rjmp	.-4      	; 0xf3c <ButtonPress4+0x19a>
			Press_fourth_level = Press4_state7;
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
     f46:	18 9b       	sbis	0x03, 0	; 3
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <ButtonPress4+0x1b0>
     f4a:	1a 9b       	sbis	0x03, 2	; 3
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <ButtonPress4+0x1b0>
     f4e:	1b 99       	sbic	0x03, 3	; 3
     f50:	bb c0       	rjmp	.+374    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     f52:	20 91 00 01 	lds	r18, 0x0100
     f56:	82 2f       	mov	r24, r18
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	99 23       	and	r25, r25
     f5e:	24 f0       	brlt	.+8      	; 0xf68 <ButtonPress4+0x1c6>
			{
				lives--;
     f60:	21 50       	subi	r18, 0x01	; 1
     f62:	20 93 00 01 	sts	0x0100, r18
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <ButtonPress4+0x1cc>
			}
			else
			{
				global_g = 20;
     f68:	84 e1       	ldi	r24, 0x14	; 20
     f6a:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     f6e:	8d e0       	ldi	r24, 0x0D	; 13
     f70:	80 93 10 01 	sts	0x0110, r24
     f74:	b5 c0       	rjmp	.+362    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state7:
		if(~PINB & 0x01)
     f76:	18 99       	sbic	0x03, 0	; 3
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <ButtonPress4+0x1e2>
		{
			while(~PINB & 0x01){}
     f7a:	18 9b       	sbis	0x03, 0	; 3
     f7c:	fe cf       	rjmp	.-4      	; 0xf7a <ButtonPress4+0x1d8>
			Press_fourth_level = Press4_state8;
     f7e:	88 e0       	ldi	r24, 0x08	; 8
     f80:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
     f84:	19 9b       	sbis	0x03, 1	; 3
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <ButtonPress4+0x1ee>
     f88:	1a 9b       	sbis	0x03, 2	; 3
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <ButtonPress4+0x1ee>
     f8c:	1b 99       	sbic	0x03, 3	; 3
     f8e:	9c c0       	rjmp	.+312    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     f90:	20 91 00 01 	lds	r18, 0x0100
     f94:	82 2f       	mov	r24, r18
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	99 23       	and	r25, r25
     f9c:	24 f0       	brlt	.+8      	; 0xfa6 <ButtonPress4+0x204>
			{
				lives--;
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	20 93 00 01 	sts	0x0100, r18
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <ButtonPress4+0x20a>
			}
			else
			{
				global_g = 20;
     fa6:	84 e1       	ldi	r24, 0x14	; 20
     fa8:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     fac:	8d e0       	ldi	r24, 0x0D	; 13
     fae:	80 93 10 01 	sts	0x0110, r24
     fb2:	96 c0       	rjmp	.+300    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state8:
		if(~PINB & 0x08)
     fb4:	1b 99       	sbic	0x03, 3	; 3
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <ButtonPress4+0x220>
		{
			while(~PINB & 0x08){}
     fb8:	1b 9b       	sbis	0x03, 3	; 3
     fba:	fe cf       	rjmp	.-4      	; 0xfb8 <ButtonPress4+0x216>
			Press_fourth_level = Press4_state9;
     fbc:	89 e0       	ldi	r24, 0x09	; 9
     fbe:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
     fc2:	19 9b       	sbis	0x03, 1	; 3
     fc4:	04 c0       	rjmp	.+8      	; 0xfce <ButtonPress4+0x22c>
     fc6:	1a 9b       	sbis	0x03, 2	; 3
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <ButtonPress4+0x22c>
     fca:	18 99       	sbic	0x03, 0	; 3
     fcc:	7d c0       	rjmp	.+250    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
     fce:	20 91 00 01 	lds	r18, 0x0100
     fd2:	82 2f       	mov	r24, r18
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	99 23       	and	r25, r25
     fda:	24 f0       	brlt	.+8      	; 0xfe4 <ButtonPress4+0x242>
			{
				lives--;
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	20 93 00 01 	sts	0x0100, r18
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <ButtonPress4+0x248>
			}
			else
			{
				global_g = 20;
     fe4:	84 e1       	ldi	r24, 0x14	; 20
     fe6:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
     fea:	8d e0       	ldi	r24, 0x0D	; 13
     fec:	80 93 10 01 	sts	0x0110, r24
     ff0:	77 c0       	rjmp	.+238    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state9:
		if(~PINB & 0x01)
     ff2:	18 99       	sbic	0x03, 0	; 3
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <ButtonPress4+0x25e>
		{
			while(~PINB & 0x01){}
     ff6:	18 9b       	sbis	0x03, 0	; 3
     ff8:	fe cf       	rjmp	.-4      	; 0xff6 <ButtonPress4+0x254>
			Press_fourth_level = Press4_state10;
     ffa:	8a e0       	ldi	r24, 0x0A	; 10
     ffc:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    1000:	19 9b       	sbis	0x03, 1	; 3
    1002:	04 c0       	rjmp	.+8      	; 0x100c <ButtonPress4+0x26a>
    1004:	1a 9b       	sbis	0x03, 2	; 3
    1006:	02 c0       	rjmp	.+4      	; 0x100c <ButtonPress4+0x26a>
    1008:	1b 99       	sbic	0x03, 3	; 3
    100a:	5e c0       	rjmp	.+188    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
    100c:	20 91 00 01 	lds	r18, 0x0100
    1010:	82 2f       	mov	r24, r18
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	99 23       	and	r25, r25
    1018:	24 f0       	brlt	.+8      	; 0x1022 <ButtonPress4+0x280>
			{
				lives--;
    101a:	21 50       	subi	r18, 0x01	; 1
    101c:	20 93 00 01 	sts	0x0100, r18
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <ButtonPress4+0x286>
			}
			else
			{
				global_g = 20;
    1022:	84 e1       	ldi	r24, 0x14	; 20
    1024:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
    1028:	8d e0       	ldi	r24, 0x0D	; 13
    102a:	80 93 10 01 	sts	0x0110, r24
    102e:	58 c0       	rjmp	.+176    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state10:
		if(~PINB & 0x02)
    1030:	19 99       	sbic	0x03, 1	; 3
    1032:	05 c0       	rjmp	.+10     	; 0x103e <ButtonPress4+0x29c>
		{
			while(~PINB & 0x02){}
    1034:	19 9b       	sbis	0x03, 1	; 3
    1036:	fe cf       	rjmp	.-4      	; 0x1034 <ButtonPress4+0x292>
			Press_fourth_level = Press4_state11;
    1038:	8b e0       	ldi	r24, 0x0B	; 11
    103a:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    103e:	18 9b       	sbis	0x03, 0	; 3
    1040:	04 c0       	rjmp	.+8      	; 0x104a <ButtonPress4+0x2a8>
    1042:	1a 9b       	sbis	0x03, 2	; 3
    1044:	02 c0       	rjmp	.+4      	; 0x104a <ButtonPress4+0x2a8>
    1046:	1b 99       	sbic	0x03, 3	; 3
    1048:	3f c0       	rjmp	.+126    	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
    104a:	20 91 00 01 	lds	r18, 0x0100
    104e:	82 2f       	mov	r24, r18
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	99 23       	and	r25, r25
    1056:	24 f0       	brlt	.+8      	; 0x1060 <ButtonPress4+0x2be>
			{
				lives--;
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	20 93 00 01 	sts	0x0100, r18
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <ButtonPress4+0x2c4>
			}
			else
			{
				global_g = 20;
    1060:	84 e1       	ldi	r24, 0x14	; 20
    1062:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
    1066:	8d e0       	ldi	r24, 0x0D	; 13
    1068:	80 93 10 01 	sts	0x0110, r24
    106c:	39 c0       	rjmp	.+114    	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		
		case Press4_state11:
		if(~PINB & 0x01)
    106e:	18 99       	sbic	0x03, 0	; 3
    1070:	05 c0       	rjmp	.+10     	; 0x107c <ButtonPress4+0x2da>
		{
			while(~PINB & 0x01){}
    1072:	18 9b       	sbis	0x03, 0	; 3
    1074:	fe cf       	rjmp	.-4      	; 0x1072 <ButtonPress4+0x2d0>
			Press_fourth_level = Press4_state12;
    1076:	8c e0       	ldi	r24, 0x0C	; 12
    1078:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    107c:	19 9b       	sbis	0x03, 1	; 3
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <ButtonPress4+0x2e6>
    1080:	1a 9b       	sbis	0x03, 2	; 3
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <ButtonPress4+0x2e6>
    1084:	1b 99       	sbic	0x03, 3	; 3
    1086:	20 c0       	rjmp	.+64     	; 0x10c8 <ButtonPress4+0x326>
		{
			if(lives - 1 > -1)
    1088:	20 91 00 01 	lds	r18, 0x0100
    108c:	82 2f       	mov	r24, r18
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	99 23       	and	r25, r25
    1094:	24 f0       	brlt	.+8      	; 0x109e <ButtonPress4+0x2fc>
			{
				lives--;
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	20 93 00 01 	sts	0x0100, r18
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <ButtonPress4+0x302>
			}
			else
			{
				global_g = 20;
    109e:	84 e1       	ldi	r24, 0x14	; 20
    10a0:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fourth_level = Error4;
    10a4:	8d e0       	ldi	r24, 0x0D	; 13
    10a6:	80 93 10 01 	sts	0x0110, r24
    10aa:	1a c0       	rjmp	.+52     	; 0x10e0 <ButtonPress4+0x33e>
		}
		break;
		case Press4_state12:
		if(~PINB & 0x10)
    10ac:	1c 99       	sbic	0x03, 4	; 3
    10ae:	6c c0       	rjmp	.+216    	; 0x1188 <ButtonPress4+0x3e6>
		{
			Press_fourth_level = Off4;
    10b0:	8e e0       	ldi	r24, 0x0E	; 14
    10b2:	80 93 10 01 	sts	0x0110, r24
    10b6:	6f c0       	rjmp	.+222    	; 0x1196 <ButtonPress4+0x3f4>
		}
		break;
		case Error4:
		if(~PINB & 0x01)
    10b8:	18 99       	sbic	0x03, 0	; 3
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <ButtonPress4+0x33e>
		{
			while(~PINB & 0x01){}
    10bc:	18 9b       	sbis	0x03, 0	; 3
    10be:	fe cf       	rjmp	.-4      	; 0x10bc <ButtonPress4+0x31a>
			Press_fourth_level = Press4_state1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	80 93 10 01 	sts	0x0110, r24
    10c6:	13 c0       	rjmp	.+38     	; 0x10ee <ButtonPress4+0x34c>
		}
	}
	switch(Press_fourth_level)
    10c8:	80 91 10 01 	lds	r24, 0x0110
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	fc 01       	movw	r30, r24
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	ee 30       	cpi	r30, 0x0E	; 14
    10d4:	f1 05       	cpc	r31, r1
    10d6:	08 f0       	brcs	.+2      	; 0x10da <ButtonPress4+0x338>
    10d8:	66 c0       	rjmp	.+204    	; 0x11a6 <ButtonPress4+0x404>
    10da:	eb 54       	subi	r30, 0x4B	; 75
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	2c c5       	rjmp	.+2648   	; 0x1b38 <__tablejump2__>
	{
		case Error4:
		transmit_data(simon_SevenSeg(lives));
    10e0:	80 91 00 01 	lds	r24, 0x0100
    10e4:	2f d9       	rcall	.-3490   	; 0x344 <simon_SevenSeg>
    10e6:	11 d9       	rcall	.-3550   	; 0x30a <transmit_data>
		PORTA = 0x10;
    10e8:	80 e1       	ldi	r24, 0x10	; 16
    10ea:	82 b9       	out	0x02, r24	; 2
		break;
    10ec:	08 95       	ret
		case Press4_state1:
		transmit_data(simon_SevenSeg(lives));
    10ee:	80 91 00 01 	lds	r24, 0x0100
    10f2:	28 d9       	rcall	.-3504   	; 0x344 <simon_SevenSeg>
    10f4:	0a d9       	rcall	.-3564   	; 0x30a <transmit_data>
		PORTA = 0x01;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	82 b9       	out	0x02, r24	; 2
		break;
    10fa:	08 95       	ret
		case Press4_state2:
		transmit_data(simon_SevenSeg(lives));
    10fc:	80 91 00 01 	lds	r24, 0x0100
    1100:	21 d9       	rcall	.-3518   	; 0x344 <simon_SevenSeg>
    1102:	03 d9       	rcall	.-3578   	; 0x30a <transmit_data>
		PORTA = 0x08;
    1104:	88 e0       	ldi	r24, 0x08	; 8
    1106:	82 b9       	out	0x02, r24	; 2
		break;
    1108:	08 95       	ret
		case Press4_state3:
		transmit_data(simon_SevenSeg(lives));
    110a:	80 91 00 01 	lds	r24, 0x0100
    110e:	1a d9       	rcall	.-3532   	; 0x344 <simon_SevenSeg>
    1110:	fc d8       	rcall	.-3592   	; 0x30a <transmit_data>
		PORTA = 0x02;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	82 b9       	out	0x02, r24	; 2
		break;
    1116:	08 95       	ret
		case Press4_state4:
		transmit_data(simon_SevenSeg(lives));
    1118:	80 91 00 01 	lds	r24, 0x0100
    111c:	13 d9       	rcall	.-3546   	; 0x344 <simon_SevenSeg>
    111e:	f5 d8       	rcall	.-3606   	; 0x30a <transmit_data>
		PORTA = 0x01;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	82 b9       	out	0x02, r24	; 2
		break;
    1124:	08 95       	ret
		case Press4_state5:
		transmit_data(simon_SevenSeg(lives));
    1126:	80 91 00 01 	lds	r24, 0x0100
    112a:	0c d9       	rcall	.-3560   	; 0x344 <simon_SevenSeg>
    112c:	ee d8       	rcall	.-3620   	; 0x30a <transmit_data>
		PORTA = 0x02;
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	82 b9       	out	0x02, r24	; 2
		break;
    1132:	08 95       	ret
		case Press4_state6:
		transmit_data(simon_SevenSeg(lives));
    1134:	80 91 00 01 	lds	r24, 0x0100
    1138:	05 d9       	rcall	.-3574   	; 0x344 <simon_SevenSeg>
    113a:	e7 d8       	rcall	.-3634   	; 0x30a <transmit_data>
		PORTA = 0x08;
    113c:	88 e0       	ldi	r24, 0x08	; 8
    113e:	82 b9       	out	0x02, r24	; 2
		break;
    1140:	08 95       	ret
		case Press4_state7:
		transmit_data(simon_SevenSeg(lives));
    1142:	80 91 00 01 	lds	r24, 0x0100
    1146:	fe d8       	rcall	.-3588   	; 0x344 <simon_SevenSeg>
    1148:	e0 d8       	rcall	.-3648   	; 0x30a <transmit_data>
		PORTA = 0x02;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	82 b9       	out	0x02, r24	; 2
		break;
    114e:	08 95       	ret
		case Press4_state8:
		transmit_data(simon_SevenSeg(lives));
    1150:	80 91 00 01 	lds	r24, 0x0100
    1154:	f7 d8       	rcall	.-3602   	; 0x344 <simon_SevenSeg>
    1156:	d9 d8       	rcall	.-3662   	; 0x30a <transmit_data>
		PORTA = 0x01;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	82 b9       	out	0x02, r24	; 2
		break;
    115c:	08 95       	ret
		case Press4_state9:
		transmit_data(simon_SevenSeg(lives));
    115e:	80 91 00 01 	lds	r24, 0x0100
    1162:	f0 d8       	rcall	.-3616   	; 0x344 <simon_SevenSeg>
    1164:	d2 d8       	rcall	.-3676   	; 0x30a <transmit_data>
		PORTA = 0x08;
    1166:	88 e0       	ldi	r24, 0x08	; 8
    1168:	82 b9       	out	0x02, r24	; 2
		break;
    116a:	08 95       	ret
		case Press4_state10:
		transmit_data(simon_SevenSeg(lives));
    116c:	80 91 00 01 	lds	r24, 0x0100
    1170:	e9 d8       	rcall	.-3630   	; 0x344 <simon_SevenSeg>
    1172:	cb d8       	rcall	.-3690   	; 0x30a <transmit_data>
		PORTA = 0x01;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	82 b9       	out	0x02, r24	; 2
		break;
    1178:	08 95       	ret
		case Press4_state11:
		transmit_data(simon_SevenSeg(lives));
    117a:	80 91 00 01 	lds	r24, 0x0100
    117e:	e2 d8       	rcall	.-3644   	; 0x344 <simon_SevenSeg>
    1180:	c4 d8       	rcall	.-3704   	; 0x30a <transmit_data>
		PORTA = 0x02;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	82 b9       	out	0x02, r24	; 2
		break;
    1186:	08 95       	ret
		case Press4_state12:
		transmit_data(simon_SevenSeg(lives));
    1188:	80 91 00 01 	lds	r24, 0x0100
    118c:	db d8       	rcall	.-3658   	; 0x344 <simon_SevenSeg>
    118e:	bd d8       	rcall	.-3718   	; 0x30a <transmit_data>
		PORTA = 0x01;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	82 b9       	out	0x02, r24	; 2
		break;
    1194:	08 95       	ret
		case Off4:
		transmit_data(simon_SevenSeg(lives));
    1196:	80 91 00 01 	lds	r24, 0x0100
    119a:	d4 d8       	rcall	.-3672   	; 0x344 <simon_SevenSeg>
    119c:	b6 d8       	rcall	.-3732   	; 0x30a <transmit_data>
		PORTA = 0x00;
    119e:	12 b8       	out	0x02, r1	; 2
		global_g = 8;
    11a0:	88 e0       	ldi	r24, 0x08	; 8
    11a2:	80 93 06 01 	sts	0x0106, r24
    11a6:	08 95       	ret

000011a8 <TickFct_Machine5>:
}	

enum SM5_States{SM5_off, SM5_on1, SM5_on2, SM5_on3, SM5_on4, SM5_on5, SM5_on6, SM5_on7, SM5_on8, SM5_on9, SM5_on10, SM5_on11, SM5_on12, SM5_on13, SM5_on14, SM5_on15} SM5_States;
void TickFct_Machine5()
{
	switch(SM5_States)
    11a8:	20 91 14 01 	lds	r18, 0x0114
    11ac:	82 2f       	mov	r24, r18
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	80 31       	cpi	r24, 0x10	; 16
    11b2:	91 05       	cpc	r25, r1
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <TickFct_Machine5+0x10>
    11b6:	4c c0       	rjmp	.+152    	; 0x1250 <TickFct_Machine5+0xa8>
    11b8:	fc 01       	movw	r30, r24
    11ba:	ed 53       	subi	r30, 0x3D	; 61
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	bc c4       	rjmp	.+2424   	; 0x1b38 <__tablejump2__>
	{
		case SM5_off:
		
		if(global_g == 8)
    11c0:	80 91 06 01 	lds	r24, 0x0106
    11c4:	88 30       	cpi	r24, 0x08	; 8
    11c6:	09 f0       	breq	.+2      	; 0x11ca <TickFct_Machine5+0x22>
    11c8:	4c c0       	rjmp	.+152    	; 0x1262 <TickFct_Machine5+0xba>
		{
			if(~PINB & 0x01)
    11ca:	18 99       	sbic	0x03, 0	; 3
    11cc:	4a c0       	rjmp	.+148    	; 0x1262 <TickFct_Machine5+0xba>
			{
				while(~PINB & 0x01){}
    11ce:	18 9b       	sbis	0x03, 0	; 3
    11d0:	fe cf       	rjmp	.-4      	; 0x11ce <TickFct_Machine5+0x26>
				SM5_States = SM5_on1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 14 01 	sts	0x0114, r24
    11d8:	46 c0       	rjmp	.+140    	; 0x1266 <TickFct_Machine5+0xbe>
				SM5_States = SM5_off;
			}
		}
		break;
		case SM5_on1:
		SM5_States = SM5_on2;
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	80 93 14 01 	sts	0x0114, r24
    11e0:	45 c0       	rjmp	.+138    	; 0x126c <TickFct_Machine5+0xc4>
		break;
		case SM5_on2:
		SM5_States = SM5_on3;
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	80 93 14 01 	sts	0x0114, r24
    11e8:	44 c0       	rjmp	.+136    	; 0x1272 <TickFct_Machine5+0xca>
		break;
		case SM5_on3:
		SM5_States = SM5_on4;
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	80 93 14 01 	sts	0x0114, r24
    11f0:	43 c0       	rjmp	.+134    	; 0x1278 <TickFct_Machine5+0xd0>
		break;
		case SM5_on4:
		SM5_States = SM5_on5;
    11f2:	85 e0       	ldi	r24, 0x05	; 5
    11f4:	80 93 14 01 	sts	0x0114, r24
    11f8:	42 c0       	rjmp	.+132    	; 0x127e <TickFct_Machine5+0xd6>
		break;
		case SM5_on5:
		SM5_States = SM5_on6;
    11fa:	86 e0       	ldi	r24, 0x06	; 6
    11fc:	80 93 14 01 	sts	0x0114, r24
    1200:	41 c0       	rjmp	.+130    	; 0x1284 <TickFct_Machine5+0xdc>
		break;
		case SM5_on6:
		SM5_States = SM5_on7;
    1202:	87 e0       	ldi	r24, 0x07	; 7
    1204:	80 93 14 01 	sts	0x0114, r24
    1208:	40 c0       	rjmp	.+128    	; 0x128a <TickFct_Machine5+0xe2>
		break;
		case SM5_on7:
		SM5_States = SM5_on8;
    120a:	88 e0       	ldi	r24, 0x08	; 8
    120c:	80 93 14 01 	sts	0x0114, r24
    1210:	3f c0       	rjmp	.+126    	; 0x1290 <TickFct_Machine5+0xe8>
		break;
		case SM5_on8:
		SM5_States = SM5_on9;
    1212:	89 e0       	ldi	r24, 0x09	; 9
    1214:	80 93 14 01 	sts	0x0114, r24
    1218:	3e c0       	rjmp	.+124    	; 0x1296 <TickFct_Machine5+0xee>
		break;
		case SM5_on9:
		SM5_States = SM5_on10;
    121a:	8a e0       	ldi	r24, 0x0A	; 10
    121c:	80 93 14 01 	sts	0x0114, r24
    1220:	3d c0       	rjmp	.+122    	; 0x129c <TickFct_Machine5+0xf4>
		break;
		case SM5_on10:
		SM5_States = SM5_on11;
    1222:	8b e0       	ldi	r24, 0x0B	; 11
    1224:	80 93 14 01 	sts	0x0114, r24
    1228:	3c c0       	rjmp	.+120    	; 0x12a2 <TickFct_Machine5+0xfa>
		break;
		case SM5_on11:
		SM5_States = SM5_on12;
    122a:	8c e0       	ldi	r24, 0x0C	; 12
    122c:	80 93 14 01 	sts	0x0114, r24
    1230:	3b c0       	rjmp	.+118    	; 0x12a8 <TickFct_Machine5+0x100>
		break;
		case SM5_on12:
		SM5_States = SM5_on13;
    1232:	8d e0       	ldi	r24, 0x0D	; 13
    1234:	80 93 14 01 	sts	0x0114, r24
    1238:	3a c0       	rjmp	.+116    	; 0x12ae <TickFct_Machine5+0x106>
		break;
		case SM5_on13:
		SM5_States = SM5_on14;
    123a:	8e e0       	ldi	r24, 0x0E	; 14
    123c:	80 93 14 01 	sts	0x0114, r24
    1240:	39 c0       	rjmp	.+114    	; 0x12b4 <TickFct_Machine5+0x10c>
		break;
		case SM5_on14:
		SM5_States = SM5_on15;
    1242:	8f e0       	ldi	r24, 0x0F	; 15
    1244:	80 93 14 01 	sts	0x0114, r24
    1248:	38 c0       	rjmp	.+112    	; 0x12ba <TickFct_Machine5+0x112>
		break;
		case SM5_on15:
		SM5_States = SM5_off;
    124a:	10 92 14 01 	sts	0x0114, r1
		break;
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <TickFct_Machine5+0xba>
	}
	switch(SM5_States)
    1250:	82 2f       	mov	r24, r18
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	80 31       	cpi	r24, 0x10	; 16
    1256:	91 05       	cpc	r25, r1
    1258:	a8 f5       	brcc	.+106    	; 0x12c4 <TickFct_Machine5+0x11c>
    125a:	fc 01       	movw	r30, r24
    125c:	ed 52       	subi	r30, 0x2D	; 45
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	6b c4       	rjmp	.+2262   	; 0x1b38 <__tablejump2__>
	{
		case SM5_off:
		PORTA = 0x00;
    1262:	12 b8       	out	0x02, r1	; 2
		break;
    1264:	08 95       	ret
		case SM5_on1:
		PORTA = 0x08;
    1266:	88 e0       	ldi	r24, 0x08	; 8
    1268:	82 b9       	out	0x02, r24	; 2
		break;
    126a:	08 95       	ret
		case SM5_on2:
		PORTA = 0x04;
    126c:	84 e0       	ldi	r24, 0x04	; 4
    126e:	82 b9       	out	0x02, r24	; 2
		break;
    1270:	08 95       	ret
		case SM5_on3:
		PORTA = 0x02;
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	82 b9       	out	0x02, r24	; 2
		break;
    1276:	08 95       	ret
		case SM5_on4:
		PORTA = 0x01;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	82 b9       	out	0x02, r24	; 2
		break;
    127c:	08 95       	ret
		case SM5_on5:
		PORTA = 0x02;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	82 b9       	out	0x02, r24	; 2
		break;
    1282:	08 95       	ret
		case SM5_on6:
		PORTA = 0x01;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	82 b9       	out	0x02, r24	; 2
		break;
    1288:	08 95       	ret
		case SM5_on7:
		PORTA = 0x04;
    128a:	84 e0       	ldi	r24, 0x04	; 4
    128c:	82 b9       	out	0x02, r24	; 2
		break;
    128e:	08 95       	ret
		case SM5_on8:
		PORTA = 0x08;
    1290:	88 e0       	ldi	r24, 0x08	; 8
    1292:	82 b9       	out	0x02, r24	; 2
		break;
    1294:	08 95       	ret
		case SM5_on9:
		PORTA = 0x02;
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	82 b9       	out	0x02, r24	; 2
		break;
    129a:	08 95       	ret
		case SM5_on10:
		PORTA = 0x01;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	82 b9       	out	0x02, r24	; 2
		break;
    12a0:	08 95       	ret
		case SM5_on11:
		PORTA = 0x02;
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	82 b9       	out	0x02, r24	; 2
		break;
    12a6:	08 95       	ret
		case SM5_on12:
		PORTA = 0x01;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	82 b9       	out	0x02, r24	; 2
		break;
    12ac:	08 95       	ret
		case SM5_on13:
		PORTA = 0x04;
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	82 b9       	out	0x02, r24	; 2
		break;
    12b2:	08 95       	ret
		case SM5_on14:
		PORTA = 0x08;
    12b4:	88 e0       	ldi	r24, 0x08	; 8
    12b6:	82 b9       	out	0x02, r24	; 2
		break;
    12b8:	08 95       	ret
		case SM5_on15:
		PORTA = 0x01;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	82 b9       	out	0x02, r24	; 2
		global_g = 9;
    12be:	89 e0       	ldi	r24, 0x09	; 9
    12c0:	80 93 06 01 	sts	0x0106, r24
    12c4:	08 95       	ret

000012c6 <ButtonPress5>:
}

enum Press_fifth_level{Init5, Press5_state1, Press5_state2, Press5_state3, Press5_state4, Press5_state5, Press5_state6, Press5_state7, Press5_state8, Press5_state9, Press5_state10, Press5_state11, Press5_state12, Press5_state13, Press5_state14, Press5_state15, Error5, Off5} Press_fifth_level;
void ButtonPress5()
{
	switch(Press_fifth_level)
    12c6:	80 91 15 01 	lds	r24, 0x0115
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	81 31       	cpi	r24, 0x11	; 17
    12ce:	91 05       	cpc	r25, r1
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <ButtonPress5+0xe>
    12d2:	e9 c1       	rjmp	.+978    	; 0x16a6 <ButtonPress5+0x3e0>
    12d4:	fc 01       	movw	r30, r24
    12d6:	ed 51       	subi	r30, 0x1D	; 29
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	2e c4       	rjmp	.+2140   	; 0x1b38 <__tablejump2__>
	{
		case Init5:
		if(global_g == 9)
    12dc:	80 91 06 01 	lds	r24, 0x0106
    12e0:	89 30       	cpi	r24, 0x09	; 9
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <ButtonPress5+0x20>
    12e4:	7d c2       	rjmp	.+1274   	; 0x17e0 <ButtonPress5+0x51a>
		{
			PORTA = 0x00;
    12e6:	12 b8       	out	0x02, r1	; 2
			if(~PINB & 0x08)
    12e8:	1b 99       	sbic	0x03, 3	; 3
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <ButtonPress5+0x30>
			{
				while(~PINB & 0x08){}
    12ec:	1b 9b       	sbis	0x03, 3	; 3
    12ee:	fe cf       	rjmp	.-4      	; 0x12ec <ButtonPress5+0x26>
				Press_fifth_level = Press5_state1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 15 01 	sts	0x0115, r24
			}
			if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
    12f6:	19 9b       	sbis	0x03, 1	; 3
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <ButtonPress5+0x3c>
    12fa:	1a 9b       	sbis	0x03, 2	; 3
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <ButtonPress5+0x3c>
    12fe:	18 99       	sbic	0x03, 0	; 3
    1300:	d2 c1       	rjmp	.+932    	; 0x16a6 <ButtonPress5+0x3e0>
			{
				if(lives - 1 > -1)
    1302:	20 91 00 01 	lds	r18, 0x0100
    1306:	82 2f       	mov	r24, r18
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	99 23       	and	r25, r25
    130e:	24 f0       	brlt	.+8      	; 0x1318 <ButtonPress5+0x52>
				{
					lives--;
    1310:	21 50       	subi	r18, 0x01	; 1
    1312:	20 93 00 01 	sts	0x0100, r18
    1316:	03 c0       	rjmp	.+6      	; 0x131e <ButtonPress5+0x58>
				}
				else
				{
					global_g = 20;
    1318:	84 e1       	ldi	r24, 0x14	; 20
    131a:	80 93 06 01 	sts	0x0106, r24
				}
				Press_fifth_level = Error5;
    131e:	80 e1       	ldi	r24, 0x10	; 16
    1320:	80 93 15 01 	sts	0x0115, r24
    1324:	cc c1       	rjmp	.+920    	; 0x16be <ButtonPress5+0x3f8>
			}
		}
		break;
		case Press5_state1:
		if(~PINB & 0x04)
    1326:	1a 99       	sbic	0x03, 2	; 3
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <ButtonPress5+0x6e>
		{
			while(~PINB & 0x04){}
    132a:	1a 9b       	sbis	0x03, 2	; 3
    132c:	fe cf       	rjmp	.-4      	; 0x132a <ButtonPress5+0x64>
			Press_fifth_level = Press5_state2;
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
    1334:	19 9b       	sbis	0x03, 1	; 3
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <ButtonPress5+0x7a>
    1338:	18 9b       	sbis	0x03, 0	; 3
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <ButtonPress5+0x7a>
    133c:	1b 99       	sbic	0x03, 3	; 3
    133e:	b3 c1       	rjmp	.+870    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    1340:	20 91 00 01 	lds	r18, 0x0100
    1344:	82 2f       	mov	r24, r18
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	99 23       	and	r25, r25
    134c:	24 f0       	brlt	.+8      	; 0x1356 <ButtonPress5+0x90>
			{
				lives--;
    134e:	21 50       	subi	r18, 0x01	; 1
    1350:	20 93 00 01 	sts	0x0100, r18
    1354:	03 c0       	rjmp	.+6      	; 0x135c <ButtonPress5+0x96>
			}
			else
			{
				global_g = 20;
    1356:	84 e1       	ldi	r24, 0x14	; 20
    1358:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    135c:	80 e1       	ldi	r24, 0x10	; 16
    135e:	80 93 15 01 	sts	0x0115, r24
    1362:	ad c1       	rjmp	.+858    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state2:
		if(~PINB & 0x02)
    1364:	19 99       	sbic	0x03, 1	; 3
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <ButtonPress5+0xac>
		{
			while(~PINB & 0x02){}
    1368:	19 9b       	sbis	0x03, 1	; 3
    136a:	fe cf       	rjmp	.-4      	; 0x1368 <ButtonPress5+0xa2>
			Press_fifth_level = Press5_state3;
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    1372:	18 9b       	sbis	0x03, 0	; 3
    1374:	04 c0       	rjmp	.+8      	; 0x137e <ButtonPress5+0xb8>
    1376:	1a 9b       	sbis	0x03, 2	; 3
    1378:	02 c0       	rjmp	.+4      	; 0x137e <ButtonPress5+0xb8>
    137a:	1b 99       	sbic	0x03, 3	; 3
    137c:	94 c1       	rjmp	.+808    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    137e:	20 91 00 01 	lds	r18, 0x0100
    1382:	82 2f       	mov	r24, r18
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	99 23       	and	r25, r25
    138a:	24 f0       	brlt	.+8      	; 0x1394 <ButtonPress5+0xce>
			{
				lives--;
    138c:	21 50       	subi	r18, 0x01	; 1
    138e:	20 93 00 01 	sts	0x0100, r18
    1392:	03 c0       	rjmp	.+6      	; 0x139a <ButtonPress5+0xd4>
			}
			else
			{
				global_g = 20;
    1394:	84 e1       	ldi	r24, 0x14	; 20
    1396:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    139a:	80 e1       	ldi	r24, 0x10	; 16
    139c:	80 93 15 01 	sts	0x0115, r24
    13a0:	8e c1       	rjmp	.+796    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state3:
		if(~PINB & 0x01)
    13a2:	18 99       	sbic	0x03, 0	; 3
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <ButtonPress5+0xea>
		{
			while(~PINB & 0x01){}
    13a6:	18 9b       	sbis	0x03, 0	; 3
    13a8:	fe cf       	rjmp	.-4      	; 0x13a6 <ButtonPress5+0xe0>
			Press_fifth_level = Press5_state4;
    13aa:	84 e0       	ldi	r24, 0x04	; 4
    13ac:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    13b0:	19 9b       	sbis	0x03, 1	; 3
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <ButtonPress5+0xf6>
    13b4:	1a 9b       	sbis	0x03, 2	; 3
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <ButtonPress5+0xf6>
    13b8:	1b 99       	sbic	0x03, 3	; 3
    13ba:	75 c1       	rjmp	.+746    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    13bc:	20 91 00 01 	lds	r18, 0x0100
    13c0:	82 2f       	mov	r24, r18
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	99 23       	and	r25, r25
    13c8:	24 f0       	brlt	.+8      	; 0x13d2 <ButtonPress5+0x10c>
			{
				lives--;
    13ca:	21 50       	subi	r18, 0x01	; 1
    13cc:	20 93 00 01 	sts	0x0100, r18
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <ButtonPress5+0x112>
			}
			else
			{
				global_g = 20;
    13d2:	84 e1       	ldi	r24, 0x14	; 20
    13d4:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    13d8:	80 e1       	ldi	r24, 0x10	; 16
    13da:	80 93 15 01 	sts	0x0115, r24
    13de:	6f c1       	rjmp	.+734    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state4:
		if(~PINB & 0x02)
    13e0:	19 99       	sbic	0x03, 1	; 3
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <ButtonPress5+0x128>
		{
			while(~PINB & 0x02){}
    13e4:	19 9b       	sbis	0x03, 1	; 3
    13e6:	fe cf       	rjmp	.-4      	; 0x13e4 <ButtonPress5+0x11e>
			Press_fifth_level = Press5_state5;
    13e8:	85 e0       	ldi	r24, 0x05	; 5
    13ea:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    13ee:	18 9b       	sbis	0x03, 0	; 3
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <ButtonPress5+0x134>
    13f2:	1a 9b       	sbis	0x03, 2	; 3
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <ButtonPress5+0x134>
    13f6:	1b 99       	sbic	0x03, 3	; 3
    13f8:	56 c1       	rjmp	.+684    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    13fa:	20 91 00 01 	lds	r18, 0x0100
    13fe:	82 2f       	mov	r24, r18
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	99 23       	and	r25, r25
    1406:	24 f0       	brlt	.+8      	; 0x1410 <ButtonPress5+0x14a>
			{
				lives--;
    1408:	21 50       	subi	r18, 0x01	; 1
    140a:	20 93 00 01 	sts	0x0100, r18
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <ButtonPress5+0x150>
			}
			else
			{
				global_g = 20;
    1410:	84 e1       	ldi	r24, 0x14	; 20
    1412:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	80 93 15 01 	sts	0x0115, r24
    141c:	50 c1       	rjmp	.+672    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state5:
		if(~PINB & 0x01)
    141e:	18 99       	sbic	0x03, 0	; 3
    1420:	05 c0       	rjmp	.+10     	; 0x142c <ButtonPress5+0x166>
		{
			while(~PINB & 0x01){}
    1422:	18 9b       	sbis	0x03, 0	; 3
    1424:	fe cf       	rjmp	.-4      	; 0x1422 <ButtonPress5+0x15c>
			Press_fifth_level = Press5_state6;
    1426:	86 e0       	ldi	r24, 0x06	; 6
    1428:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    142c:	19 9b       	sbis	0x03, 1	; 3
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <ButtonPress5+0x172>
    1430:	1a 9b       	sbis	0x03, 2	; 3
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <ButtonPress5+0x172>
    1434:	1b 99       	sbic	0x03, 3	; 3
    1436:	37 c1       	rjmp	.+622    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    1438:	20 91 00 01 	lds	r18, 0x0100
    143c:	82 2f       	mov	r24, r18
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	99 23       	and	r25, r25
    1444:	24 f0       	brlt	.+8      	; 0x144e <ButtonPress5+0x188>
			{
				lives--;
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	20 93 00 01 	sts	0x0100, r18
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <ButtonPress5+0x18e>
			}
			else
			{
				global_g = 20;
    144e:	84 e1       	ldi	r24, 0x14	; 20
    1450:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    1454:	80 e1       	ldi	r24, 0x10	; 16
    1456:	80 93 15 01 	sts	0x0115, r24
    145a:	31 c1       	rjmp	.+610    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state6:
		if(~PINB & 0x04)
    145c:	1a 99       	sbic	0x03, 2	; 3
    145e:	05 c0       	rjmp	.+10     	; 0x146a <ButtonPress5+0x1a4>
		{
			
			while(~PINB & 0x04){}
    1460:	1a 9b       	sbis	0x03, 2	; 3
    1462:	fe cf       	rjmp	.-4      	; 0x1460 <ButtonPress5+0x19a>
			Press_fifth_level = Press5_state7;
    1464:	87 e0       	ldi	r24, 0x07	; 7
    1466:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
    146a:	19 9b       	sbis	0x03, 1	; 3
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <ButtonPress5+0x1b0>
    146e:	18 9b       	sbis	0x03, 0	; 3
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <ButtonPress5+0x1b0>
    1472:	1b 99       	sbic	0x03, 3	; 3
    1474:	18 c1       	rjmp	.+560    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    1476:	20 91 00 01 	lds	r18, 0x0100
    147a:	82 2f       	mov	r24, r18
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	99 23       	and	r25, r25
    1482:	24 f0       	brlt	.+8      	; 0x148c <ButtonPress5+0x1c6>
			{
				lives--;
    1484:	21 50       	subi	r18, 0x01	; 1
    1486:	20 93 00 01 	sts	0x0100, r18
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <ButtonPress5+0x1cc>
			}
			else
			{
				global_g = 20;
    148c:	84 e1       	ldi	r24, 0x14	; 20
    148e:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    1492:	80 e1       	ldi	r24, 0x10	; 16
    1494:	80 93 15 01 	sts	0x0115, r24
    1498:	12 c1       	rjmp	.+548    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state7:
		if(~PINB & 0x08)
    149a:	1b 99       	sbic	0x03, 3	; 3
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <ButtonPress5+0x1e2>
		{
			while(~PINB & 0x08){}
    149e:	1b 9b       	sbis	0x03, 3	; 3
    14a0:	fe cf       	rjmp	.-4      	; 0x149e <ButtonPress5+0x1d8>
			Press_fifth_level = Press5_state8;
    14a2:	88 e0       	ldi	r24, 0x08	; 8
    14a4:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
    14a8:	19 9b       	sbis	0x03, 1	; 3
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <ButtonPress5+0x1ee>
    14ac:	1a 9b       	sbis	0x03, 2	; 3
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <ButtonPress5+0x1ee>
    14b0:	18 99       	sbic	0x03, 0	; 3
    14b2:	f9 c0       	rjmp	.+498    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    14b4:	20 91 00 01 	lds	r18, 0x0100
    14b8:	82 2f       	mov	r24, r18
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	99 23       	and	r25, r25
    14c0:	24 f0       	brlt	.+8      	; 0x14ca <ButtonPress5+0x204>
			{
				lives--;
    14c2:	21 50       	subi	r18, 0x01	; 1
    14c4:	20 93 00 01 	sts	0x0100, r18
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <ButtonPress5+0x20a>
			}
			else
			{
				global_g = 20;
    14ca:	84 e1       	ldi	r24, 0x14	; 20
    14cc:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    14d0:	80 e1       	ldi	r24, 0x10	; 16
    14d2:	80 93 15 01 	sts	0x0115, r24
    14d6:	f3 c0       	rjmp	.+486    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state8:
		if(~PINB & 0x02)
    14d8:	19 99       	sbic	0x03, 1	; 3
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <ButtonPress5+0x220>
		{
			while(~PINB & 0x02){}
    14dc:	19 9b       	sbis	0x03, 1	; 3
    14de:	fe cf       	rjmp	.-4      	; 0x14dc <ButtonPress5+0x216>
			Press_fifth_level = Press5_state9;
    14e0:	89 e0       	ldi	r24, 0x09	; 9
    14e2:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    14e6:	18 9b       	sbis	0x03, 0	; 3
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <ButtonPress5+0x22c>
    14ea:	1a 9b       	sbis	0x03, 2	; 3
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <ButtonPress5+0x22c>
    14ee:	1b 99       	sbic	0x03, 3	; 3
    14f0:	da c0       	rjmp	.+436    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    14f2:	20 91 00 01 	lds	r18, 0x0100
    14f6:	82 2f       	mov	r24, r18
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	99 23       	and	r25, r25
    14fe:	24 f0       	brlt	.+8      	; 0x1508 <ButtonPress5+0x242>
			{
				lives--;
    1500:	21 50       	subi	r18, 0x01	; 1
    1502:	20 93 00 01 	sts	0x0100, r18
    1506:	03 c0       	rjmp	.+6      	; 0x150e <ButtonPress5+0x248>
			}
			else
			{
				global_g = 20;
    1508:	84 e1       	ldi	r24, 0x14	; 20
    150a:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    150e:	80 e1       	ldi	r24, 0x10	; 16
    1510:	80 93 15 01 	sts	0x0115, r24
    1514:	d4 c0       	rjmp	.+424    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state9:
		if(~PINB & 0x01)
    1516:	18 99       	sbic	0x03, 0	; 3
    1518:	05 c0       	rjmp	.+10     	; 0x1524 <ButtonPress5+0x25e>
		{
			while(~PINB & 0x01){}
    151a:	18 9b       	sbis	0x03, 0	; 3
    151c:	fe cf       	rjmp	.-4      	; 0x151a <ButtonPress5+0x254>
			Press_fifth_level = Press5_state10;
    151e:	8a e0       	ldi	r24, 0x0A	; 10
    1520:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    1524:	19 9b       	sbis	0x03, 1	; 3
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <ButtonPress5+0x26a>
    1528:	1a 9b       	sbis	0x03, 2	; 3
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <ButtonPress5+0x26a>
    152c:	1b 99       	sbic	0x03, 3	; 3
    152e:	bb c0       	rjmp	.+374    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    1530:	20 91 00 01 	lds	r18, 0x0100
    1534:	82 2f       	mov	r24, r18
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	99 23       	and	r25, r25
    153c:	24 f0       	brlt	.+8      	; 0x1546 <ButtonPress5+0x280>
			{
				lives--;
    153e:	21 50       	subi	r18, 0x01	; 1
    1540:	20 93 00 01 	sts	0x0100, r18
    1544:	03 c0       	rjmp	.+6      	; 0x154c <ButtonPress5+0x286>
			}
			else
			{
				global_g = 20;
    1546:	84 e1       	ldi	r24, 0x14	; 20
    1548:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    154c:	80 e1       	ldi	r24, 0x10	; 16
    154e:	80 93 15 01 	sts	0x0115, r24
    1552:	b5 c0       	rjmp	.+362    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state10:
		if(~PINB & 0x02)
    1554:	19 99       	sbic	0x03, 1	; 3
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <ButtonPress5+0x29c>
		{
			while(~PINB & 0x02){}
    1558:	19 9b       	sbis	0x03, 1	; 3
    155a:	fe cf       	rjmp	.-4      	; 0x1558 <ButtonPress5+0x292>
			Press_fifth_level = Press5_state11;
    155c:	8b e0       	ldi	r24, 0x0B	; 11
    155e:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
    1562:	18 9b       	sbis	0x03, 0	; 3
    1564:	04 c0       	rjmp	.+8      	; 0x156e <ButtonPress5+0x2a8>
    1566:	1a 9b       	sbis	0x03, 2	; 3
    1568:	02 c0       	rjmp	.+4      	; 0x156e <ButtonPress5+0x2a8>
    156a:	1b 99       	sbic	0x03, 3	; 3
    156c:	9c c0       	rjmp	.+312    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    156e:	20 91 00 01 	lds	r18, 0x0100
    1572:	82 2f       	mov	r24, r18
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	99 23       	and	r25, r25
    157a:	24 f0       	brlt	.+8      	; 0x1584 <ButtonPress5+0x2be>
			{
				lives--;
    157c:	21 50       	subi	r18, 0x01	; 1
    157e:	20 93 00 01 	sts	0x0100, r18
    1582:	03 c0       	rjmp	.+6      	; 0x158a <ButtonPress5+0x2c4>
			}
			else
			{
				global_g = 20;
    1584:	84 e1       	ldi	r24, 0x14	; 20
    1586:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    158a:	80 e1       	ldi	r24, 0x10	; 16
    158c:	80 93 15 01 	sts	0x0115, r24
    1590:	96 c0       	rjmp	.+300    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state11:
		if(~PINB & 0x01)
    1592:	18 99       	sbic	0x03, 0	; 3
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <ButtonPress5+0x2da>
		{
			while(~PINB & 0x01){}
    1596:	18 9b       	sbis	0x03, 0	; 3
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <ButtonPress5+0x2d0>
			Press_fifth_level = Press5_state12;
    159a:	8c e0       	ldi	r24, 0x0C	; 12
    159c:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    15a0:	19 9b       	sbis	0x03, 1	; 3
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <ButtonPress5+0x2e6>
    15a4:	1a 9b       	sbis	0x03, 2	; 3
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <ButtonPress5+0x2e6>
    15a8:	1b 99       	sbic	0x03, 3	; 3
    15aa:	7d c0       	rjmp	.+250    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    15ac:	20 91 00 01 	lds	r18, 0x0100
    15b0:	82 2f       	mov	r24, r18
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	99 23       	and	r25, r25
    15b8:	24 f0       	brlt	.+8      	; 0x15c2 <ButtonPress5+0x2fc>
			{
				lives--;
    15ba:	21 50       	subi	r18, 0x01	; 1
    15bc:	20 93 00 01 	sts	0x0100, r18
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <ButtonPress5+0x302>
			}
			else
			{
				global_g = 20;
    15c2:	84 e1       	ldi	r24, 0x14	; 20
    15c4:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    15c8:	80 e1       	ldi	r24, 0x10	; 16
    15ca:	80 93 15 01 	sts	0x0115, r24
    15ce:	77 c0       	rjmp	.+238    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state12:
		if(~PINB & 0x04)
    15d0:	1a 99       	sbic	0x03, 2	; 3
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <ButtonPress5+0x318>
		{
			while(~PINB & 0x04){}
    15d4:	1a 9b       	sbis	0x03, 2	; 3
    15d6:	fe cf       	rjmp	.-4      	; 0x15d4 <ButtonPress5+0x30e>
			Press_fifth_level = Press5_state13;
    15d8:	8d e0       	ldi	r24, 0x0D	; 13
    15da:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
    15de:	19 9b       	sbis	0x03, 1	; 3
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <ButtonPress5+0x324>
    15e2:	18 9b       	sbis	0x03, 0	; 3
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <ButtonPress5+0x324>
    15e6:	1b 99       	sbic	0x03, 3	; 3
    15e8:	5e c0       	rjmp	.+188    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    15ea:	20 91 00 01 	lds	r18, 0x0100
    15ee:	82 2f       	mov	r24, r18
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	99 23       	and	r25, r25
    15f6:	24 f0       	brlt	.+8      	; 0x1600 <ButtonPress5+0x33a>
			{
				lives--;
    15f8:	21 50       	subi	r18, 0x01	; 1
    15fa:	20 93 00 01 	sts	0x0100, r18
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <ButtonPress5+0x340>
			}
			else
			{
				global_g = 20;
    1600:	84 e1       	ldi	r24, 0x14	; 20
    1602:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    1606:	80 e1       	ldi	r24, 0x10	; 16
    1608:	80 93 15 01 	sts	0x0115, r24
    160c:	58 c0       	rjmp	.+176    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state13:
		if(~PINB & 0x08)
    160e:	1b 99       	sbic	0x03, 3	; 3
    1610:	05 c0       	rjmp	.+10     	; 0x161c <ButtonPress5+0x356>
		{
			while(~PINB & 0x08){}
    1612:	1b 9b       	sbis	0x03, 3	; 3
    1614:	fe cf       	rjmp	.-4      	; 0x1612 <ButtonPress5+0x34c>
			Press_fifth_level = Press5_state14;
    1616:	8e e0       	ldi	r24, 0x0E	; 14
    1618:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
    161c:	19 9b       	sbis	0x03, 1	; 3
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <ButtonPress5+0x362>
    1620:	1a 9b       	sbis	0x03, 2	; 3
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <ButtonPress5+0x362>
    1624:	18 99       	sbic	0x03, 0	; 3
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    1628:	20 91 00 01 	lds	r18, 0x0100
    162c:	82 2f       	mov	r24, r18
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	99 23       	and	r25, r25
    1634:	24 f0       	brlt	.+8      	; 0x163e <ButtonPress5+0x378>
			{
				lives--;
    1636:	21 50       	subi	r18, 0x01	; 1
    1638:	20 93 00 01 	sts	0x0100, r18
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <ButtonPress5+0x37e>
			}
			else
			{
				global_g = 20;
    163e:	84 e1       	ldi	r24, 0x14	; 20
    1640:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    1644:	80 e1       	ldi	r24, 0x10	; 16
    1646:	80 93 15 01 	sts	0x0115, r24
    164a:	39 c0       	rjmp	.+114    	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state14:
		if(~PINB & 0x01)
    164c:	18 99       	sbic	0x03, 0	; 3
    164e:	05 c0       	rjmp	.+10     	; 0x165a <ButtonPress5+0x394>
		{
			while(~PINB & 0x01){}
    1650:	18 9b       	sbis	0x03, 0	; 3
    1652:	fe cf       	rjmp	.-4      	; 0x1650 <ButtonPress5+0x38a>
			Press_fifth_level = Press5_state15;
    1654:	8f e0       	ldi	r24, 0x0F	; 15
    1656:	80 93 15 01 	sts	0x0115, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
    165a:	19 9b       	sbis	0x03, 1	; 3
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <ButtonPress5+0x3a0>
    165e:	1a 9b       	sbis	0x03, 2	; 3
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <ButtonPress5+0x3a0>
    1662:	1b 99       	sbic	0x03, 3	; 3
    1664:	20 c0       	rjmp	.+64     	; 0x16a6 <ButtonPress5+0x3e0>
		{
			if(lives - 1 > -1)
    1666:	20 91 00 01 	lds	r18, 0x0100
    166a:	82 2f       	mov	r24, r18
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	99 23       	and	r25, r25
    1672:	24 f0       	brlt	.+8      	; 0x167c <ButtonPress5+0x3b6>
			{
				lives--;
    1674:	21 50       	subi	r18, 0x01	; 1
    1676:	20 93 00 01 	sts	0x0100, r18
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <ButtonPress5+0x3bc>
			}
			else
			{
				global_g = 20;
    167c:	84 e1       	ldi	r24, 0x14	; 20
    167e:	80 93 06 01 	sts	0x0106, r24
			}
			Press_fifth_level = Error5;
    1682:	80 e1       	ldi	r24, 0x10	; 16
    1684:	80 93 15 01 	sts	0x0115, r24
    1688:	1a c0       	rjmp	.+52     	; 0x16be <ButtonPress5+0x3f8>
		}
		break;
		case Press5_state15:
		if(~PINB & 0x10)
    168a:	1c 99       	sbic	0x03, 4	; 3
    168c:	9f c0       	rjmp	.+318    	; 0x17cc <ButtonPress5+0x506>
		{
			Press_fifth_level = Off5;
    168e:	81 e1       	ldi	r24, 0x11	; 17
    1690:	80 93 15 01 	sts	0x0115, r24
    1694:	a4 c0       	rjmp	.+328    	; 0x17de <ButtonPress5+0x518>
		}
		break;
		case Error5:
		if(~PINB & 0x08)
    1696:	1b 99       	sbic	0x03, 3	; 3
    1698:	12 c0       	rjmp	.+36     	; 0x16be <ButtonPress5+0x3f8>
		{
			while(~PINB & 0x08){}
    169a:	1b 9b       	sbis	0x03, 3	; 3
    169c:	fe cf       	rjmp	.-4      	; 0x169a <ButtonPress5+0x3d4>
			Press_fifth_level = Press5_state1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 15 01 	sts	0x0115, r24
    16a4:	15 c0       	rjmp	.+42     	; 0x16d0 <ButtonPress5+0x40a>
		}
		break;
	}
	switch(Press_fifth_level)
    16a6:	80 91 15 01 	lds	r24, 0x0115
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	fc 01       	movw	r30, r24
    16ae:	31 97       	sbiw	r30, 0x01	; 1
    16b0:	e1 31       	cpi	r30, 0x11	; 17
    16b2:	f1 05       	cpc	r31, r1
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <ButtonPress5+0x3f2>
    16b6:	94 c0       	rjmp	.+296    	; 0x17e0 <ButtonPress5+0x51a>
    16b8:	ec 50       	subi	r30, 0x0C	; 12
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	3d c2       	rjmp	.+1146   	; 0x1b38 <__tablejump2__>
	{
		case Error5:
		transmit_data(simon_SevenSeg(lives));
    16be:	80 91 00 01 	lds	r24, 0x0100
    16c2:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    16c6:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x10;
    16ca:	80 e1       	ldi	r24, 0x10	; 16
    16cc:	82 b9       	out	0x02, r24	; 2
		break;
    16ce:	08 95       	ret
		case Press5_state1:
		transmit_data(simon_SevenSeg(lives));
    16d0:	80 91 00 01 	lds	r24, 0x0100
    16d4:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    16d8:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x08;
    16dc:	88 e0       	ldi	r24, 0x08	; 8
    16de:	82 b9       	out	0x02, r24	; 2
		break;
    16e0:	08 95       	ret
		case Press5_state2:
		transmit_data(simon_SevenSeg(lives));
    16e2:	80 91 00 01 	lds	r24, 0x0100
    16e6:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    16ea:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x04;
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	82 b9       	out	0x02, r24	; 2
		break;
    16f2:	08 95       	ret
		case Press5_state3:
		transmit_data(simon_SevenSeg(lives));
    16f4:	80 91 00 01 	lds	r24, 0x0100
    16f8:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    16fc:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x02;
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	82 b9       	out	0x02, r24	; 2
		break;
    1704:	08 95       	ret
		case Press5_state4:
		transmit_data(simon_SevenSeg(lives));
    1706:	80 91 00 01 	lds	r24, 0x0100
    170a:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    170e:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x01;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	82 b9       	out	0x02, r24	; 2
		break;
    1716:	08 95       	ret
		case Press5_state5:
		transmit_data(simon_SevenSeg(lives));
    1718:	80 91 00 01 	lds	r24, 0x0100
    171c:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    1720:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x02;
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	82 b9       	out	0x02, r24	; 2
		break;
    1728:	08 95       	ret
		case Press5_state6:
		transmit_data(simon_SevenSeg(lives));
    172a:	80 91 00 01 	lds	r24, 0x0100
    172e:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    1732:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x01;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	82 b9       	out	0x02, r24	; 2
		break;
    173a:	08 95       	ret
		case Press5_state7:
		transmit_data(simon_SevenSeg(lives));
    173c:	80 91 00 01 	lds	r24, 0x0100
    1740:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    1744:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x04;
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	82 b9       	out	0x02, r24	; 2
		break;
    174c:	08 95       	ret
		case Press5_state8:
		transmit_data(simon_SevenSeg(lives));
    174e:	80 91 00 01 	lds	r24, 0x0100
    1752:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    1756:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x08;
    175a:	88 e0       	ldi	r24, 0x08	; 8
    175c:	82 b9       	out	0x02, r24	; 2
		break;
    175e:	08 95       	ret
		case Press5_state9:
		transmit_data(simon_SevenSeg(lives));
    1760:	80 91 00 01 	lds	r24, 0x0100
    1764:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    1768:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x02;
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	82 b9       	out	0x02, r24	; 2
		break;
    1770:	08 95       	ret
		case Press5_state10:
		transmit_data(simon_SevenSeg(lives));
    1772:	80 91 00 01 	lds	r24, 0x0100
    1776:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    177a:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x01;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	82 b9       	out	0x02, r24	; 2
		break;
    1782:	08 95       	ret
		case Press5_state11:
		transmit_data(simon_SevenSeg(lives));
    1784:	80 91 00 01 	lds	r24, 0x0100
    1788:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    178c:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x02;
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	82 b9       	out	0x02, r24	; 2
		break;
    1794:	08 95       	ret
		case Press5_state12:
		transmit_data(simon_SevenSeg(lives));
    1796:	80 91 00 01 	lds	r24, 0x0100
    179a:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    179e:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x01;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	82 b9       	out	0x02, r24	; 2
		break;
    17a6:	08 95       	ret
		case Press5_state13:
		transmit_data(simon_SevenSeg(lives));
    17a8:	80 91 00 01 	lds	r24, 0x0100
    17ac:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    17b0:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x04;
    17b4:	84 e0       	ldi	r24, 0x04	; 4
    17b6:	82 b9       	out	0x02, r24	; 2
		break;
    17b8:	08 95       	ret
		case Press5_state14:
		transmit_data(simon_SevenSeg(lives));
    17ba:	80 91 00 01 	lds	r24, 0x0100
    17be:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    17c2:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x08;
    17c6:	88 e0       	ldi	r24, 0x08	; 8
    17c8:	82 b9       	out	0x02, r24	; 2
		break;
    17ca:	08 95       	ret
		case Press5_state15:
		transmit_data(simon_SevenSeg(lives));
    17cc:	80 91 00 01 	lds	r24, 0x0100
    17d0:	0e 94 a2 01 	call	0x344	; 0x344 <simon_SevenSeg>
    17d4:	0e 94 85 01 	call	0x30a	; 0x30a <transmit_data>
		PORTA = 0x01;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	82 b9       	out	0x02, r24	; 2
		break;
    17dc:	08 95       	ret
		case Off5:
		PORTA = 0x00;
    17de:	12 b8       	out	0x02, r1	; 2
    17e0:	08 95       	ret

000017e2 <main>:
	}
}


int main(void)
{
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
	DDRA = 0xFF;	PORTA = 0x00;
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	81 b9       	out	0x01, r24	; 1
    17ee:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00;	PORTB = 0xFF;
    17f0:	14 b8       	out	0x04, r1	; 4
    17f2:	85 b9       	out	0x05, r24	; 5
	DDRD = 0xFF;	PORTD = 0x00;
    17f4:	8a b9       	out	0x0a, r24	; 10
    17f6:	1b b8       	out	0x0b, r1	; 11
	
	if(global_g == 0)
    17f8:	80 91 06 01 	lds	r24, 0x0106
    17fc:	81 11       	cpse	r24, r1
    17fe:	95 c1       	rjmp	.+810    	; 0x1b2a <main+0x348>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1800:	0f 2e       	mov	r0, r31
    1802:	f4 ef       	ldi	r31, 0xF4	; 244
    1804:	cf 2e       	mov	r12, r31
    1806:	dd 24       	eor	r13, r13
    1808:	d3 94       	inc	r13
    180a:	e1 2c       	mov	r14, r1
    180c:	f1 2c       	mov	r15, r1
    180e:	f0 2d       	mov	r31, r0
    1810:	c0 92 01 01 	sts	0x0101, r12
    1814:	d0 92 02 01 	sts	0x0102, r13
    1818:	e0 92 03 01 	sts	0x0103, r14
    181c:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1820:	c0 92 07 01 	sts	0x0107, r12
    1824:	d0 92 08 01 	sts	0x0108, r13
    1828:	e0 92 09 01 	sts	0x0109, r14
    182c:	f0 92 0a 01 	sts	0x010A, r15
	if(global_g == 0)
	{
		while(global_g == 0)
		{
			TimerSet(500);
			TimerOn();
    1830:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_State_machine_1();
    1834:	0e 94 cc 01 	call	0x398	; 0x398 <TickFct_State_machine_1>
			while(!TimerFlag);
    1838:	80 91 0b 01 	lds	r24, 0x010B
    183c:	88 23       	and	r24, r24
    183e:	e1 f3       	breq	.-8      	; 0x1838 <main+0x56>
			TimerFlag = 0;	
    1840:	10 92 0b 01 	sts	0x010B, r1
	DDRB = 0x00;	PORTB = 0xFF;
	DDRD = 0xFF;	PORTD = 0x00;
	
	if(global_g == 0)
	{
		while(global_g == 0)
    1844:	80 91 06 01 	lds	r24, 0x0106
    1848:	88 23       	and	r24, r24
    184a:	11 f3       	breq	.-60     	; 0x1810 <main+0x2e>
			TimerOn();
			TickFct_State_machine_1();
			while(!TimerFlag);
			TimerFlag = 0;	
		}
		while(global_g == 1)
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	29 f5       	brne	.+74     	; 0x189a <main+0xb8>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1850:	0f 2e       	mov	r0, r31
    1852:	f8 ec       	ldi	r31, 0xC8	; 200
    1854:	cf 2e       	mov	r12, r31
    1856:	d1 2c       	mov	r13, r1
    1858:	e1 2c       	mov	r14, r1
    185a:	f1 2c       	mov	r15, r1
    185c:	f0 2d       	mov	r31, r0
    185e:	c0 92 01 01 	sts	0x0101, r12
    1862:	d0 92 02 01 	sts	0x0102, r13
    1866:	e0 92 03 01 	sts	0x0103, r14
    186a:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    186e:	c0 92 07 01 	sts	0x0107, r12
    1872:	d0 92 08 01 	sts	0x0108, r13
    1876:	e0 92 09 01 	sts	0x0109, r14
    187a:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;	
		}
		while(global_g == 1)
		{
			TimerSet(200);
			TimerOn();
    187e:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress();
    1882:	0e 94 17 02 	call	0x42e	; 0x42e <ButtonPress>
			while(!TimerFlag);
    1886:	80 91 0b 01 	lds	r24, 0x010B
    188a:	88 23       	and	r24, r24
    188c:	e1 f3       	breq	.-8      	; 0x1886 <main+0xa4>
			TimerFlag = 0;
    188e:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_State_machine_1();
			while(!TimerFlag);
			TimerFlag = 0;	
		}
		while(global_g == 1)
    1892:	80 91 06 01 	lds	r24, 0x0106
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	11 f3       	breq	.-60     	; 0x185e <main+0x7c>
			TimerOn();
			ButtonPress();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 2)
    189a:	80 91 06 01 	lds	r24, 0x0106
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	31 f5       	brne	.+76     	; 0x18ee <main+0x10c>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    18a2:	0f 2e       	mov	r0, r31
    18a4:	f4 ef       	ldi	r31, 0xF4	; 244
    18a6:	cf 2e       	mov	r12, r31
    18a8:	dd 24       	eor	r13, r13
    18aa:	d3 94       	inc	r13
    18ac:	e1 2c       	mov	r14, r1
    18ae:	f1 2c       	mov	r15, r1
    18b0:	f0 2d       	mov	r31, r0
    18b2:	c0 92 01 01 	sts	0x0101, r12
    18b6:	d0 92 02 01 	sts	0x0102, r13
    18ba:	e0 92 03 01 	sts	0x0103, r14
    18be:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    18c2:	c0 92 07 01 	sts	0x0107, r12
    18c6:	d0 92 08 01 	sts	0x0108, r13
    18ca:	e0 92 09 01 	sts	0x0109, r14
    18ce:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 2)
		{
			TimerSet(500);
			TimerOn();
    18d2:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine2();
    18d6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TickFct_Machine2>
			while(!TimerFlag);
    18da:	80 91 0b 01 	lds	r24, 0x010B
    18de:	88 23       	and	r24, r24
    18e0:	e1 f3       	breq	.-8      	; 0x18da <main+0xf8>
			TimerFlag = 0;
    18e2:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 2)
    18e6:	80 91 06 01 	lds	r24, 0x0106
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	11 f3       	breq	.-60     	; 0x18b2 <main+0xd0>
			TimerOn();
			TickFct_Machine2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 3)
    18ee:	80 91 06 01 	lds	r24, 0x0106
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	29 f5       	brne	.+74     	; 0x1940 <main+0x15e>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    18f6:	0f 2e       	mov	r0, r31
    18f8:	f8 ec       	ldi	r31, 0xC8	; 200
    18fa:	cf 2e       	mov	r12, r31
    18fc:	d1 2c       	mov	r13, r1
    18fe:	e1 2c       	mov	r14, r1
    1900:	f1 2c       	mov	r15, r1
    1902:	f0 2d       	mov	r31, r0
    1904:	c0 92 01 01 	sts	0x0101, r12
    1908:	d0 92 02 01 	sts	0x0102, r13
    190c:	e0 92 03 01 	sts	0x0103, r14
    1910:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1914:	c0 92 07 01 	sts	0x0107, r12
    1918:	d0 92 08 01 	sts	0x0108, r13
    191c:	e0 92 09 01 	sts	0x0109, r14
    1920:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 3)
		{
			TimerSet(200);
			TimerOn();
    1924:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress2();
    1928:	0e 94 4a 03 	call	0x694	; 0x694 <ButtonPress2>
			while(!TimerFlag);
    192c:	80 91 0b 01 	lds	r24, 0x010B
    1930:	88 23       	and	r24, r24
    1932:	e1 f3       	breq	.-8      	; 0x192c <main+0x14a>
			TimerFlag = 0;
    1934:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 3)
    1938:	80 91 06 01 	lds	r24, 0x0106
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	11 f3       	breq	.-60     	; 0x1904 <main+0x122>
			TimerOn();
			ButtonPress2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 4)
    1940:	80 91 06 01 	lds	r24, 0x0106
    1944:	84 30       	cpi	r24, 0x04	; 4
    1946:	31 f5       	brne	.+76     	; 0x1994 <main+0x1b2>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1948:	0f 2e       	mov	r0, r31
    194a:	f8 ee       	ldi	r31, 0xE8	; 232
    194c:	cf 2e       	mov	r12, r31
    194e:	f3 e0       	ldi	r31, 0x03	; 3
    1950:	df 2e       	mov	r13, r31
    1952:	e1 2c       	mov	r14, r1
    1954:	f1 2c       	mov	r15, r1
    1956:	f0 2d       	mov	r31, r0
    1958:	c0 92 01 01 	sts	0x0101, r12
    195c:	d0 92 02 01 	sts	0x0102, r13
    1960:	e0 92 03 01 	sts	0x0103, r14
    1964:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1968:	c0 92 07 01 	sts	0x0107, r12
    196c:	d0 92 08 01 	sts	0x0108, r13
    1970:	e0 92 09 01 	sts	0x0109, r14
    1974:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 4)
		{
			TimerSet(1000);
			TimerOn();
    1978:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine3();
    197c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <TickFct_Machine3>
			while(!TimerFlag);
    1980:	80 91 0b 01 	lds	r24, 0x010B
    1984:	88 23       	and	r24, r24
    1986:	e1 f3       	breq	.-8      	; 0x1980 <main+0x19e>
			TimerFlag = 0;
    1988:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 4)
    198c:	80 91 06 01 	lds	r24, 0x0106
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	11 f3       	breq	.-60     	; 0x1958 <main+0x176>
			TimerOn();
			TickFct_Machine3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 5)
    1994:	80 91 06 01 	lds	r24, 0x0106
    1998:	85 30       	cpi	r24, 0x05	; 5
    199a:	29 f5       	brne	.+74     	; 0x19e6 <main+0x204>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    199c:	0f 2e       	mov	r0, r31
    199e:	f8 ec       	ldi	r31, 0xC8	; 200
    19a0:	cf 2e       	mov	r12, r31
    19a2:	d1 2c       	mov	r13, r1
    19a4:	e1 2c       	mov	r14, r1
    19a6:	f1 2c       	mov	r15, r1
    19a8:	f0 2d       	mov	r31, r0
    19aa:	c0 92 01 01 	sts	0x0101, r12
    19ae:	d0 92 02 01 	sts	0x0102, r13
    19b2:	e0 92 03 01 	sts	0x0103, r14
    19b6:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    19ba:	c0 92 07 01 	sts	0x0107, r12
    19be:	d0 92 08 01 	sts	0x0108, r13
    19c2:	e0 92 09 01 	sts	0x0109, r14
    19c6:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 5)
		{
			TimerSet(200);
			TimerOn();
    19ca:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress3();
    19ce:	0e 94 c5 04 	call	0x98a	; 0x98a <ButtonPress3>
			while(!TimerFlag);
    19d2:	80 91 0b 01 	lds	r24, 0x010B
    19d6:	88 23       	and	r24, r24
    19d8:	e1 f3       	breq	.-8      	; 0x19d2 <main+0x1f0>
			TimerFlag = 0;
    19da:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 5)
    19de:	80 91 06 01 	lds	r24, 0x0106
    19e2:	85 30       	cpi	r24, 0x05	; 5
    19e4:	11 f3       	breq	.-60     	; 0x19aa <main+0x1c8>
			TimerOn();
			ButtonPress3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 6)
    19e6:	80 91 06 01 	lds	r24, 0x0106
    19ea:	86 30       	cpi	r24, 0x06	; 6
    19ec:	29 f5       	brne	.+74     	; 0x1a38 <main+0x256>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    19ee:	0f 2e       	mov	r0, r31
    19f0:	f4 ef       	ldi	r31, 0xF4	; 244
    19f2:	cf 2e       	mov	r12, r31
    19f4:	dd 24       	eor	r13, r13
    19f6:	d3 94       	inc	r13
    19f8:	e1 2c       	mov	r14, r1
    19fa:	f1 2c       	mov	r15, r1
    19fc:	f0 2d       	mov	r31, r0
    19fe:	c0 92 01 01 	sts	0x0101, r12
    1a02:	d0 92 02 01 	sts	0x0102, r13
    1a06:	e0 92 03 01 	sts	0x0103, r14
    1a0a:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1a0e:	c0 92 07 01 	sts	0x0107, r12
    1a12:	d0 92 08 01 	sts	0x0108, r13
    1a16:	e0 92 09 01 	sts	0x0109, r14
    1a1a:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 6)
		{
			TimerSet(500);
			TimerOn();
    1a1e:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine4();
    1a22:	45 d9       	rcall	.-3446   	; 0xcae <TickFct_Machine4>
			while(!TimerFlag);
    1a24:	80 91 0b 01 	lds	r24, 0x010B
    1a28:	88 23       	and	r24, r24
    1a2a:	e1 f3       	breq	.-8      	; 0x1a24 <main+0x242>
			TimerFlag = 0;
    1a2c:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress3();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 6)
    1a30:	80 91 06 01 	lds	r24, 0x0106
    1a34:	86 30       	cpi	r24, 0x06	; 6
    1a36:	19 f3       	breq	.-58     	; 0x19fe <main+0x21c>
			TimerOn();
			TickFct_Machine4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 7)
    1a38:	80 91 06 01 	lds	r24, 0x0106
    1a3c:	87 30       	cpi	r24, 0x07	; 7
    1a3e:	21 f5       	brne	.+72     	; 0x1a88 <main+0x2a6>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1a40:	0f 2e       	mov	r0, r31
    1a42:	f8 ec       	ldi	r31, 0xC8	; 200
    1a44:	cf 2e       	mov	r12, r31
    1a46:	d1 2c       	mov	r13, r1
    1a48:	e1 2c       	mov	r14, r1
    1a4a:	f1 2c       	mov	r15, r1
    1a4c:	f0 2d       	mov	r31, r0
    1a4e:	c0 92 01 01 	sts	0x0101, r12
    1a52:	d0 92 02 01 	sts	0x0102, r13
    1a56:	e0 92 03 01 	sts	0x0103, r14
    1a5a:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1a5e:	c0 92 07 01 	sts	0x0107, r12
    1a62:	d0 92 08 01 	sts	0x0108, r13
    1a66:	e0 92 09 01 	sts	0x0109, r14
    1a6a:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 7)
		{
			TimerSet(200);
			TimerOn();
    1a6e:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress4();
    1a72:	97 d9       	rcall	.-3282   	; 0xda2 <ButtonPress4>
			while(!TimerFlag);
    1a74:	80 91 0b 01 	lds	r24, 0x010B
    1a78:	88 23       	and	r24, r24
    1a7a:	e1 f3       	breq	.-8      	; 0x1a74 <main+0x292>
			TimerFlag = 0;
    1a7c:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 7)
    1a80:	80 91 06 01 	lds	r24, 0x0106
    1a84:	87 30       	cpi	r24, 0x07	; 7
    1a86:	19 f3       	breq	.-58     	; 0x1a4e <main+0x26c>
			TimerOn();
			ButtonPress4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 8)
    1a88:	80 91 06 01 	lds	r24, 0x0106
    1a8c:	88 30       	cpi	r24, 0x08	; 8
    1a8e:	29 f5       	brne	.+74     	; 0x1ada <main+0x2f8>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1a90:	0f 2e       	mov	r0, r31
    1a92:	f4 ef       	ldi	r31, 0xF4	; 244
    1a94:	cf 2e       	mov	r12, r31
    1a96:	dd 24       	eor	r13, r13
    1a98:	d3 94       	inc	r13
    1a9a:	e1 2c       	mov	r14, r1
    1a9c:	f1 2c       	mov	r15, r1
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	c0 92 01 01 	sts	0x0101, r12
    1aa4:	d0 92 02 01 	sts	0x0102, r13
    1aa8:	e0 92 03 01 	sts	0x0103, r14
    1aac:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1ab0:	c0 92 07 01 	sts	0x0107, r12
    1ab4:	d0 92 08 01 	sts	0x0108, r13
    1ab8:	e0 92 09 01 	sts	0x0109, r14
    1abc:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 8)
		{
			TimerSet(500);
			TimerOn();
    1ac0:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			TickFct_Machine5();
    1ac4:	71 db       	rcall	.-2334   	; 0x11a8 <TickFct_Machine5>
			while(!TimerFlag);
    1ac6:	80 91 0b 01 	lds	r24, 0x010B
    1aca:	88 23       	and	r24, r24
    1acc:	e1 f3       	breq	.-8      	; 0x1ac6 <main+0x2e4>
			TimerFlag = 0;
    1ace:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			ButtonPress4();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 8)
    1ad2:	80 91 06 01 	lds	r24, 0x0106
    1ad6:	88 30       	cpi	r24, 0x08	; 8
    1ad8:	19 f3       	breq	.-58     	; 0x1aa0 <main+0x2be>
			TimerOn();
			TickFct_Machine5();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 9)
    1ada:	80 91 06 01 	lds	r24, 0x0106
    1ade:	89 30       	cpi	r24, 0x09	; 9
    1ae0:	21 f5       	brne	.+72     	; 0x1b2a <main+0x348>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	f8 ec       	ldi	r31, 0xC8	; 200
    1ae6:	cf 2e       	mov	r12, r31
    1ae8:	d1 2c       	mov	r13, r1
    1aea:	e1 2c       	mov	r14, r1
    1aec:	f1 2c       	mov	r15, r1
    1aee:	f0 2d       	mov	r31, r0
    1af0:	c0 92 01 01 	sts	0x0101, r12
    1af4:	d0 92 02 01 	sts	0x0102, r13
    1af8:	e0 92 03 01 	sts	0x0103, r14
    1afc:	f0 92 04 01 	sts	0x0104, r15
	_avr_timer_cntcurr = _avr_timer_M;
    1b00:	c0 92 07 01 	sts	0x0107, r12
    1b04:	d0 92 08 01 	sts	0x0108, r13
    1b08:	e0 92 09 01 	sts	0x0109, r14
    1b0c:	f0 92 0a 01 	sts	0x010A, r15
			TimerFlag = 0;
		}
		while(global_g == 9)
		{
			TimerSet(200);
			TimerOn();
    1b10:	0e 94 25 01 	call	0x24a	; 0x24a <TimerOn>
			ButtonPress5();
    1b14:	d8 db       	rcall	.-2128   	; 0x12c6 <ButtonPress5>
			while(!TimerFlag);
    1b16:	80 91 0b 01 	lds	r24, 0x010B
    1b1a:	88 23       	and	r24, r24
    1b1c:	e1 f3       	breq	.-8      	; 0x1b16 <main+0x334>
			TimerFlag = 0;
    1b1e:	10 92 0b 01 	sts	0x010B, r1
			TimerOn();
			TickFct_Machine5();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 9)
    1b22:	80 91 06 01 	lds	r24, 0x0106
    1b26:	89 30       	cpi	r24, 0x09	; 9
    1b28:	19 f3       	breq	.-58     	; 0x1af0 <main+0x30e>
			TimerFlag = 0;
		}
	}
	return 0;
		
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	08 95       	ret

00001b38 <__tablejump2__>:
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31

00001b3c <__tablejump__>:
    1b3c:	05 90       	lpm	r0, Z+
    1b3e:	f4 91       	lpm	r31, Z
    1b40:	e0 2d       	mov	r30, r0
    1b42:	09 94       	ijmp

00001b44 <_exit>:
    1b44:	f8 94       	cli

00001b46 <__stop_program>:
    1b46:	ff cf       	rjmp	.-2      	; 0x1b46 <__stop_program>
