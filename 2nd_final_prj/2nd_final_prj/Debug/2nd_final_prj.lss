
2nd_final_prj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006e6  0000077a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800104  00800104  0000077e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000416  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000193  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a1  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	62 c0       	rjmp	.+196    	; 0xc6 <__ctors_end>
   2:	00 00       	nop
   4:	7d c0       	rjmp	.+250    	; 0x100 <__bad_interrupt>
   6:	00 00       	nop
   8:	7b c0       	rjmp	.+246    	; 0x100 <__bad_interrupt>
   a:	00 00       	nop
   c:	79 c0       	rjmp	.+242    	; 0x100 <__bad_interrupt>
   e:	00 00       	nop
  10:	77 c0       	rjmp	.+238    	; 0x100 <__bad_interrupt>
  12:	00 00       	nop
  14:	75 c0       	rjmp	.+234    	; 0x100 <__bad_interrupt>
  16:	00 00       	nop
  18:	73 c0       	rjmp	.+230    	; 0x100 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	71 c0       	rjmp	.+226    	; 0x100 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6f c0       	rjmp	.+222    	; 0x100 <__bad_interrupt>
  22:	00 00       	nop
  24:	6d c0       	rjmp	.+218    	; 0x100 <__bad_interrupt>
  26:	00 00       	nop
  28:	6b c0       	rjmp	.+214    	; 0x100 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	69 c0       	rjmp	.+210    	; 0x100 <__bad_interrupt>
  2e:	00 00       	nop
  30:	67 c0       	rjmp	.+206    	; 0x100 <__bad_interrupt>
  32:	00 00       	nop
  34:	8a c0       	rjmp	.+276    	; 0x14a <__vector_13>
  36:	00 00       	nop
  38:	63 c0       	rjmp	.+198    	; 0x100 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	61 c0       	rjmp	.+194    	; 0x100 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5f c0       	rjmp	.+190    	; 0x100 <__bad_interrupt>
  42:	00 00       	nop
  44:	5d c0       	rjmp	.+186    	; 0x100 <__bad_interrupt>
  46:	00 00       	nop
  48:	5b c0       	rjmp	.+182    	; 0x100 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	59 c0       	rjmp	.+178    	; 0x100 <__bad_interrupt>
  4e:	00 00       	nop
  50:	57 c0       	rjmp	.+174    	; 0x100 <__bad_interrupt>
  52:	00 00       	nop
  54:	55 c0       	rjmp	.+170    	; 0x100 <__bad_interrupt>
  56:	00 00       	nop
  58:	53 c0       	rjmp	.+166    	; 0x100 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	51 c0       	rjmp	.+162    	; 0x100 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4f c0       	rjmp	.+158    	; 0x100 <__bad_interrupt>
  62:	00 00       	nop
  64:	4d c0       	rjmp	.+154    	; 0x100 <__bad_interrupt>
  66:	00 00       	nop
  68:	4b c0       	rjmp	.+150    	; 0x100 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	49 c0       	rjmp	.+146    	; 0x100 <__bad_interrupt>
  6e:	00 00       	nop
  70:	47 c0       	rjmp	.+142    	; 0x100 <__bad_interrupt>
  72:	00 00       	nop
  74:	45 c0       	rjmp	.+138    	; 0x100 <__bad_interrupt>
  76:	00 00       	nop
  78:	43 c0       	rjmp	.+134    	; 0x100 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	41 c0       	rjmp	.+130    	; 0x100 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3f c0       	rjmp	.+126    	; 0x100 <__bad_interrupt>
  82:	00 00       	nop
  84:	3d c0       	rjmp	.+122    	; 0x100 <__bad_interrupt>
  86:	00 00       	nop
  88:	3b c0       	rjmp	.+118    	; 0x100 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bd 01       	movw	r22, r26
  8e:	cd 01       	movw	r24, r26
  90:	d1 01       	movw	r26, r2
  92:	d5 01       	movw	r26, r10
  94:	d9 01       	movw	r26, r18
  96:	dd 01       	movw	r26, r26
  98:	e1 01       	movw	r28, r2
  9a:	f1 01       	movw	r30, r2
  9c:	f3 01       	movw	r30, r6
  9e:	f6 01       	movw	r30, r12
  a0:	f9 01       	movw	r30, r18
  a2:	fc 01       	movw	r30, r24
  a4:	ff 01       	movw	r30, r30
  a6:	02 02       	muls	r16, r18
  a8:	10 02       	muls	r17, r16
  aa:	21 02       	muls	r18, r17
  ac:	32 02       	muls	r19, r18
  ae:	43 02       	muls	r20, r19
  b0:	54 02       	muls	r21, r20
  b2:	65 02       	muls	r22, r21
  b4:	76 02       	muls	r23, r22
  b6:	8d 02       	muls	r24, r29
  b8:	95 02       	muls	r25, r21
  ba:	9d 02       	muls	r25, r29
  bc:	a5 02       	muls	r26, r21
  be:	ad 02       	muls	r26, r29
  c0:	b5 02       	muls	r27, r21
  c2:	8a 02       	muls	r24, r26
  c4:	bd 02       	muls	r27, r29

000000c6 <__ctors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d0 e4       	ldi	r29, 0x40	; 64
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	e6 ee       	ldi	r30, 0xE6	; 230
  da:	f6 e0       	ldi	r31, 0x06	; 6
  dc:	00 e0       	ldi	r16, 0x00	; 0
  de:	0b bf       	out	0x3b, r16	; 59
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x14>
  e2:	07 90       	elpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	a4 30       	cpi	r26, 0x04	; 4
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0x10>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	a4 e0       	ldi	r26, 0x04	; 4
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	a1 31       	cpi	r26, 0x11	; 17
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	40 d2       	rcall	.+1152   	; 0x57e <main>
  fe:	f1 c2       	rjmp	.+1506   	; 0x6e2 <_exit>

00000100 <__bad_interrupt>:
 100:	7f cf       	rjmp	.-258    	; 0x0 <__vectors>

00000102 <TimerOn>:
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
 102:	8b e0       	ldi	r24, 0x0B	; 11
 104:	80 93 81 00 	sts	0x0081, r24
 108:	8d e7       	ldi	r24, 0x7D	; 125
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 89 00 	sts	0x0089, r25
 110:	80 93 88 00 	sts	0x0088, r24
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 6f 00 	sts	0x006F, r24
 11a:	10 92 85 00 	sts	0x0085, r1
 11e:	10 92 84 00 	sts	0x0084, r1
 122:	80 91 00 01 	lds	r24, 0x0100
 126:	90 91 01 01 	lds	r25, 0x0101
 12a:	a0 91 02 01 	lds	r26, 0x0102
 12e:	b0 91 03 01 	lds	r27, 0x0103
 132:	80 93 06 01 	sts	0x0106, r24
 136:	90 93 07 01 	sts	0x0107, r25
 13a:	a0 93 08 01 	sts	0x0108, r26
 13e:	b0 93 09 01 	sts	0x0109, r27
 142:	8f b7       	in	r24, 0x3f	; 63
 144:	80 68       	ori	r24, 0x80	; 128
 146:	8f bf       	out	0x3f, r24	; 63
 148:	08 95       	ret

0000014a <__vector_13>:
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	80 91 06 01 	lds	r24, 0x0106
 160:	90 91 07 01 	lds	r25, 0x0107
 164:	a0 91 08 01 	lds	r26, 0x0108
 168:	b0 91 09 01 	lds	r27, 0x0109
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	a1 09       	sbc	r26, r1
 170:	b1 09       	sbc	r27, r1
 172:	80 93 06 01 	sts	0x0106, r24
 176:	90 93 07 01 	sts	0x0107, r25
 17a:	a0 93 08 01 	sts	0x0108, r26
 17e:	b0 93 09 01 	sts	0x0109, r27
 182:	89 2b       	or	r24, r25
 184:	8a 2b       	or	r24, r26
 186:	8b 2b       	or	r24, r27
 188:	99 f4       	brne	.+38     	; 0x1b0 <__vector_13+0x66>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 0a 01 	sts	0x010A, r24
 190:	80 91 00 01 	lds	r24, 0x0100
 194:	90 91 01 01 	lds	r25, 0x0101
 198:	a0 91 02 01 	lds	r26, 0x0102
 19c:	b0 91 03 01 	lds	r27, 0x0103
 1a0:	80 93 06 01 	sts	0x0106, r24
 1a4:	90 93 07 01 	sts	0x0107, r25
 1a8:	a0 93 08 01 	sts	0x0108, r26
 1ac:	b0 93 09 01 	sts	0x0109, r27
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <TickFct_State_machine_1>:

enum SM1_States { SM1_off, SM1_on1, SM1_on2, SM1_on3, SM1_on4} SM1_State;

void TickFct_State_machine_1() 
{
	switch(SM1_State) 
 1c2:	80 91 0e 01 	lds	r24, 0x010E
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	c9 f0       	breq	.+50     	; 0x1fc <TickFct_State_machine_1+0x3a>
 1ca:	28 f4       	brcc	.+10     	; 0x1d6 <TickFct_State_machine_1+0x14>
 1cc:	88 23       	and	r24, r24
 1ce:	41 f0       	breq	.+16     	; 0x1e0 <TickFct_State_machine_1+0x1e>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	81 f0       	breq	.+32     	; 0x1f4 <TickFct_State_machine_1+0x32>
 1d4:	20 c0       	rjmp	.+64     	; 0x216 <TickFct_State_machine_1+0x54>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	a9 f0       	breq	.+42     	; 0x204 <TickFct_State_machine_1+0x42>
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	b9 f0       	breq	.+46     	; 0x20c <TickFct_State_machine_1+0x4a>
 1de:	1b c0       	rjmp	.+54     	; 0x216 <TickFct_State_machine_1+0x54>
	{

		case SM1_off:
		if(global_g == 0)
 1e0:	80 91 04 01 	lds	r24, 0x0104
 1e4:	81 11       	cpse	r24, r1
 1e6:	26 c0       	rjmp	.+76     	; 0x234 <TickFct_State_machine_1+0x72>
		{
			if(~PINB & 0x10)
 1e8:	1c 99       	sbic	0x03, 4	; 3
 1ea:	24 c0       	rjmp	.+72     	; 0x234 <TickFct_State_machine_1+0x72>
			{
				SM1_State = SM1_on1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 0e 01 	sts	0x010E, r24
 1f2:	22 c0       	rjmp	.+68     	; 0x238 <TickFct_State_machine_1+0x76>
				SM1_State = SM1_off;
			}
		}
		break;
		case SM1_on1:
		SM1_State = SM1_on2;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 0e 01 	sts	0x010E, r24
 1fa:	21 c0       	rjmp	.+66     	; 0x23e <TickFct_State_machine_1+0x7c>
		break;
		case SM1_on2:
		SM1_State = SM1_on3;
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	80 93 0e 01 	sts	0x010E, r24
 202:	20 c0       	rjmp	.+64     	; 0x244 <TickFct_State_machine_1+0x82>
		break;
		case SM1_on3:
		SM1_State = SM1_on4;
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	80 93 0e 01 	sts	0x010E, r24
 20a:	1f c0       	rjmp	.+62     	; 0x24a <TickFct_State_machine_1+0x88>
		break;
		case SM1_on4:
		SM1_State = SM1_off;
 20c:	10 92 0e 01 	sts	0x010E, r1
		global_g = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 04 01 	sts	0x0104, r24
	}

	switch(SM1_State) 
 216:	80 91 0e 01 	lds	r24, 0x010E
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	81 f0       	breq	.+32     	; 0x23e <TickFct_State_machine_1+0x7c>
 21e:	28 f4       	brcc	.+10     	; 0x22a <TickFct_State_machine_1+0x68>
 220:	88 23       	and	r24, r24
 222:	41 f0       	breq	.+16     	; 0x234 <TickFct_State_machine_1+0x72>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	41 f0       	breq	.+16     	; 0x238 <TickFct_State_machine_1+0x76>
 228:	08 95       	ret
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	59 f0       	breq	.+22     	; 0x244 <TickFct_State_machine_1+0x82>
 22e:	84 30       	cpi	r24, 0x04	; 4
 230:	71 f4       	brne	.+28     	; 0x24e <TickFct_State_machine_1+0x8c>
 232:	0b c0       	rjmp	.+22     	; 0x24a <TickFct_State_machine_1+0x88>
	{
		case SM1_off:
		PORTA = 0X00;
 234:	12 b8       	out	0x02, r1	; 2
		break;
 236:	08 95       	ret
		case SM1_on1:
		PORTA = 0x01;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	82 b9       	out	0x02, r24	; 2
		break;
 23c:	08 95       	ret
		case SM1_on2:
		PORTA = 0x02;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	82 b9       	out	0x02, r24	; 2
		break;
 242:	08 95       	ret
		case SM1_on3:
		PORTA = 0x04;
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	82 b9       	out	0x02, r24	; 2
		break;
 248:	08 95       	ret
		case SM1_on4:
		PORTA = 0x08;
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	82 b9       	out	0x02, r24	; 2
 24e:	08 95       	ret

00000250 <ButtonPress>:
}

enum Press_States {Init, Press1, Press2, Press3, Press4, Error, Off} Press_States;
void ButtonPress()
{
	switch(Press_States)
 250:	80 91 10 01 	lds	r24, 0x0110
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	a9 f1       	breq	.+106    	; 0x2c2 <ButtonPress+0x72>
 258:	28 f4       	brcc	.+10     	; 0x264 <ButtonPress+0x14>
 25a:	88 23       	and	r24, r24
 25c:	59 f0       	breq	.+22     	; 0x274 <ButtonPress+0x24>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	f9 f0       	breq	.+62     	; 0x2a0 <ButtonPress+0x50>
 262:	5d c0       	rjmp	.+186    	; 0x31e <ButtonPress+0xce>
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	09 f4       	brne	.+2      	; 0x26a <ButtonPress+0x1a>
 268:	4e c0       	rjmp	.+156    	; 0x306 <ButtonPress+0xb6>
 26a:	e0 f1       	brcs	.+120    	; 0x2e4 <ButtonPress+0x94>
 26c:	85 30       	cpi	r24, 0x05	; 5
 26e:	09 f4       	brne	.+2      	; 0x272 <ButtonPress+0x22>
 270:	50 c0       	rjmp	.+160    	; 0x312 <ButtonPress+0xc2>
 272:	55 c0       	rjmp	.+170    	; 0x31e <ButtonPress+0xce>
	{
		case Init:
		if(global_g == 1)
 274:	80 91 04 01 	lds	r24, 0x0104
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	09 f0       	breq	.+2      	; 0x27e <ButtonPress+0x2e>
 27c:	73 c0       	rjmp	.+230    	; 0x364 <ButtonPress+0x114>
		{
			if(~PINB & 0x01)
 27e:	18 99       	sbic	0x03, 0	; 3
 280:	05 c0       	rjmp	.+10     	; 0x28c <ButtonPress+0x3c>
			{
				while(~PINB & 0x01){}
 282:	18 9b       	sbis	0x03, 0	; 3
 284:	fe cf       	rjmp	.-4      	; 0x282 <ButtonPress+0x32>
				Press_States = Press1;	
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 10 01 	sts	0x0110, r24
			}
			if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
 28c:	19 9b       	sbis	0x03, 1	; 3
 28e:	04 c0       	rjmp	.+8      	; 0x298 <ButtonPress+0x48>
 290:	1a 9b       	sbis	0x03, 2	; 3
 292:	02 c0       	rjmp	.+4      	; 0x298 <ButtonPress+0x48>
 294:	1b 99       	sbic	0x03, 3	; 3
 296:	43 c0       	rjmp	.+134    	; 0x31e <ButtonPress+0xce>
			{
				Press_States = Error;
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	80 93 10 01 	sts	0x0110, r24
 29e:	4f c0       	rjmp	.+158    	; 0x33e <ButtonPress+0xee>
			}
		}
		break;
		
		case Press1:
		if(~PINB & 0x02)
 2a0:	19 99       	sbic	0x03, 1	; 3
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <ButtonPress+0x5e>
		{
			while(~PINB & 0x02){}
 2a4:	19 9b       	sbis	0x03, 1	; 3
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <ButtonPress+0x54>
			Press_States = Press2;
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
 2ae:	18 9b       	sbis	0x03, 0	; 3
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <ButtonPress+0x6a>
 2b2:	1a 9b       	sbis	0x03, 2	; 3
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <ButtonPress+0x6a>
 2b6:	1b 99       	sbic	0x03, 3	; 3
 2b8:	32 c0       	rjmp	.+100    	; 0x31e <ButtonPress+0xce>
		{
			Press_States = Error;
 2ba:	85 e0       	ldi	r24, 0x05	; 5
 2bc:	80 93 10 01 	sts	0x0110, r24
 2c0:	3e c0       	rjmp	.+124    	; 0x33e <ButtonPress+0xee>
		}
		break;
		case Press2:
		if(~PINB & 0x04)
 2c2:	1a 99       	sbic	0x03, 2	; 3
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <ButtonPress+0x80>
		{
			while(~PINB & 0x04){}
 2c6:	1a 9b       	sbis	0x03, 2	; 3
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <ButtonPress+0x76>
			Press_States = Press3;
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
 2d0:	19 9b       	sbis	0x03, 1	; 3
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <ButtonPress+0x8c>
 2d4:	18 9b       	sbis	0x03, 0	; 3
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <ButtonPress+0x8c>
 2d8:	1b 99       	sbic	0x03, 3	; 3
 2da:	21 c0       	rjmp	.+66     	; 0x31e <ButtonPress+0xce>
		{
			Press_States = Error;
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	80 93 10 01 	sts	0x0110, r24
 2e2:	2d c0       	rjmp	.+90     	; 0x33e <ButtonPress+0xee>
		}
		break;
		case Press3:
		if(~PINB & 0x08)
 2e4:	1b 99       	sbic	0x03, 3	; 3
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <ButtonPress+0xa2>
		{
			while(~PINB & 0x08){}
 2e8:	1b 9b       	sbis	0x03, 3	; 3
 2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <ButtonPress+0x98>
			Press_States = Press4;
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	80 93 10 01 	sts	0x0110, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
 2f2:	19 9b       	sbis	0x03, 1	; 3
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <ButtonPress+0xae>
 2f6:	1a 9b       	sbis	0x03, 2	; 3
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <ButtonPress+0xae>
 2fa:	18 99       	sbic	0x03, 0	; 3
 2fc:	10 c0       	rjmp	.+32     	; 0x31e <ButtonPress+0xce>
		{
			Press_States = Error;
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	80 93 10 01 	sts	0x0110, r24
 304:	1c c0       	rjmp	.+56     	; 0x33e <ButtonPress+0xee>
		}
		break;
		case Press4:
		if(~PINB & 0x10)
 306:	1c 99       	sbic	0x03, 4	; 3
 308:	26 c0       	rjmp	.+76     	; 0x356 <ButtonPress+0x106>
		{
			Press_States = Off;	
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	80 93 10 01 	sts	0x0110, r24
 310:	25 c0       	rjmp	.+74     	; 0x35c <ButtonPress+0x10c>
		}
		break;
		case Error:
		if(~PINB & 0x01)
 312:	18 99       	sbic	0x03, 0	; 3
 314:	14 c0       	rjmp	.+40     	; 0x33e <ButtonPress+0xee>
		{
			Press_States = Press1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 10 01 	sts	0x0110, r24
 31c:	13 c0       	rjmp	.+38     	; 0x344 <ButtonPress+0xf4>
		}
		break;
	}
	switch(Press_States)
 31e:	80 91 10 01 	lds	r24, 0x0110
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	a9 f0       	breq	.+42     	; 0x350 <ButtonPress+0x100>
 326:	28 f4       	brcc	.+10     	; 0x332 <ButtonPress+0xe2>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	61 f0       	breq	.+24     	; 0x344 <ButtonPress+0xf4>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	69 f0       	breq	.+26     	; 0x34a <ButtonPress+0xfa>
 330:	08 95       	ret
 332:	85 30       	cpi	r24, 0x05	; 5
 334:	21 f0       	breq	.+8      	; 0x33e <ButtonPress+0xee>
 336:	78 f0       	brcs	.+30     	; 0x356 <ButtonPress+0x106>
 338:	86 30       	cpi	r24, 0x06	; 6
 33a:	81 f0       	breq	.+32     	; 0x35c <ButtonPress+0x10c>
 33c:	08 95       	ret
	{
		case Error:
		PORTA = 0x10;
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	82 b9       	out	0x02, r24	; 2
		break;
 342:	08 95       	ret
		
		case Press1:
		PORTA = 0x01;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	82 b9       	out	0x02, r24	; 2
		break;
 348:	08 95       	ret
		
		case Press2:
		PORTA = 0x02;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	82 b9       	out	0x02, r24	; 2
		break;
 34e:	08 95       	ret
		
		case Press3:
		PORTA = 0x04;
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	82 b9       	out	0x02, r24	; 2
		break;
 354:	08 95       	ret
		
		case Press4:
		PORTA = 0x08;
 356:	88 e0       	ldi	r24, 0x08	; 8
 358:	82 b9       	out	0x02, r24	; 2
		break;
 35a:	08 95       	ret
		case Off:
		PORTA = 0x00;
 35c:	12 b8       	out	0x02, r1	; 2
		global_g = 2;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	80 93 04 01 	sts	0x0104, r24
 364:	08 95       	ret

00000366 <TickFct_Machine2>:
}

enum SM2_State {SM2_off, SM2_on1, SM2_on2, SM2_on3, SM2_on4, SM2_on5, SM2_on6} SM2_States;
void TickFct_Machine2()
{
	switch(SM2_States)
 366:	80 91 0d 01 	lds	r24, 0x010D
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	87 30       	cpi	r24, 0x07	; 7
 36e:	91 05       	cpc	r25, r1
 370:	70 f5       	brcc	.+92     	; 0x3ce <TickFct_Machine2+0x68>
 372:	fc 01       	movw	r30, r24
 374:	ea 5b       	subi	r30, 0xBA	; 186
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	ae c1       	rjmp	.+860    	; 0x6d6 <__tablejump2__>
	{
		case SM2_off:
		if(global_g == 2)
 37a:	80 91 04 01 	lds	r24, 0x0104
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	81 f5       	brne	.+96     	; 0x3e2 <TickFct_Machine2+0x7c>
		{
			if(~PINB & 0x01)
 382:	18 99       	sbic	0x03, 0	; 3
 384:	03 c0       	rjmp	.+6      	; 0x38c <TickFct_Machine2+0x26>
			{
				SM2_States = SM2_on1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 0d 01 	sts	0x010D, r24
			}
			while(!(~PINB & 0x01))
 38c:	18 9b       	sbis	0x03, 0	; 3
 38e:	1f c0       	rjmp	.+62     	; 0x3ce <TickFct_Machine2+0x68>
			{
				SM2_States = SM2_off;
 390:	10 92 0d 01 	sts	0x010D, r1
		{
			if(~PINB & 0x01)
			{
				SM2_States = SM2_on1;
			}
			while(!(~PINB & 0x01))
 394:	18 99       	sbic	0x03, 0	; 3
 396:	fc cf       	rjmp	.-8      	; 0x390 <TickFct_Machine2+0x2a>
 398:	24 c0       	rjmp	.+72     	; 0x3e2 <TickFct_Machine2+0x7c>
		else{
			SM2_States = SM2_off;
		}
		break;
		case SM2_on1:
		SM2_States = SM2_on2;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 93 0d 01 	sts	0x010D, r24
 3a0:	25 c0       	rjmp	.+74     	; 0x3ec <TickFct_Machine2+0x86>
		break;
		case SM2_on2:
		SM2_States = SM2_on3;
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	80 93 0d 01 	sts	0x010D, r24
 3a8:	24 c0       	rjmp	.+72     	; 0x3f2 <TickFct_Machine2+0x8c>
		break;
		case SM2_on3:
		SM2_States = SM2_on4;
 3aa:	84 e0       	ldi	r24, 0x04	; 4
 3ac:	80 93 0d 01 	sts	0x010D, r24
 3b0:	23 c0       	rjmp	.+70     	; 0x3f8 <TickFct_Machine2+0x92>
		break;
		case SM2_on4:
		SM2_States = SM2_on5;
 3b2:	85 e0       	ldi	r24, 0x05	; 5
 3b4:	80 93 0d 01 	sts	0x010D, r24
 3b8:	22 c0       	rjmp	.+68     	; 0x3fe <TickFct_Machine2+0x98>
		break;
		case SM2_on5:
		SM2_States = SM2_on6;
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	80 93 0d 01 	sts	0x010D, r24
 3c0:	21 c0       	rjmp	.+66     	; 0x404 <TickFct_Machine2+0x9e>
		break;
		case SM2_on6:
		global_g = 3;
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	80 93 04 01 	sts	0x0104, r24
		SM2_States = SM2_off;
 3c8:	10 92 0d 01 	sts	0x010D, r1
		break;
 3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <TickFct_Machine2+0x7c>
	}

	switch(SM2_States)
 3ce:	80 91 0d 01 	lds	r24, 0x010D
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	87 30       	cpi	r24, 0x07	; 7
 3d6:	91 05       	cpc	r25, r1
 3d8:	b8 f4       	brcc	.+46     	; 0x408 <TickFct_Machine2+0xa2>
 3da:	fc 01       	movw	r30, r24
 3dc:	e3 5b       	subi	r30, 0xB3	; 179
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	7a c1       	rjmp	.+756    	; 0x6d6 <__tablejump2__>
	{
		case SM2_off:
		PORTA = 0x00;
 3e2:	12 b8       	out	0x02, r1	; 2
		break;
 3e4:	08 95       	ret
		case SM2_on1:
		PORTA = 0x01;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	82 b9       	out	0x02, r24	; 2
		break;
 3ea:	08 95       	ret
		case SM2_on2:
		PORTA = 0x04;
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	82 b9       	out	0x02, r24	; 2
		break;
 3f0:	08 95       	ret
		case SM2_on3:
		PORTA = 0x08;
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	82 b9       	out	0x02, r24	; 2
		break;
 3f6:	08 95       	ret
		case SM2_on4:
		PORTA = 0x01;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	82 b9       	out	0x02, r24	; 2
		break;
 3fc:	08 95       	ret
		case SM2_on5:
		PORTA = 0x02;
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	82 b9       	out	0x02, r24	; 2
		break;
 402:	08 95       	ret
		case SM2_on6:
		PORTA = 0x01;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	82 b9       	out	0x02, r24	; 2
 408:	08 95       	ret

0000040a <ButtonPress2>:
}

enum Press_sec_level{Init2, Press_state1, Press_state2, Press_state3, Press_state4, Press_state5, Press_state6, Error2, Off2} Press_sec_level;
void ButtonPress2()
{
	switch(Press_sec_level)
 40a:	80 91 0b 01 	lds	r24, 0x010B
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	87 30       	cpi	r24, 0x07	; 7
 412:	91 05       	cpc	r25, r1
 414:	08 f0       	brcs	.+2      	; 0x418 <ButtonPress2+0xe>
 416:	70 c0       	rjmp	.+224    	; 0x4f8 <ButtonPress2+0xee>
 418:	fc 01       	movw	r30, r24
 41a:	ec 5a       	subi	r30, 0xAC	; 172
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	5b c1       	rjmp	.+694    	; 0x6d6 <__tablejump2__>
	{
		case Init2:
		if(~PINB & 0x01)
 420:	18 99       	sbic	0x03, 0	; 3
 422:	05 c0       	rjmp	.+10     	; 0x42e <ButtonPress2+0x24>
		{
			while(~PINB & 0x01){}
 424:	18 9b       	sbis	0x03, 0	; 3
 426:	fe cf       	rjmp	.-4      	; 0x424 <ButtonPress2+0x1a>
			Press_sec_level = Press_state1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 0b 01 	sts	0x010B, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
 42e:	19 9b       	sbis	0x03, 1	; 3
 430:	04 c0       	rjmp	.+8      	; 0x43a <ButtonPress2+0x30>
 432:	1a 9b       	sbis	0x03, 2	; 3
 434:	02 c0       	rjmp	.+4      	; 0x43a <ButtonPress2+0x30>
 436:	1b 99       	sbic	0x03, 3	; 3
 438:	62 c0       	rjmp	.+196    	; 0x4fe <ButtonPress2+0xf4>
		{
			Press_sec_level = Error2;
 43a:	87 e0       	ldi	r24, 0x07	; 7
 43c:	80 93 0b 01 	sts	0x010B, r24
 440:	69 c0       	rjmp	.+210    	; 0x514 <ButtonPress2+0x10a>
		}
		break;
		case Press_state1:
		if(~PINB & 0x04)
 442:	1a 99       	sbic	0x03, 2	; 3
 444:	05 c0       	rjmp	.+10     	; 0x450 <ButtonPress2+0x46>
		{
			while(~PINB & 0x04){}
 446:	1a 9b       	sbis	0x03, 2	; 3
 448:	fe cf       	rjmp	.-4      	; 0x446 <ButtonPress2+0x3c>
			Press_sec_level = Press_state2;
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	80 93 0b 01 	sts	0x010B, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x01 || ~PINB & 0x08)
 450:	19 9b       	sbis	0x03, 1	; 3
 452:	04 c0       	rjmp	.+8      	; 0x45c <ButtonPress2+0x52>
 454:	18 9b       	sbis	0x03, 0	; 3
 456:	02 c0       	rjmp	.+4      	; 0x45c <ButtonPress2+0x52>
 458:	1b 99       	sbic	0x03, 3	; 3
 45a:	51 c0       	rjmp	.+162    	; 0x4fe <ButtonPress2+0xf4>
		{
			Press_sec_level = Error;
 45c:	85 e0       	ldi	r24, 0x05	; 5
 45e:	80 93 0b 01 	sts	0x010B, r24
 462:	7b c0       	rjmp	.+246    	; 0x55a <ButtonPress2+0x150>
		}
		break;

		case Press_state2:
		if(~PINB & 0x08)
 464:	1b 99       	sbic	0x03, 3	; 3
 466:	05 c0       	rjmp	.+10     	; 0x472 <ButtonPress2+0x68>
		{
			while(~PINB & 0x08){}
 468:	1b 9b       	sbis	0x03, 3	; 3
 46a:	fe cf       	rjmp	.-4      	; 0x468 <ButtonPress2+0x5e>
			Press_sec_level = Press_state3;
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	80 93 0b 01 	sts	0x010B, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x01)
 472:	19 9b       	sbis	0x03, 1	; 3
 474:	04 c0       	rjmp	.+8      	; 0x47e <ButtonPress2+0x74>
 476:	1a 9b       	sbis	0x03, 2	; 3
 478:	02 c0       	rjmp	.+4      	; 0x47e <ButtonPress2+0x74>
 47a:	18 99       	sbic	0x03, 0	; 3
 47c:	40 c0       	rjmp	.+128    	; 0x4fe <ButtonPress2+0xf4>
		{
			Press_sec_level = Error2;
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	80 93 0b 01 	sts	0x010B, r24
 484:	47 c0       	rjmp	.+142    	; 0x514 <ButtonPress2+0x10a>
		}
		break;

		case Press_state3:
		if(~PINB & 0x01)
 486:	18 99       	sbic	0x03, 0	; 3
 488:	05 c0       	rjmp	.+10     	; 0x494 <ButtonPress2+0x8a>
		{
			while(~PINB & 0x01){}
 48a:	18 9b       	sbis	0x03, 0	; 3
 48c:	fe cf       	rjmp	.-4      	; 0x48a <ButtonPress2+0x80>
			Press_sec_level = Press_state4;
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	80 93 0b 01 	sts	0x010B, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
 494:	19 9b       	sbis	0x03, 1	; 3
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <ButtonPress2+0x96>
 498:	1a 9b       	sbis	0x03, 2	; 3
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <ButtonPress2+0x96>
 49c:	1b 99       	sbic	0x03, 3	; 3
 49e:	2f c0       	rjmp	.+94     	; 0x4fe <ButtonPress2+0xf4>
		{
			Press_sec_level = Error2;
 4a0:	87 e0       	ldi	r24, 0x07	; 7
 4a2:	80 93 0b 01 	sts	0x010B, r24
 4a6:	36 c0       	rjmp	.+108    	; 0x514 <ButtonPress2+0x10a>
		}
		break;

		case Press_state4:
		if(~PINB & 0x02)
 4a8:	19 99       	sbic	0x03, 1	; 3
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <ButtonPress2+0xac>
		{
			while(~PINB & 0x02){}
 4ac:	19 9b       	sbis	0x03, 1	; 3
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <ButtonPress2+0xa2>
			Press_sec_level = Press_state5;
 4b0:	85 e0       	ldi	r24, 0x05	; 5
 4b2:	80 93 0b 01 	sts	0x010B, r24
		}
		if(~PINB & 0x01 || ~PINB & 0x04 || ~PINB & 0x08)
 4b6:	18 9b       	sbis	0x03, 0	; 3
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <ButtonPress2+0xb8>
 4ba:	1a 9b       	sbis	0x03, 2	; 3
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <ButtonPress2+0xb8>
 4be:	1b 99       	sbic	0x03, 3	; 3
 4c0:	1e c0       	rjmp	.+60     	; 0x4fe <ButtonPress2+0xf4>
		{
			Press_sec_level = Error2;
 4c2:	87 e0       	ldi	r24, 0x07	; 7
 4c4:	80 93 0b 01 	sts	0x010B, r24
 4c8:	25 c0       	rjmp	.+74     	; 0x514 <ButtonPress2+0x10a>
		}
		break;

		case Press_state5:
		if(~PINB & 0x01)
 4ca:	18 99       	sbic	0x03, 0	; 3
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <ButtonPress2+0xce>
		{
			while(~PINB & 0x01){}
 4ce:	18 9b       	sbis	0x03, 0	; 3
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <ButtonPress2+0xc4>
			Press_sec_level = Press_state6;
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	80 93 0b 01 	sts	0x010B, r24
		}
		if(~PINB & 0x02 || ~PINB & 0x04 || ~PINB & 0x08)
 4d8:	19 9b       	sbis	0x03, 1	; 3
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <ButtonPress2+0xda>
 4dc:	1a 9b       	sbis	0x03, 2	; 3
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <ButtonPress2+0xda>
 4e0:	1b 99       	sbic	0x03, 3	; 3
 4e2:	0d c0       	rjmp	.+26     	; 0x4fe <ButtonPress2+0xf4>
		{
			Press_sec_level = Error2;
 4e4:	87 e0       	ldi	r24, 0x07	; 7
 4e6:	80 93 0b 01 	sts	0x010B, r24
 4ea:	14 c0       	rjmp	.+40     	; 0x514 <ButtonPress2+0x10a>
		}
		break;

		case Press_state6:
		if(~PINB & 0x10)
 4ec:	1c 99       	sbic	0x03, 4	; 3
 4ee:	3d c0       	rjmp	.+122    	; 0x56a <ButtonPress2+0x160>
		{
			Press_sec_level = Off2;
 4f0:	88 e0       	ldi	r24, 0x08	; 8
 4f2:	80 93 0b 01 	sts	0x010B, r24
 4f6:	41 c0       	rjmp	.+130    	; 0x57a <ButtonPress2+0x170>
		}
		break;
		default:
		Press_sec_level = Init2;
 4f8:	10 92 0b 01 	sts	0x010B, r1
 4fc:	08 95       	ret
	}
	switch(Press_sec_level)
 4fe:	80 91 0b 01 	lds	r24, 0x010B
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	fc 01       	movw	r30, r24
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	e8 30       	cpi	r30, 0x08	; 8
 50a:	f1 05       	cpc	r31, r1
 50c:	b8 f5       	brcc	.+110    	; 0x57c <ButtonPress2+0x172>
 50e:	e5 5a       	subi	r30, 0xA5	; 165
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	e1 c0       	rjmp	.+450    	; 0x6d6 <__tablejump2__>
	{
		case Error2:
		PORTA = 0x10;
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	82 b9       	out	0x02, r24	; 2
		break;
 518:	08 95       	ret

		case Press_state1:
		PORTA = 0x01;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	82 b9       	out	0x02, r24	; 2
		var2++;
 51e:	80 91 05 01 	lds	r24, 0x0105
 522:	8f 5f       	subi	r24, 0xFF	; 255
 524:	80 93 05 01 	sts	0x0105, r24
		break;
 528:	08 95       	ret

		case Press_state2:
		PORTA = 0x04;
 52a:	84 e0       	ldi	r24, 0x04	; 4
 52c:	82 b9       	out	0x02, r24	; 2
		var2++;
 52e:	80 91 05 01 	lds	r24, 0x0105
 532:	8f 5f       	subi	r24, 0xFF	; 255
 534:	80 93 05 01 	sts	0x0105, r24
		break;
 538:	08 95       	ret

		case Press_state3:
		PORTA = 0x08;
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	82 b9       	out	0x02, r24	; 2
		var2++;
 53e:	80 91 05 01 	lds	r24, 0x0105
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	80 93 05 01 	sts	0x0105, r24
		break;
 548:	08 95       	ret

		case Press_state4:
		PORTA = 0x01;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	82 b9       	out	0x02, r24	; 2
		var2++;
 54e:	80 91 05 01 	lds	r24, 0x0105
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	80 93 05 01 	sts	0x0105, r24
		break;
 558:	08 95       	ret

		case Press_state5:
		PORTA = 0x02;
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	82 b9       	out	0x02, r24	; 2
		var2++;
 55e:	80 91 05 01 	lds	r24, 0x0105
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 05 01 	sts	0x0105, r24
		break;
 568:	08 95       	ret

		case Press_state6:
		PORTA = 0x01;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	82 b9       	out	0x02, r24	; 2
		var2++;
 56e:	80 91 05 01 	lds	r24, 0x0105
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	80 93 05 01 	sts	0x0105, r24
		break;
 578:	08 95       	ret

		case Off2:
		PORTA = 0x00;
 57a:	12 b8       	out	0x02, r1	; 2
 57c:	08 95       	ret

0000057e <main>:

	}
}

int main(void)
{
 57e:	cf 92       	push	r12
 580:	df 92       	push	r13
 582:	ef 92       	push	r14
 584:	ff 92       	push	r15
	DDRA = 0xff;	PORTA = 0x00;
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	81 b9       	out	0x01, r24	; 1
 58a:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00;	PORTB = 0xFF;
 58c:	14 b8       	out	0x04, r1	; 4
 58e:	85 b9       	out	0x05, r24	; 5
	
	if(global_g == 0)
 590:	80 91 04 01 	lds	r24, 0x0104
 594:	81 11       	cpse	r24, r1
 596:	98 c0       	rjmp	.+304    	; 0x6c8 <main+0x14a>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
 598:	0f 2e       	mov	r0, r31
 59a:	f8 ee       	ldi	r31, 0xE8	; 232
 59c:	cf 2e       	mov	r12, r31
 59e:	f3 e0       	ldi	r31, 0x03	; 3
 5a0:	df 2e       	mov	r13, r31
 5a2:	e1 2c       	mov	r14, r1
 5a4:	f1 2c       	mov	r15, r1
 5a6:	f0 2d       	mov	r31, r0
 5a8:	c0 92 00 01 	sts	0x0100, r12
 5ac:	d0 92 01 01 	sts	0x0101, r13
 5b0:	e0 92 02 01 	sts	0x0102, r14
 5b4:	f0 92 03 01 	sts	0x0103, r15
	_avr_timer_cntcurr = _avr_timer_M;
 5b8:	c0 92 06 01 	sts	0x0106, r12
 5bc:	d0 92 07 01 	sts	0x0107, r13
 5c0:	e0 92 08 01 	sts	0x0108, r14
 5c4:	f0 92 09 01 	sts	0x0109, r15
	if(global_g == 0)
	{
		while(global_g == 0)
		{
			TimerSet(1000);
			TimerOn();
 5c8:	9c dd       	rcall	.-1224   	; 0x102 <TimerOn>
			TickFct_State_machine_1();
 5ca:	fb dd       	rcall	.-1034   	; 0x1c2 <TickFct_State_machine_1>
			while(!TimerFlag);
 5cc:	80 91 0a 01 	lds	r24, 0x010A
 5d0:	88 23       	and	r24, r24
 5d2:	e1 f3       	breq	.-8      	; 0x5cc <main+0x4e>
			TimerFlag = 0;	
 5d4:	10 92 0a 01 	sts	0x010A, r1
	DDRA = 0xff;	PORTA = 0x00;
	DDRB = 0x00;	PORTB = 0xFF;
	
	if(global_g == 0)
	{
		while(global_g == 0)
 5d8:	80 91 04 01 	lds	r24, 0x0104
 5dc:	88 23       	and	r24, r24
 5de:	21 f3       	breq	.-56     	; 0x5a8 <main+0x2a>
			TimerOn();
			TickFct_State_machine_1();
			while(!TimerFlag);
			TimerFlag = 0;	
		}
		while(global_g == 1)
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	19 f5       	brne	.+70     	; 0x62a <main+0xac>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f8 ec       	ldi	r31, 0xC8	; 200
 5e8:	cf 2e       	mov	r12, r31
 5ea:	d1 2c       	mov	r13, r1
 5ec:	e1 2c       	mov	r14, r1
 5ee:	f1 2c       	mov	r15, r1
 5f0:	f0 2d       	mov	r31, r0
 5f2:	c0 92 00 01 	sts	0x0100, r12
 5f6:	d0 92 01 01 	sts	0x0101, r13
 5fa:	e0 92 02 01 	sts	0x0102, r14
 5fe:	f0 92 03 01 	sts	0x0103, r15
	_avr_timer_cntcurr = _avr_timer_M;
 602:	c0 92 06 01 	sts	0x0106, r12
 606:	d0 92 07 01 	sts	0x0107, r13
 60a:	e0 92 08 01 	sts	0x0108, r14
 60e:	f0 92 09 01 	sts	0x0109, r15
			TimerFlag = 0;	
		}
		while(global_g == 1)
		{
			TimerSet(200);
			TimerOn();
 612:	77 dd       	rcall	.-1298   	; 0x102 <TimerOn>
			ButtonPress();
 614:	1d de       	rcall	.-966    	; 0x250 <ButtonPress>
			while(!TimerFlag);
 616:	80 91 0a 01 	lds	r24, 0x010A
 61a:	88 23       	and	r24, r24
 61c:	e1 f3       	breq	.-8      	; 0x616 <main+0x98>
			TimerFlag = 0;
 61e:	10 92 0a 01 	sts	0x010A, r1
			TimerOn();
			TickFct_State_machine_1();
			while(!TimerFlag);
			TimerFlag = 0;	
		}
		while(global_g == 1)
 622:	80 91 04 01 	lds	r24, 0x0104
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	21 f3       	breq	.-56     	; 0x5f2 <main+0x74>
			TimerOn();
			ButtonPress();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 2)
 62a:	80 91 04 01 	lds	r24, 0x0104
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	21 f5       	brne	.+72     	; 0x67a <main+0xfc>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
 632:	0f 2e       	mov	r0, r31
 634:	f8 ee       	ldi	r31, 0xE8	; 232
 636:	cf 2e       	mov	r12, r31
 638:	f3 e0       	ldi	r31, 0x03	; 3
 63a:	df 2e       	mov	r13, r31
 63c:	e1 2c       	mov	r14, r1
 63e:	f1 2c       	mov	r15, r1
 640:	f0 2d       	mov	r31, r0
 642:	c0 92 00 01 	sts	0x0100, r12
 646:	d0 92 01 01 	sts	0x0101, r13
 64a:	e0 92 02 01 	sts	0x0102, r14
 64e:	f0 92 03 01 	sts	0x0103, r15
	_avr_timer_cntcurr = _avr_timer_M;
 652:	c0 92 06 01 	sts	0x0106, r12
 656:	d0 92 07 01 	sts	0x0107, r13
 65a:	e0 92 08 01 	sts	0x0108, r14
 65e:	f0 92 09 01 	sts	0x0109, r15
			TimerFlag = 0;
		}
		while(global_g == 2)
		{
			TimerSet(1000);
			TimerOn();
 662:	4f dd       	rcall	.-1378   	; 0x102 <TimerOn>
			TickFct_Machine2();
 664:	80 de       	rcall	.-768    	; 0x366 <TickFct_Machine2>
			while(!TimerFlag);
 666:	80 91 0a 01 	lds	r24, 0x010A
 66a:	88 23       	and	r24, r24
 66c:	e1 f3       	breq	.-8      	; 0x666 <main+0xe8>
			TimerFlag = 0;
 66e:	10 92 0a 01 	sts	0x010A, r1
			TimerOn();
			ButtonPress();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 2)
 672:	80 91 04 01 	lds	r24, 0x0104
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	21 f3       	breq	.-56     	; 0x642 <main+0xc4>
			TimerOn();
			TickFct_Machine2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 3)
 67a:	80 91 04 01 	lds	r24, 0x0104
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	19 f5       	brne	.+70     	; 0x6c8 <main+0x14a>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) 
{
	_avr_timer_M = M;
 682:	0f 2e       	mov	r0, r31
 684:	f8 ec       	ldi	r31, 0xC8	; 200
 686:	cf 2e       	mov	r12, r31
 688:	d1 2c       	mov	r13, r1
 68a:	e1 2c       	mov	r14, r1
 68c:	f1 2c       	mov	r15, r1
 68e:	f0 2d       	mov	r31, r0
 690:	c0 92 00 01 	sts	0x0100, r12
 694:	d0 92 01 01 	sts	0x0101, r13
 698:	e0 92 02 01 	sts	0x0102, r14
 69c:	f0 92 03 01 	sts	0x0103, r15
	_avr_timer_cntcurr = _avr_timer_M;
 6a0:	c0 92 06 01 	sts	0x0106, r12
 6a4:	d0 92 07 01 	sts	0x0107, r13
 6a8:	e0 92 08 01 	sts	0x0108, r14
 6ac:	f0 92 09 01 	sts	0x0109, r15
			TimerFlag = 0;
		}
		while(global_g == 3)
		{
			TimerSet(200);
			TimerOn();
 6b0:	28 dd       	rcall	.-1456   	; 0x102 <TimerOn>
			ButtonPress2();
 6b2:	ab de       	rcall	.-682    	; 0x40a <ButtonPress2>
			while(!TimerFlag);
 6b4:	80 91 0a 01 	lds	r24, 0x010A
 6b8:	88 23       	and	r24, r24
 6ba:	e1 f3       	breq	.-8      	; 0x6b4 <main+0x136>
			TimerFlag = 0;
 6bc:	10 92 0a 01 	sts	0x010A, r1
			TimerOn();
			TickFct_Machine2();
			while(!TimerFlag);
			TimerFlag = 0;
		}
		while(global_g == 3)
 6c0:	80 91 04 01 	lds	r24, 0x0104
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	21 f3       	breq	.-56     	; 0x690 <main+0x112>
			TimerFlag = 0;
		}
	}
	return 0;
		
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	ff 90       	pop	r15
 6ce:	ef 90       	pop	r14
 6d0:	df 90       	pop	r13
 6d2:	cf 90       	pop	r12
 6d4:	08 95       	ret

000006d6 <__tablejump2__>:
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31

000006da <__tablejump__>:
 6da:	05 90       	lpm	r0, Z+
 6dc:	f4 91       	lpm	r31, Z
 6de:	e0 2d       	mov	r30, r0
 6e0:	09 94       	ijmp

000006e2 <_exit>:
 6e2:	f8 94       	cli

000006e4 <__stop_program>:
 6e4:	ff cf       	rjmp	.-2      	; 0x6e4 <__stop_program>
